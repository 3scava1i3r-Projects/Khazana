<<<<<<< HEAD
[{"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\index.js":"1","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\reportWebVitals.js":"2","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\App.js":"3","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Profile.js":"4","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Login.js":"5","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\Header.js":"6","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\LoginContext.js":"7","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Mnemonic.js":"8","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\PrivateKey.js":"9","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Event.js":"10","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\TicketList.js":"11","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\CreateToken.js":"12","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\component\\Card.js":"13","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\utils\\firebase.js":"14","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\component\\TicketCard.js":"15","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\hooks\\useKey.js":"16","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Home.js":"17"},{"size":517,"mtime":1612781184145,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1612781184145,"results":"20","hashOfConfig":"19"},{"size":1691,"mtime":1612973836847,"results":"21","hashOfConfig":"19"},{"size":280,"mtime":1612800495801,"results":"22","hashOfConfig":"19"},{"size":5245,"mtime":1612963813803,"results":"23","hashOfConfig":"19"},{"size":2235,"mtime":1612965510350,"results":"24","hashOfConfig":"19"},{"size":86,"mtime":1612800462881,"results":"25","hashOfConfig":"19"},{"size":1301,"mtime":1612974114082,"results":"26","hashOfConfig":"19"},{"size":1734,"mtime":1612974505035,"results":"27","hashOfConfig":"19"},{"size":1737,"mtime":1612895057613,"results":"28","hashOfConfig":"19"},{"size":3003,"mtime":1612900248387,"results":"29","hashOfConfig":"19"},{"size":12632,"mtime":1612965714844,"results":"30","hashOfConfig":"19"},{"size":5701,"mtime":1612880645839,"results":"31","hashOfConfig":"19"},{"size":503,"mtime":1612781184155,"results":"32","hashOfConfig":"19"},{"size":1460,"mtime":1612961433154,"results":"33","hashOfConfig":"19"},{"size":196,"mtime":1612870467792,"results":"34","hashOfConfig":"19"},{"size":135,"mtime":1612972760664,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1nvfma0",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\index.js",[],["78","79"],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\reportWebVitals.js",[],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\App.js",["80","81"],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Profile.js",[],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Login.js",["82","83","84","85","86"],"import React from 'react';\r\nimport {Box ,Button} from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { PrivateKey , Client , Hbar , AccountCreateTransaction, PublicKey } from '@hashgraph/sdk';\r\nimport { Card,Image } from \"react-bootstrap\";\r\nimport firebase from '../utils/firebase';\r\n\r\n\r\nimport './Login.css'\r\n\r\n\r\nexport default function Login() {\r\n\r\n\r\n    const myAccountId = \"0.0.303460\";\r\n    const myPrivateKey =\r\n      \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\r\n\r\n    const al = async () => {\r\n\r\n        const client = Client.forTestnet();\r\n        client.setOperator(myAccountId, myPrivateKey);\r\n\r\n\r\n        const privateKey = await PrivateKey.generate();\r\n        const publicKey = privateKey.publicKey;\r\n        console.log(\"private = 0x\" + privateKey);\r\n        /* console.log(privateKey.toString()); */\r\n        console.log(\"public = 0x\" + publicKey);\r\n\r\n        const transaction = new AccountCreateTransaction()\r\n                            .setKey(privateKey.publicKey)\r\n                            .setInitialBalance(new Hbar(10))\r\n                            \r\n\r\n        //Sign the transaction with the client operator private key and submit to a Hedera network\r\n        const txResponse = await transaction.execute(client);\r\n\r\n        //Request the receipt of the transaction\r\n        const receipt = await txResponse.getReceipt(client);\r\n\r\n        //Get the account ID\r\n        const newAccountId = receipt.accountId;\r\n\r\n        /* client.setOperator(newAccountId, privateKey); */\r\n\r\n        console.log(\"The new account ID is \" +newAccountId);\r\n\r\n\r\n\r\n\r\n        /* const TicketsRef = firebase.firestore().collection('User');\r\n\r\n\r\n        \r\n        const Tick = {\r\n                Name:Tkn.Name,\r\n                Symbol:Tkn.Sym,\r\n                Amount:Tkn.Amt,\r\n                Description:Tkn.Desc,\r\n                TokenId:(tokenId.toString()),\r\n                Creator:PblKey,\r\n        }\r\n\r\n\r\n        TicketsRef.push(Tick); */\r\n\r\n        \r\n\r\n\r\n        firebase.firestore().collection('User').doc((publicKey.toString())).set({\r\n            \r\n                PbKey:(publicKey.toString()),\r\n                PKey:(privateKey.toString()),\r\n                AccId:(newAccountId.toString()),\r\n                AccTickets:[],\r\n                CreatedTickets:[],\r\n            \r\n        \r\n        })\r\n        .then(() => {\r\n            console.log(\"Document successfully written!\");\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n\r\n\r\n        alert(\"PrivateKey = 0x\" + privateKey +'  '+ \"PublicKey = 0x\" + publicKey + '  ' + 'Account Id = ' + newAccountId)\r\n    }\r\n    return (\r\n      \r\n      <div id=\"te\"> <h1>LOGIN</h1> \r\n        <div className=\"screen\">\r\n              \r\n            \r\n{/*         <Button className =\"f\" variant=\"info\" >Login with Private Key</Button>{' '}\r\n            <Button className =\"f\" variant=\"success\"  >Login with Mnemonic</Button>{' '}\r\n            <Button className =\"f\" variant=\"primary\"  >Make an Account</Button>{' '}  */}  \r\n\r\n            <Card id=\"ll\">\r\n                <Card.Img variant=\"top\" id=\"pi\" src={\"https://dtkp6g0samjql.cloudfront.net/uploads/photo/file/18285029/9c309160-e144-41d0-b6ae-2fc92328df64.png\" }/>\r\n                    <Card.Body>\r\n                    <Card.Title id=\"ti\">Login With:</Card.Title>\r\n                    <Link id=\"pl\" to=\"/privatekey\">\r\n                     <Button id=\"jl\" variant=\"contained\" color=\"primary\">Private Key</Button>\r\n                    </Link>\r\n                    </Card.Body>\r\n            </Card>\r\n            <Card  id=\"ll\">\r\n                <Card.Img variant=\"top\" id=\"pi\" src=\"https://dtkp6g0samjql.cloudfront.net/uploads/photo/file/18285029/9c309160-e144-41d0-b6ae-2fc92328df64.png\" />\r\n                    <Card.Body>\r\n                    <Card.Title id=\"ti\">Login With:</Card.Title>\r\n    \r\n                    <Link id=\"pl\" to=\"/mnemonic\">\r\n                      <Button id=\"jl\" variant=\"contained\" color=\"primary\">Mnemonic</Button>\r\n                    </Link>\r\n                     \r\n                    </Card.Body>\r\n            </Card>\r\n            <Card  id=\"ll\" >\r\n                <Card.Img variant=\"top\" id=\"pi\" src=\"https://dtkp6g0samjql.cloudfront.net/uploads/photo/file/18285029/9c309160-e144-41d0-b6ae-2fc92328df64.png\" />\r\n                    <Card.Body>\r\n                    <Card.Title id=\"ti\" >Login With:</Card.Title>\r\n\r\n                     <Button onClick={al} id=\"jl\" variant=\"contained\"color=\"primary\">Make an Account</Button>\r\n                    </Card.Body>\r\n            </Card>\r\n\r\n            {/* <Link id=\"pl\" to=\"/privatekey\">\r\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Private Key</Button>\r\n            </Link>\r\n\r\n            <Link id=\"pl\" to=\"/mnemonic\">\r\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Mnemonic</Button>\r\n            </Link>    \r\n            \r\n            \r\n            <Button onClick={al} id=\"jl\" variant=\"contained\" color=\"secondary\">Make an Account</Button> */}\r\n            \r\n            \r\n\r\n       \r\n            \r\n        </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\Header.js",["87"],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\LoginContext.js",[],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Mnemonic.js",["88"],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\PrivateKey.js",["89","90","91"],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Event.js",["92","93"],"import React, { useState , useEffect } from 'react'\r\nimport firebase from '../utils/firebase';\r\nimport Cardl from \"../component/Card\";\r\nimport './Event.css'\r\n\r\n   \r\n\r\nexport default function Event() {\r\n\r\n\r\n  const [K , SetK] = useState([]);\r\n  \r\n\r\n  useEffect(() => {\r\n\r\n    firebase.firestore().collection('Tickets').onSnapshot(snapshot => {\r\n      \r\n      SetK(snapshot.docs.map(doc => doc.data()))\r\n      \r\n      \r\n      \r\n      \r\n      console.log(K);\r\n    \r\n    })\r\n    \r\n  }, [])\r\n\r\n    return (\r\n        <div id=\"hh\">\r\n            {K.map((K, index) => \r\n                    <>\r\n                      <Cardl K={K}/>\r\n                    </>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n{/* <div className=\"hh\">\r\n            {event.map((event, index) => \r\n                    <>\r\n                      <div className=\"cardlist\">    \r\n                      <Card className=\"gh\" style={{ width: '18rem' }}>\r\n                        <Card.Img className =\"pic\" variant=\"top\" src={event.poster} />\r\n                        <Card.Body>\r\n                            <Card.Title className=\"kl\">{event.title}</Card.Title>\r\n                            <Card.Text className=\"gg\">\r\n                            Some quick example text to build on the card title and make up the bulk of\r\n                            the card's content.\r\n                            </Card.Text>\r\n                            <Card.Text className=\"gl\">{event.amount}</Card.Text>\r\n                            <Button onClick={buy} id=\"jkl\" variant=\"contained\" color=\"primary\">Buy</Button>\r\n                        </Card.Body>\r\n                        </Card>\r\n                      </div>  \r\n                    </>\r\n                )}\r\n        </div> */}","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\TicketList.js",["94","95","96","97","98"],"import React , {useState , useEffect} from 'react'\r\nimport TicketCard from '../component/TicketCard'\r\nimport firebase from \"../utils/firebase\";\r\nimport useKey from \"../hooks/useKey\"\r\nimport {\r\n  Client,\r\n  AccountBalanceQuery,\r\n} from \"@hashgraph/sdk\";\r\n\r\nimport './TicketList.css'\r\n\r\n\r\nconst SellerAccId = \"0.0.301906\";\r\nconst SellerPblKey =\r\n  \"302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\r\nconst SellerPrKey =\r\n  \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\r\n\r\nlet t;\r\nlet v;\r\n\r\nexport default function TicketList() {\r\n\r\n  const [T, SetT] = useState([]);\r\n  // const [V, SetV] = useState(''); \r\n\r\n  // const [Key, SetKey] = useKey(\"\");\r\n\r\n  \r\n      useEffect( async () => {\r\n          const client = Client.forTestnet();\r\n\r\n          client.setOperator(SellerAccId, SellerPrKey);\r\n\r\n          const query = await new AccountBalanceQuery()\r\n            .setAccountId(SellerAccId)\r\n            .execute(client);\r\n\r\n          const a = query.tokens;\r\n\r\n          for (const [key, value] of a) {\r\n\r\n\r\n            /* console.log(key.toString(), value.toString()); */\r\n\r\n            firebase\r\n              .firestore()\r\n              .collection(\"User\")\r\n              .doc(SellerPblKey)\r\n              .update({\r\n                AccTickets: firebase.firestore.FieldValue.arrayUnion(\r\n                  key.toString() + \":\" + value.toString() + \" \"\r\n                ),\r\n              })\r\n              .then(() => {\r\n                console.log(\"Document successfully written!\");\r\n              })\r\n              .catch((error) => {\r\n                console.error(\"Error writing document: \", error);\r\n              });\r\n\r\n              \r\n            /* SetT(key.toString())\r\n            SetV(value.toString()) */\r\n            /* t = key.toString();\r\n            v = value.toString();\r\n\r\n            \r\n            console.log(t) */\r\n            \r\n          }\r\n\r\n          // firebase\r\n          //   .firestore()\r\n          //   .collection(\"User\")\r\n          //   .doc(SellerPblKey)\r\n          //   .get().then((doc) => {\r\n          //     console.log(doc.data())\r\n          //   })\r\n\r\n\r\n            firebase.firestore().collection('User').doc(SellerPblKey)\r\n            .onSnapshot((doc) => {\r\n\r\n              SetT(doc.data().AccTickets)\r\n              console.log(T)\r\n              console.log(doc.data())\r\n              \r\n              \r\n              doc.data().AccTickets.forEach(function (f) {\r\n                  console.log(f);\r\n                  \r\n              })\r\n              \r\n            }) \r\n    \r\n  }, [])\r\n     \r\n      \r\n      \r\n\r\n  \r\n  return (\r\n           <div className=\"hh\">\r\n            {T.map((T,index) => \r\n                    <>\r\n                        <TicketCard T={T} />  \r\n                        \r\n                    </>\r\n                )}\r\n        </div> \r\n\r\n          // <>\r\n          //   <div><TicketCard T={T} /></div>\r\n          // </> \r\n        );\r\n  \r\n    \r\n}\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\CreateToken.js",["99","100","101","102"],"import React, { useState } from 'react'\r\nimport { Form , Col , Row } from 'react-bootstrap'\r\nimport { Button } from '@material-ui/core'\r\nimport { Client  , TokenCreateTransaction , PublicKey  } from '@hashgraph/sdk';\r\nimport firebase from '../utils/firebase';\r\nimport { SkynetClient } from 'skynet-js'\r\n/* import IPFS from 'ipfs-core' */\r\n\r\n\r\nimport './CreateToken.css'\r\n\r\nexport default function CreateToken() {\r\n\r\n    const AccId = '0.0.301906'\r\n    const PblKey = '302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a';\r\n    const PrKey = '302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4'\r\n\r\n    \r\n    const accountId = '0.0.303460'\r\n    const publicKey = \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\"\r\n    const privateKey = \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\"\r\n\r\n\r\n    const [Tkn , SetTkn] = useState({   \r\n\r\n        Name:\"\",\r\n        Sym:\"\",\r\n        Desc:\"\",\r\n        Amt:\"\",\r\n        Price:\"\",\r\n        PbAdd:\"\",\r\n        TknId:\"\",\r\n        /* File:\"\", */ \r\n\r\n    });\r\n\r\n    const [File , SetFile] = useState('');\r\n\r\n\r\n    const inputEvent = (e) => {\r\n        /* console.log(e.target.value); */\r\n        /* SetTkn(e.target.value) */\r\n\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n        const files = e.target.files;\r\n        \r\n        \r\n        /* console.log(files[0]) */\r\n        \r\n\r\n        /* console.log(name) */\r\n        SetTkn((pv) => {\r\n            if( name === 'Name'){\r\n                return{\r\n                    Name:value,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                    File:pv.File\r\n                }\r\n            }\r\n            else if( name === 'Sym'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:value,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                    File:pv.File\r\n                }\r\n            }\r\n            else if( name === 'Desc'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:value,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                    File:pv.File\r\n                }\r\n            }\r\n            else if( name === 'Amt'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:value,\r\n                    Price:pv.Price,\r\n                    File:pv.File\r\n                }\r\n            }\r\n            else if( name === 'Price'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:value,\r\n                    File:pv.File\r\n                }\r\n            }\r\n            else if( name === 'File'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                    File:files[0],\r\n                }\r\n            }\r\n            \r\n        })\r\n\r\n\r\n        /* SetTkn({\r\n            File:(files)\r\n        }) */\r\n        /* console.log(e.target.files)\r\n        console.log(Tkn.File) */\r\n        console.log(Tkn)\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        console.log(Tkn)\r\n\r\n\r\n        \r\n        const client = Client.forTestnet();\r\n        client.setOperator(AccId, PrKey);\r\n\r\n\r\n        const transaction = await new TokenCreateTransaction()\r\n                        .setTokenName(Tkn.Name)\r\n                        .setTokenSymbol(Tkn.Sym)\r\n                        .setTreasuryAccountId(AccId)\r\n                        .setInitialSupply(Tkn.Amt)\r\n                        .execute(client);\r\n       \r\n        console.log(transaction)\r\n\r\n            \r\n        //Get the receipt of the transaction\r\n        const receipt = await transaction.getReceipt(client);\r\n\r\n        //Get the token ID from the receipt\r\n        const tokenId = receipt.tokenId;\r\n\r\n\r\n\r\n        console.log(tokenId)\r\n\r\n\r\n        console.log(\"The new token ID is \" + tokenId);\r\n        SetTkn({\r\n            TknId:(tokenId.toString())\r\n        })\r\n       \r\n\r\n        \r\n        /* const ipfs = new IPFS({host: 'ipfs.infura.io', port: 5001, protocol: 'https'});\r\n        const data = \"Writing a test message on the network\";\r\n        ipfs.add(Tkn.File, (err, hash) => {\r\n            if(err){\r\n                return console.log(err);\r\n            }\r\n            console.log('https://ipfs.infura.io/ipfs/'+hash);\r\n        }) */\r\n\r\n        \r\n\r\n        /* const ipfs = await IPFS.create()\r\n        const { cid } = await ipfs.add(Tkn.File)\r\n        console.info(cid) */\r\n        \r\n\r\n\r\n        firebase.firestore().collection('Tickets').doc(tokenId.toString()).set({\r\n            \r\n            Name:Tkn.Name,\r\n            Symbol:Tkn.Sym,\r\n            Amount:Tkn.Amt,\r\n            Description:Tkn.Desc,\r\n            Price:Tkn.Price,\r\n            TokenId:(tokenId.toString()),\r\n            Creator:PblKey,\r\n            Skylink:File\r\n            \r\n        \r\n        })\r\n        .then(() => {\r\n            console.log(\"Document successfully written!\");\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n\r\n        /* firebase\r\n          .firestore()\r\n          .collection(\"User\")\r\n          .doc(publicKey)\r\n          .set({\r\n            CreateTickets: tokenId.toString(),\r\n          })\r\n          .then(() => {\r\n            console.log(\"Document successfully written!\");\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n          });\r\n        firebase\r\n          .firestore()\r\n          .collection(\"User\")\r\n          .doc(publicKey)\r\n          .update({\r\n            CreateTickets: firebase.firestore.FieldValue.arrayUnion(tokenId.toString()),\r\n          })\r\n          .then(() => {\r\n            console.log(\"Document successfully written!\");\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n          });\r\n */\r\n        /* const TicketsRef = firebase.database().ref(\"Tick\");\r\n        firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\r\n        const Tick = {\r\n                Name:Tkn.Name,\r\n                Symbol:Tkn.Sym,\r\n                Amount:Tkn.Amt,\r\n                Description:Tkn.Desc,\r\n                TokenId:(tokenId.toString()),\r\n                Creator:PblKey,\r\n        }\r\n        TicketsRef.push(Tick); */\r\n\r\n        \r\n        \r\n        SetTkn({\r\n            Name:\"\",\r\n            Sym:\"\",\r\n            Desc:\"\",\r\n            Amt:\"\",\r\n            Price:\"\",\r\n            File:\"\"\r\n        });\r\n       \r\n    }\r\n\r\n\r\n    const file = async (e) => {\r\n\r\n\r\n        /* SetFile(e.target.files[0]); */\r\n        const cl = new SkynetClient(\"https://siasky.net/\");\r\n        console.log(File)\r\n        console.log(cl)\r\n        \r\n        \r\n        const sl = await cl.uploadFile(e.target.files[0]);\r\n        console.log(sl)\r\n        console.log('https://siasky.net/' + sl.skylink.substring(4))\r\n        alert('File uploaded')\r\n        \r\n\r\n        SetFile(sl.skylink.substring(4))\r\n        console.log(File)\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"bb\">\r\n            <div className=\"kl\">\r\n            <fieldset>\r\n                <Form>\r\n                 <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                      Name of the Token\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Name\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Name} placeholder=\"Name\" />\r\n                    </Col>\r\n                 </Form.Group>\r\n\r\n                {/* <Form.Group as={Row} controlId=\"formHorizontalPassword\">\r\n                    <Form.Label column sm={2}>\r\n                    Password\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control type=\"password\" placeholder=\"Password\" />\r\n                    </Col>\r\n                </Form.Group> */}\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                    Symbol\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Sym\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Sym} placeholder=\"Symbol (Not for NFT)\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                    Description\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Desc\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Desc} placeholder=\"Description\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                    Amount\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Amt\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Amt} placeholder=\"Amount (Not for NFT)\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                    Price\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Price\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Price} placeholder=\"Price\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                {/* <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                    <Form.Label column sm={2}>\r\n                    Public Address\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control onChange={inputEvent} type=\"text\" value={Tkn.PbAdd} placeholder=\"Public Address\" />\r\n                    </Col>\r\n                </Form.Group> */}\r\n\r\n                \r\n\r\n\r\n                <Form.Group>\r\n                   <Form.Label id=\"lo\" column sm={2}>\r\n                     Insert_File\r\n                    </Form.Label>\r\n                    <Form.File name=\"File\"  onChange={file} id=\"FormControlFile\"/>\r\n                </Form.Group>\r\n                <>\r\n                    {/* <Form.Group as={Row}>\r\n                    <Form.Label className=\"gf\" as=\"legend\" column sm={2}>\r\n                        Type of Token\r\n                    </Form.Label>\r\n                    <Col id=\"jh\" sm={10}>\r\n                        <Form.Check\r\n                        type=\"radio\"\r\n                        label=\"Normal Token\"\r\n                        name=\"formHorizontalRadios\"\r\n                        id=\"formHorizontalRadios1\"\r\n                        />\r\n                        <Form.Check\r\n                        type=\"radio\"\r\n                        label=\"NFT \"\r\n                        name=\"formHorizontalRadios\"\r\n                        id=\"formHorizontalRadios2\"\r\n                        />\r\n                    </Col>\r\n                    </Form.Group> */}\r\n                </>\r\n                {/* <Form.Group as={Row} controlId=\"formHorizontalCheck\">\r\n                    <Col sm={{ span: 10, offset: 2 }}>\r\n                    <Form.Check label=\"Remember me\" />\r\n                    </Col>\r\n                </Form.Group> */}\r\n\r\n                <Form.Group as={Row}>\r\n                    <Col  sm={{ span: 10, offset: 2 }}>\r\n                    <Button  id=\"bt\" onClick={onSubmit} variant=\"contained\" color=\"primary\" type=\"submit\">Create</Button>\r\n                    <Button  id=\"bt\" className=\"bt1\" onClick={onSubmit} variant=\"contained\" color=\"primary\" type=\"submit\" >NFT</Button>\r\n                    </Col>\r\n         \r\n                </Form.Group>\r\n                </Form>\r\n\r\n            </fieldset>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\component\\Card.js",["103","104","105","106"],"import React , { useState } from \"react\";\r\nimport { Card, OverlayTrigger, Tooltip, Image } from \"react-bootstrap\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport {\r\n  Client,\r\n  TransferTransaction,\r\n  TokenAssociateTransaction,\r\n  PrivateKey,\r\n} from \"@hashgraph/sdk\";\r\n\r\n\r\n    const SellerAccId = \"0.0.301906\";\r\n    const SellerPblKey =\r\n      \"0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\r\n    const SellerPrKey =\r\n      \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\r\n\r\n    const tokenId = \"0.0.303341\";\r\n\r\n    const accountId = \"0.0.303460\";\r\n    const publicKey =\r\n      \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\";\r\n    const privateKey =\r\n      \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\r\n\r\n    let a\r\nexport default function Cardl(props) {\r\n\r\n    const [Numb, SetNumb] = useState('');\r\n\r\n    \r\n\r\n    const numb = async (e) => {\r\n\r\n        a = e.target.value\r\n        console.log(a)\r\n        SetNumb(e.target.value)\r\n        console.log(Numb)\r\n        console.log(props.K.TokenId)\r\n    };\r\n\r\n    const buy = async () => {\r\n\r\n        \r\n      const client = Client.forTestnet();\r\n      client.setOperator(SellerAccId, SellerPrKey);\r\n\r\n      const transaction = await new TokenAssociateTransaction()\r\n        .setAccountId(accountId)\r\n        .setTokenIds([props.K.TokenId])\r\n        .freezeWith(client);\r\n\r\n      //Sign with the private key of the account that is being associated to a token\r\n      const signTx = await transaction.sign(PrivateKey.fromString(privateKey));\r\n\r\n      //Submit the transaction to a Hedera network\r\n      const txResponse = await signTx.execute(client);\r\n\r\n      //Request the receipt of the transaction\r\n      const receipt = await txResponse.getReceipt(client);\r\n\r\n      //Get the transaction consensus status\r\n      const transactionStatus = receipt.status;\r\n\r\n      console.log(\r\n        \"The transaction consensus status \" + transactionStatus.toString()\r\n      );\r\n\r\n      const tx = await new TransferTransaction()\r\n        .addTokenTransfer(props.K.TokenId, SellerAccId, -(Numb))\r\n        .addTokenTransfer(props.K.TokenId, accountId, (Numb))\r\n        .freezeWith(client);\r\n\r\n      //Sign with the sender account private key\r\n      const sign = await tx.sign(PrivateKey.fromString(SellerPrKey));\r\n\r\n      //Sign with the client operator private key and submit to a Hedera network\r\n      const txResponse1 = await sign.execute(client);\r\n\r\n      //Request the receipt of the transaction\r\n      const receipt1 = await txResponse1.getReceipt(client);\r\n\r\n      //Obtain the transaction consensus status\r\n      const transactionStatus1 = receipt1.status;\r\n\r\n      console.log(\r\n        \"The transaction consensus status \" + transactionStatus1.toString()\r\n      );\r\n\r\n      const txn = await new TransferTransaction()\r\n        .addHbarTransfer(SellerAccId, 1)\r\n        .addHbarTransfer(accountId, -1)\r\n\r\n        .freezeWith(client);\r\n\r\n      //Sign with the sender account private key\r\n      const sign2 = await txn.sign(PrivateKey.fromString(privateKey));\r\n\r\n      //Sign with the client operator private key and submit to a Hedera network\r\n      const txResponse2 = await sign2.execute(client);\r\n\r\n      //Request the receipt of the transaction\r\n      const receipt2 = await txResponse2.getReceipt(client);\r\n\r\n      //Obtain the transaction consensus status\r\n      const transactionStatus2 = receipt2.status;\r\n\r\n      console.log(\r\n        \"The transaction consensus status \" + transactionStatus1.toString()\r\n      );\r\n    };\r\n\r\n\r\n\r\n  return (\r\n    <div id=\"mcc\">\r\n      <Card id=\"cc\">\r\n        <Card.Img\r\n          id=\"pic\"\r\n          variant=\"top\"\r\n          src={`https://siasky.net/${props.K.Skylink}`}\r\n        />\r\n        <Card.Body>\r\n          <Card.Title id=\"kl\">{props.K.Name}</Card.Title>\r\n\r\n          <Card.Text id=\"gg\"> Description: {props.K.Description}</Card.Text>\r\n          <div id=\"ot\">\r\n            <OverlayTrigger\r\n              placement=\"bottom\"\r\n              overlay={<Tooltip id=\"button-tooltip-2\">{props.K.Creator}</Tooltip>}\r\n            >\r\n              {({ ref, ...triggerHandler }) => (\r\n                <Button\r\n                  id=\"bt1\"\r\n                  variant=\"light\"\r\n                  {...triggerHandler}\r\n                  className=\"d-inline-flex align-items-center\"\r\n                >\r\n                  <Image\r\n                    id=\"cim\"\r\n                    ref={ref}\r\n                    roundedCircle\r\n                    src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\"\r\n                    height=\"20px\"\r\n                    width=\"20px\"\r\n                  />\r\n                  <span className=\"ml-1\">Hover to see Creator</span>\r\n                </Button>\r\n              )}\r\n            </OverlayTrigger>\r\n            ,\r\n          </div>\r\n\r\n          {/* <Card.Text id=\"gg\">\r\n                              {props.K.Creator}\r\n                            </Card.Text> */}\r\n          <Card.Text id=\"gl\">Amount: {props.K.Amount}</Card.Text>\r\n          <Card.Text id=\"gl\">Price: {props.K.Price}</Card.Text>\r\n          <div id=\"jkl\">\r\n            <input\r\n              value={Numb}\r\n              onChange={numb}\r\n              id=\"in\"\r\n              type=\"number\"\r\n              placeholder=\"Number of Ticket\"\r\n            ></input>\r\n            <Button onClick={buy} variant=\"contained\" color=\"primary\">\r\n              Buy\r\n            </Button>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\utils\\firebase.js",[],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\component\\TicketCard.js",["107","108","109","110","111","112","113","114"],"import React from 'react'\r\nimport { Card, Form } from \"react-bootstrap\";\r\nimport { Button, Input } from \"@material-ui/core\";\r\nimport {\r\n  Client,\r\n  TransferTransaction,\r\n  TokenAssociateTransaction,\r\n  PrivateKey,\r\n} from \"@hashgraph/sdk\";\r\n\r\n\r\n\r\nconst SellerAccId = \"0.0.301906\";\r\nconst SellerPblKey =\r\n  \"0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\r\nconst SellerPrKey =\r\n  \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\r\n\r\n\r\nexport default function TicketCard(props) {\r\n\r\n    var a = props.T.slice(0,10);\r\n    var b = props.T.slice(11);\r\n    return (\r\n      <div className=\"cardlist\">\r\n        <Card className=\"gh\" style={{ width: \"18rem\" }}>\r\n          <Card.Img className=\"pic\" variant=\"top\" src={props.T.poster} />\r\n          <Card.Body id=\"cb\">\r\n            <Card.Title className=\"kl\">{props.T.title}</Card.Title>\r\n            <Card.Text className=\"gg\">\r\n              <strong>Description: </strong> {a}\r\n            </Card.Text>\r\n            <Card.Text id=\"gl\">Price : {b}</Card.Text>\r\n\r\n            <Input className=\"op\" placeholder=\"Transfer To\"></Input>\r\n\r\n            <Button id=\"jj\" variant=\"contained\" color=\"primary\">\r\n              Transfer\r\n            </Button>\r\n            <Button id=\"jk\" variant=\"contained\" color=\"primary\">\r\n              Sell\r\n            </Button>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n}\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\hooks\\useKey.js",["115","116"],"import {useState} from 'react'\r\n\r\n\r\nexport default function useKey(initialValue) {\r\n    const [C , SetC] = useState(initialValue)\r\n\r\n    const a = (Key) => {\r\n        return [...C,Key]\r\n    }\r\n}\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Home.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":24,"nodeType":"123","messageId":"124","endLine":1,"endColumn":34},{"ruleId":"121","severity":1,"message":"125","line":16,"column":10,"nodeType":"123","messageId":"124","endLine":16,"endColumn":21},{"ruleId":"121","severity":1,"message":"126","line":2,"column":9,"nodeType":"123","messageId":"124","endLine":2,"endColumn":12},{"ruleId":"121","severity":1,"message":"127","line":4,"column":65,"nodeType":"123","messageId":"124","endLine":4,"endColumn":74},{"ruleId":"121","severity":1,"message":"128","line":5,"column":15,"nodeType":"123","messageId":"124","endLine":5,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":89,"column":51,"nodeType":"131","messageId":"132","endLine":89,"endColumn":52},{"ruleId":"129","severity":1,"message":"130","line":89,"column":89,"nodeType":"131","messageId":"132","endLine":89,"endColumn":90},{"ruleId":"121","severity":1,"message":"122","line":1,"column":15,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"133","line":3,"column":20,"nodeType":"123","messageId":"124","endLine":3,"endColumn":30},{"ruleId":"121","severity":1,"message":"134","line":1,"column":18,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"133","line":3,"column":10,"nodeType":"123","messageId":"124","endLine":3,"endColumn":20},{"ruleId":"121","severity":1,"message":"135","line":3,"column":23,"nodeType":"123","messageId":"124","endLine":3,"endColumn":31},{"ruleId":"136","severity":1,"message":"137","line":27,"column":6,"nodeType":"138","endLine":27,"endColumn":8,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":43,"column":1,"nodeType":"142","messageId":"143","endLine":62,"endColumn":19},{"ruleId":"121","severity":1,"message":"144","line":4,"column":8,"nodeType":"123","messageId":"124","endLine":4,"endColumn":14},{"ruleId":"121","severity":1,"message":"145","line":19,"column":5,"nodeType":"123","messageId":"124","endLine":19,"endColumn":6},{"ruleId":"121","severity":1,"message":"146","line":20,"column":5,"nodeType":"123","messageId":"124","endLine":20,"endColumn":6},{"ruleId":"136","severity":1,"message":"147","line":30,"column":18,"nodeType":"148","endLine":97,"endColumn":4},{"ruleId":"136","severity":1,"message":"149","line":97,"column":6,"nodeType":"138","endLine":97,"endColumn":8,"suggestions":"150"},{"ruleId":"121","severity":1,"message":"127","line":4,"column":45,"nodeType":"123","messageId":"124","endLine":4,"endColumn":54},{"ruleId":"121","severity":1,"message":"151","line":19,"column":11,"nodeType":"123","messageId":"124","endLine":19,"endColumn":20},{"ruleId":"121","severity":1,"message":"152","line":20,"column":11,"nodeType":"123","messageId":"124","endLine":20,"endColumn":20},{"ruleId":"121","severity":1,"message":"153","line":21,"column":11,"nodeType":"123","messageId":"124","endLine":21,"endColumn":21},{"ruleId":"121","severity":1,"message":"154","line":13,"column":11,"nodeType":"123","messageId":"124","endLine":13,"endColumn":23},{"ruleId":"121","severity":1,"message":"155","line":18,"column":11,"nodeType":"123","messageId":"124","endLine":18,"endColumn":18},{"ruleId":"121","severity":1,"message":"152","line":21,"column":11,"nodeType":"123","messageId":"124","endLine":21,"endColumn":20},{"ruleId":"121","severity":1,"message":"156","line":106,"column":13,"nodeType":"123","messageId":"124","endLine":106,"endColumn":31},{"ruleId":"121","severity":1,"message":"157","line":2,"column":16,"nodeType":"123","messageId":"124","endLine":2,"endColumn":20},{"ruleId":"121","severity":1,"message":"158","line":5,"column":3,"nodeType":"123","messageId":"124","endLine":5,"endColumn":9},{"ruleId":"121","severity":1,"message":"159","line":6,"column":3,"nodeType":"123","messageId":"124","endLine":6,"endColumn":22},{"ruleId":"121","severity":1,"message":"160","line":7,"column":3,"nodeType":"123","messageId":"124","endLine":7,"endColumn":28},{"ruleId":"121","severity":1,"message":"133","line":8,"column":3,"nodeType":"123","messageId":"124","endLine":8,"endColumn":13},{"ruleId":"121","severity":1,"message":"161","line":13,"column":7,"nodeType":"123","messageId":"124","endLine":13,"endColumn":18},{"ruleId":"121","severity":1,"message":"154","line":14,"column":7,"nodeType":"123","messageId":"124","endLine":14,"endColumn":19},{"ruleId":"121","severity":1,"message":"162","line":16,"column":7,"nodeType":"123","messageId":"124","endLine":16,"endColumn":18},{"ruleId":"121","severity":1,"message":"163","line":5,"column":16,"nodeType":"123","messageId":"124","endLine":5,"endColumn":20},{"ruleId":"121","severity":1,"message":"164","line":7,"column":11,"nodeType":"123","messageId":"124","endLine":7,"endColumn":12},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'showProfile' is assigned a value but never used.","'Box' is defined but never used.","'PublicKey' is defined but never used.","'Image' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'PrivateKey' is defined but never used.","'useState' is defined but never used.","'Mnemonic' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'K'. Either include it or remove the dependency array.","ArrayExpression",["167"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'useKey' is defined but never used.","'t' is defined but never used.","'v' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'T'. Either include it or remove the dependency array.",["168"],"'accountId' is assigned a value but never used.","'publicKey' is assigned a value but never used.","'privateKey' is assigned a value but never used.","'SellerPblKey' is assigned a value but never used.","'tokenId' is assigned a value but never used.","'transactionStatus2' is assigned a value but never used.","'Form' is defined but never used.","'Client' is defined but never used.","'TransferTransaction' is defined but never used.","'TokenAssociateTransaction' is defined but never used.","'SellerAccId' is assigned a value but never used.","'SellerPrKey' is assigned a value but never used.","'SetC' is assigned a value but never used.","'a' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [K]",{"range":"173","text":"174"},"Update the dependencies array to be: [T]",{"range":"175","text":"176"},[482,484],"[K]",[2619,2621],"[T]"]
=======
[{"/home/juuzou/Documents/hello/Khazana/tickets/src/index.js":"1","/home/juuzou/Documents/hello/Khazana/tickets/src/reportWebVitals.js":"2","/home/juuzou/Documents/hello/Khazana/tickets/src/App.js":"3","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/PrivateKey.js":"4","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Login.js":"5","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Profile.js":"6","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Event.js":"7","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/LoginContext.js":"8","/home/juuzou/Documents/hello/Khazana/tickets/src/Header.js":"9","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/TicketList.js":"10","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Mnemonic.js":"11","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/CreateToken.js":"12","/home/juuzou/Documents/hello/Khazana/tickets/src/utils/firebase.js":"13","/home/juuzou/Documents/hello/Khazana/tickets/src/component/TicketCard.js":"14","/home/juuzou/Documents/hello/Khazana/tickets/src/hooks/useKey.js":"15","/home/juuzou/Documents/hello/Khazana/tickets/src/component/Card.js":"16","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/NFT.js":"17","/home/juuzou/Documents/hello/Khazana/tickets/src/component/NFTCard.js":"18"},{"size":500,"mtime":1612161786297,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1612077971595,"results":"21","hashOfConfig":"20"},{"size":2038,"mtime":1612967227132,"results":"22","hashOfConfig":"20"},{"size":1601,"mtime":1612865839352,"results":"23","hashOfConfig":"20"},{"size":5132,"mtime":1612958632456,"results":"24","hashOfConfig":"20"},{"size":267,"mtime":1612865839352,"results":"25","hashOfConfig":"20"},{"size":1676,"mtime":1612884188480,"results":"26","hashOfConfig":"20"},{"size":84,"mtime":1612865839352,"results":"27","hashOfConfig":"20"},{"size":2109,"mtime":1612967227132,"results":"28","hashOfConfig":"20"},{"size":2884,"mtime":1612958632456,"results":"29","hashOfConfig":"20"},{"size":1236,"mtime":1612361623423,"results":"30","hashOfConfig":"20"},{"size":13627,"mtime":1612967227132,"results":"31","hashOfConfig":"20"},{"size":486,"mtime":1612594872659,"results":"32","hashOfConfig":"20"},{"size":1413,"mtime":1612967227084,"results":"33","hashOfConfig":"20"},{"size":186,"mtime":1612886308927,"results":"34","hashOfConfig":"20"},{"size":5526,"mtime":1612771564725,"results":"35","hashOfConfig":"20"},{"size":1598,"mtime":1612967227136,"results":"36","hashOfConfig":"20"},{"size":5327,"mtime":1612967227132,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1ncuevm",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},"/home/juuzou/Documents/hello/Khazana/tickets/src/index.js",[],["86","87"],"/home/juuzou/Documents/hello/Khazana/tickets/src/reportWebVitals.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/App.js",["88","89"],"/home/juuzou/Documents/hello/Khazana/tickets/src/screens/PrivateKey.js",["90","91","92"],"import React , { useState,useContext } from 'react'\nimport {Box , Button } from '@material-ui/core'\nimport { PrivateKey , Mnemonic} from '@hashgraph/sdk'\nimport {LoginContext} from \"./LoginContext\";\n\nimport './PrivateKey.css'\n\n\nexport default function PK() {\n    \n    const {setPrKey,prKey,setshowProfile} = useContext(LoginContext);\n    // const [PrKey , SetPrKey ] = useState('');\n    \n\n    const inputEvent = (e) => {\n        /* console.log(e.target.value); */\n        setPrKey(e.target.value)\n    }\n\n    /* media milk rally thought afford gas monitor close box slow employ marine quality jacket orbit trigger cancel try above weird save prepare snow slim */\n    \n    \n    const onSubmit = async (e) => {\n        setshowProfile(true);\n        // e.preventDefault();\n        // const privateKey = PrivateKey.fromString(PrKey); \n        // console.log(privateKey.toString());   \n        // const publicKey = privateKey.publicKey;\n        // console.log(publicKey.toString());\n        // SetPrKey('')\n        /* const mnemonic = await Mnemonic.generate(); */\n        /* var i;\n        for(i=0;i<24;i++){\n            console.log(mnemonic.words[i])\n        } */\n        \n        \n    }\n\n    return (\n        <div className=\"screen\">\n            \n                <Box className =\"box\" component=\"div\" m={1}>\n                <input type=\"text\" className=\"pkinput\" onChange={inputEvent} value={prKey}/>\n                <Button onClick={onSubmit} type=\"submit\" id =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login with Private Key</Button>\n                </Box>\n            \n        </div>\n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Login.js",["93","94","95"],"import React from 'react';\nimport {Box ,Button} from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { PrivateKey , Client , Hbar , AccountCreateTransaction, PublicKey } from '@hashgraph/sdk';\nimport firebase from '../utils/firebase';\n\nimport './Login.css'\n\n\nexport default function Login() {\n\n\n    const myAccountId = \"0.0.303460\";\n    const myPrivateKey =\n      \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\n\n    const al = async () => {\n\n        const client = Client.forTestnet();\n        client.setOperator(myAccountId, myPrivateKey);\n\n\n        const privateKey = await PrivateKey.generate();\n        const publicKey = privateKey.publicKey;\n        console.log(\"private = 0x\" + privateKey);\n        /* console.log(privateKey.toString()); */\n        console.log(\"public = 0x\" + publicKey);\n\n        const transaction = new AccountCreateTransaction()\n                            .setKey(privateKey.publicKey)\n                            .setInitialBalance(new Hbar(10))\n                            \n\n        //Sign the transaction with the client operator private key and submit to a Hedera network\n        const txResponse = await transaction.execute(client);\n\n        //Request the receipt of the transaction\n        const receipt = await txResponse.getReceipt(client);\n\n        //Get the account ID\n        const newAccountId = receipt.accountId;\n\n        /* client.setOperator(newAccountId, privateKey); */\n\n        console.log(\"The new account ID is \" +newAccountId);\n\n\n\n\n        /* const TicketsRef = firebase.firestore().collection('User');\n\n\n        \n        const Tick = {\n                Name:Tkn.Name,\n                Symbol:Tkn.Sym,\n                Amount:Tkn.Amt,\n                Description:Tkn.Desc,\n                TokenId:(tokenId.toString()),\n                Creator:PblKey,\n        }\n\n\n        TicketsRef.push(Tick); */\n\n        \n\n\n        firebase.firestore().collection('User').doc((publicKey.toString())).set({\n            \n                PbKey:(publicKey.toString()),\n                PKey:(privateKey.toString()),\n                AccId:(newAccountId.toString()),\n                AccTickets:[],\n                CreatedTickets:[],\n            \n        \n        })\n        .then(() => {\n            console.log(\"Document successfully written!\");\n        })\n        .catch((error) => {\n            console.error(\"Error writing document: \", error);\n        });\n\n\n        alert(\"PrivateKey = 0x\" + privateKey +'  '+ \"PublicKey = 0x\" + publicKey + '  ' + 'Account Id = ' + newAccountId)\n    }\n    return (\n        <div className=\"screen\">\n        <fieldset className=\"df\">\n            <Box className =\"box\" component=\"div\" m={1}>\n{/*         <Button className =\"f\" variant=\"info\" >Login with Private Key</Button>{' '}\n            <Button className =\"f\" variant=\"success\"  >Login with Mnemonic</Button>{' '}\n            <Button className =\"f\" variant=\"primary\"  >Make an Account</Button>{' '}  */}  \n\n            <Link id=\"pl\" to=\"/privatekey\">\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Private Key</Button>\n            </Link>\n\n            <Link id=\"pl\" to=\"/mnemonic\">\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Mnemonic</Button>\n            </Link>    \n            \n            \n            <Button onClick={al} id=\"jl\" variant=\"contained\" color=\"secondary\">Make an Account</Button>\n            \n            </Box>\n\n        </fieldset>\n            \n        </div>\n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Profile.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Event.js",["96","97"],"import React, { useState , useEffect } from 'react'\nimport firebase from '../utils/firebase';\nimport Cardl from \"../component/Card\";\nimport './Event.css'\n\n   \n\nexport default function Event() {\n\n\n  const [K , SetK] = useState([]);\n  \n\n  useEffect(() => {\n\n    firebase.firestore().collection('Tickets').onSnapshot(snapshot => {\n      \n      SetK(snapshot.docs.map(doc => doc.data()))\n      \n      \n      \n      \n      console.log(K);\n    \n    })\n    \n  }, [])\n\n    return (\n        <div id=\"hh\">\n            {K.map((K, index) => \n                    <>\n                      <Cardl K={K}/>\n                    </>\n                )}\n        </div>\n    )\n}\n\n\n\n\n{/* <div className=\"hh\">\n            {event.map((event, index) => \n                    <>\n                      <div className=\"cardlist\">    \n                      <Card className=\"gh\" style={{ width: '18rem' }}>\n                        <Card.Img className =\"pic\" variant=\"top\" src={event.poster} />\n                        <Card.Body>\n                            <Card.Title className=\"kl\">{event.title}</Card.Title>\n                            <Card.Text className=\"gg\">\n                            Some quick example text to build on the card title and make up the bulk of\n                            the card's content.\n                            </Card.Text>\n                            <Card.Text className=\"gl\">{event.amount}</Card.Text>\n                            <Button onClick={buy} id=\"jkl\" variant=\"contained\" color=\"primary\">Buy</Button>\n                        </Card.Body>\n                        </Card>\n                      </div>  \n                    </>\n                )}\n        </div> */}","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/LoginContext.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/Header.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/screens/TicketList.js",["98","99","100","101","102","103","104","105"],"import React , {useState , useEffect} from 'react'\nimport TicketCard from '../component/TicketCard'\nimport firebase from \"../utils/firebase\";\nimport useKey from \"../hooks/useKey\"\nimport {\n  Client,\n  AccountBalanceQuery,\n} from \"@hashgraph/sdk\";\n\nimport './TicketList.css'\n\n\nconst SellerAccId = \"0.0.301906\";\nconst SellerPblKey =\n  \"302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\nconst SellerPrKey =\n  \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\n\nlet t;\nlet v;\n\nexport default function TicketList() {\n\n  const [T, SetT] = useState(\"\");\n  const [V, SetV] = useState(''); \n\n  // const [Key, SetKey] = useKey(\"\");\n\n  \n      useEffect( async () => {\n          const client = Client.forTestnet();\n\n          client.setOperator(SellerAccId, SellerPrKey);\n\n          const query = await new AccountBalanceQuery()\n            .setAccountId(SellerAccId)\n            .execute(client);\n\n          const a = query.tokens;\n\n          for (const [key, value] of a) {\n\n\n            /* console.log(key.toString(), value.toString()); */\n\n            firebase\n              .firestore()\n              .collection(\"User\")\n              .doc(SellerPblKey)\n              .update({\n                AccTickets: firebase.firestore.FieldValue.arrayUnion(\n                  key.toString() + \":\" + value.toString() + \" \"\n                ),\n              })\n              .then(() => {\n                console.log(\"Document successfully written!\");\n              })\n              .catch((error) => {\n                console.error(\"Error writing document: \", error);\n              });\n\n              \n\n              \n            /* SetT(key.toString())\n            SetV(value.toString()) */\n            /* t = key.toString();\n            v = value.toString();\n\n            \n            console.log(t) */\n            \n          }\n\n          firebase\n            .firestore()\n            .collection(\"User\")\n            .doc(SellerPblKey)\n            .get().then((doc) => {\n              console.log(doc.data())\n            })\n\n\n            /* firebase.firestore().collection('User').doc(SellerPblKey)\n            .onSnapshot((doc) => {\n\n              SetT(doc.data().AccTickets)\n              console.log(T)\n              console.log(doc.data())\n              \n              \n              doc.data().AccTickets.forEach(function (f) {\n                  console.log(f);\n                  \n              })\n              \n            }) */\n    \n  }, [])\n     \n      \n      \n\n  \n  return (\n           /* <div className=\"hh\">\n            {t.map((t, index) => \n                    <>\n                        <TicketCard T={T} />  \n                      <div>{t}</div>\n                    </>\n                )}\n        </div> */\n\n           <>\n            <div>{T}</div>\n          </> \n        );\n  \n    \n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Mnemonic.js",["106"],"import React , { useState } from 'react'\nimport {Box , Button } from '@material-ui/core'\nimport { Mnemonic, PrivateKey } from '@hashgraph/sdk'\n\n\nimport './PrivateKey.css'\n\n\n\nexport default function Mne() {\n\n    const [Mn , SetMn ] = useState('');\n    \n\n    const inputEvent = (e) => {\n        console.log(e.target.value);\n        SetMn(e.target.value)\n    }\n\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const mnemonic = await Mnemonic.fromString(Mn);\n        console.log(mnemonic)\n        /* const privateKey = PrivateKey.fromMnemonic(Mn); */\n        const privateKey = await mnemonic.toPrivateKey();\n        console.log(privateKey);\n        const publicKey = privateKey.publicKey;\n        console.log(publicKey.toString());\n        SetMn('');\n       \n    }\n\n\n    return (\n        <div className=\"screen\">\n            <form >\n                <Box className =\"box\" component=\"div\" m={1}>\n                <input onChange={inputEvent} type=\"text\" className=\"pkinput\" value={Mn}/>\n                <Button onClick={onSubmit} type=\"submit\" className =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login with Mnemonic Phrase</Button>\n                </Box>\n            </form>\n        </div>\n        \n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/CreateToken.js",["107","108","109","110","111"],"import React, { useState } from 'react'\nimport { Form , Col , Row } from 'react-bootstrap'\nimport { Button } from '@material-ui/core'\nimport {\n  Client,\n  TokenCreateTransaction,\n  PublicKey,\n  PrivateKey,\n} from \"@hashgraph/sdk\";\nimport firebase from '../utils/firebase';\nimport { SkynetClient } from 'skynet-js'\n/* import IPFS from 'ipfs-core' */\n\n\nimport './CreateToken.css'\n\nexport default function CreateToken() {\n\n    const AccId = '0.0.301906'\n    const PblKey = '302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a';\n    const PrKey = '302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4'\n\n    \n    const accountId = '0.0.303460'\n    const publicKey = \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\"\n    const privateKey = \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\"\n\n\n    const [Tkn , SetTkn] = useState({   \n\n        Name:\"\",\n        Sym:\"\",\n        Desc:\"\",\n        Amt:\"\",\n        Price:\"\",\n        PbAdd:\"\",\n        TknId:\"\",\n        /* File:\"\", */ \n\n    });\n\n    const [File , SetFile] = useState('');\n\n\n    const inputEvent = (e) => {\n        /* console.log(e.target.value); */\n        /* SetTkn(e.target.value) */\n\n        const value = e.target.value;\n        const name = e.target.name;\n        const files = e.target.files;\n        \n        \n        /* console.log(files[0]) */\n        \n\n        /* console.log(name) */\n        SetTkn((pv) => {\n            if( name === 'Name'){\n                return{\n                    Name:value,\n                    Sym:pv.Sym,\n                    Desc:pv.Desc,\n                    Amt:pv.Amt,\n                    Price:pv.Price,\n                    File:pv.File\n                }\n            }\n            else if( name === 'Sym'){\n                return{\n                    Name:pv.Name,\n                    Sym:value,\n                    Desc:pv.Desc,\n                    Amt:pv.Amt,\n                    Price:pv.Price,\n                    File:pv.File\n                }\n            }\n            else if( name === 'Desc'){\n                return{\n                    Name:pv.Name,\n                    Sym:pv.Sym,\n                    Desc:value,\n                    Amt:pv.Amt,\n                    Price:pv.Price,\n                    File:pv.File\n                }\n            }\n            else if( name === 'Amt'){\n                return{\n                    Name:pv.Name,\n                    Sym:pv.Sym,\n                    Desc:pv.Desc,\n                    Amt:value,\n                    Price:pv.Price,\n                    File:pv.File\n                }\n            }\n            else if( name === 'Price'){\n                return{\n                    Name:pv.Name,\n                    Sym:pv.Sym,\n                    Desc:pv.Desc,\n                    Amt:pv.Amt,\n                    Price:value,\n                    File:pv.File\n                }\n            }\n            else if( name === 'File'){\n                return{\n                    Name:pv.Name,\n                    Sym:pv.Sym,\n                    Desc:pv.Desc,\n                    Amt:pv.Amt,\n                    Price:pv.Price,\n                    File:files[0],\n                }\n            }\n            \n        })\n\n\n        /* SetTkn({\n            File:(files)\n        }) */\n        /* console.log(e.target.files)\n        console.log(Tkn.File) */\n        console.log(Tkn)\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        \n        console.log(Tkn)\n\n\n        \n        const client = Client.forTestnet();\n        client.setOperator(AccId, PrKey);\n\n\n        const transaction = await new TokenCreateTransaction()\n                        .setTokenName(Tkn.Name)\n                        .setTokenSymbol(Tkn.Sym)\n                        .setTreasuryAccountId(AccId)\n                        .setInitialSupply(Tkn.Amt)\n                        .execute(client);\n       \n        console.log(transaction)\n\n            \n        //Get the receipt of the transaction\n        const receipt = await transaction.getReceipt(client);\n\n        //Get the token ID from the receipt\n        const tokenId = receipt.tokenId;\n\n\n\n        console.log(tokenId)\n\n\n        console.log(\"The new token ID is \" + tokenId);\n        SetTkn({\n            TknId:(tokenId.toString())\n        })\n       \n\n        firebase.firestore().collection('Tickets').doc(tokenId.toString()).set({\n            \n            Name:Tkn.Name,\n            Symbol:Tkn.Sym,\n            Amount:Tkn.Amt,\n            Description:Tkn.Desc,\n            Price:Tkn.Price,\n            TokenId:(tokenId.toString()),\n            Creator:PblKey,\n            Skylink:File\n            \n        \n        })\n        .then(() => {\n            console.log(\"Document successfully written!\");\n        })\n        .catch((error) => {\n            console.error(\"Error writing document: \", error);\n        });\n\n        /* firebase\n          .firestore()\n          .collection(\"User\")\n          .doc(publicKey)\n          .set({\n            CreateTickets: tokenId.toString(),\n          })\n          .then(() => {\n            console.log(\"Document successfully written!\");\n          })\n          .catch((error) => {\n            console.error(\"Error writing document: \", error);\n          });\n        firebase\n          .firestore()\n          .collection(\"User\")\n          .doc(publicKey)\n          .update({\n            CreateTickets: firebase.firestore.FieldValue.arrayUnion(tokenId.toString()),\n          })\n          .then(() => {\n            console.log(\"Document successfully written!\");\n          })\n          .catch((error) => {\n            console.error(\"Error writing document: \", error);\n          });\n */\n        /* const TicketsRef = firebase.database().ref(\"Tick\");\n        firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\n        const Tick = {\n                Name:Tkn.Name,\n                Symbol:Tkn.Sym,\n                Amount:Tkn.Amt,\n                Description:Tkn.Desc,\n                TokenId:(tokenId.toString()),\n                Creator:PblKey,\n        }\n        TicketsRef.push(Tick); */\n\n        \n        \n        SetTkn({\n            Name:\"\",\n            Sym:\"\",\n            Desc:\"\",\n            Amt:\"\",\n            Price:\"\",\n            \n        });\n\n        SetFile(\"\");\n       \n    }\n\n    const Nft = async (e) => {\n        e.preventDefault();\n\n        console.log(Tkn)\n\n        const client = Client.forTestnet();\n        client.setOperator(AccId, PrKey);\n        \n\n        const transaction = await new TokenCreateTransaction()\n              .setTokenName(Tkn.Name)\n              .setTokenSymbol(File)\n              .setTreasuryAccountId(AccId)\n              .setInitialSupply(1)\n              .freezeWith(client);\n\n            console.log(\n              transaction.transactionId.validStart.seconds.toString()\n            );\n            \n            //Get the receipt of the transaction\n\n            const txn = await transaction.sign(PrivateKey.fromString(PrKey));\n            \n\n            const signtxn = await txn.execute(client);\n            console.log(txn)\n\n            const receipt = await signtxn.getReceipt(client);\n            \n            //Get the token ID from the receipt\n            const tokenId = receipt.tokenId;\n\n            console.log(tokenId.toString()); \n\n\n\n            firebase\n            .firestore()\n            .collection(\"NFT\")\n            .doc(tokenId.toString())\n            .set({\n                Name: Tkn.Name,\n                Symbol: File,\n                Amount: 1,\n                Description: Tkn.Desc + ' link to doc is as follows - ' + `https://siasky.net/${File}`,\n                Price: Tkn.Price,\n                TokenId: tokenId.toString(),\n                Creator: PblKey,\n                Skylink: File,\n            })\n            .then(() => {\n            console.log(\"Document successfully written!\");\n            })\n            .catch((error) => {\n            console.error(\"Error writing document: \", error);\n            });\n\n\n\n\n\n            SetTkn({\n              Name: \"\",\n              Sym: \"\",\n              Desc: \"\",\n              Amt: \"\",\n              Price: \"\",\n            });\n\n            SetFile('');\n\n    }\n\n\n    const file = async (e) => {\n\n\n        /* SetFile(e.target.files[0]); */\n        const cl = new SkynetClient(\"https://siasky.net/\");\n        console.log(File)\n        console.log(cl)\n        \n        \n        const sl = await cl.uploadFile(e.target.files[0]);\n        console.log(sl)\n        console.log('https://siasky.net/' + sl.skylink.substring(4))\n        alert('File uploaded')\n        \n\n        SetFile(sl.skylink.substring(4))\n        console.log(File)\n        \n    }\n\n    return (\n        <div className=\"bb\">\n            <div className=\"kl\">\n            <fieldset>\n                <Form>\n                 <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\n                    <Form.Label id=\"lo\" column sm={2}>\n                      Name of the Event\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control name=\"Name\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Name} placeholder=\"Name\" />\n                    </Col>\n                 </Form.Group>\n\n                {/* <Form.Group as={Row} controlId=\"formHorizontalPassword\">\n                    <Form.Label column sm={2}>\n                    Password\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control type=\"password\" placeholder=\"Password\" />\n                    </Col>\n                </Form.Group> */}\n\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\n                    <Form.Label id=\"lo\" column sm={2}>\n                    Symbol\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control name=\"Sym\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Sym} placeholder=\"Symbol\" />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\n                    <Form.Label id=\"lo\" column sm={2}>\n                    Description\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control name=\"Desc\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Desc} placeholder=\"Description\" />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\n                    <Form.Label id=\"lo\" column sm={2}>\n                    Amount\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control name=\"Amt\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Amt} placeholder=\"Amount\" />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\n                    <Form.Label id=\"lo\" column sm={2}>\n                    Price\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control name=\"Price\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Price} placeholder=\"Price\" />\n                    </Col>\n                </Form.Group>\n\n                {/* <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                    <Form.Label column sm={2}>\n                    Public Address\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control onChange={inputEvent} type=\"text\" value={Tkn.PbAdd} placeholder=\"Public Address\" />\n                    </Col>\n                </Form.Group> */}\n\n                \n\n\n                <Form.Group>\n                   <Form.Label id=\"lo\" column sm={2}>\n                     Insert_Image\n                    </Form.Label>\n                    <Form.File name=\"File\"  onChange={file} id=\"FormControlFile\"/>\n                </Form.Group>\n                <>\n                    {/* <Form.Group as={Row}>\n                    <Form.Label className=\"gf\" as=\"legend\" column sm={2}>\n                        Type of Token\n                    </Form.Label>\n                    <Col id=\"jh\" sm={10}>\n                        <Form.Check\n                        type=\"radio\"\n                        label=\"Normal Token\"\n                        name=\"formHorizontalRadios\"\n                        id=\"formHorizontalRadios1\"\n                        />\n                        <Form.Check\n                        type=\"radio\"\n                        label=\"NFT \"\n                        name=\"formHorizontalRadios\"\n                        id=\"formHorizontalRadios2\"\n                        />\n                    </Col>\n                    </Form.Group> */}\n                </>\n                {/* <Form.Group as={Row} controlId=\"formHorizontalCheck\">\n                    <Col sm={{ span: 10, offset: 2 }}>\n                    <Form.Check label=\"Remember me\" />\n                    </Col>\n                </Form.Group> */}\n\n                <Form.Group as={Row}>\n                    <Col  sm={{ span: 10, offset: 2 }}>\n                    <Button  id=\"bt\" onClick={onSubmit} variant=\"contained\" color=\"primary\" type=\"submit\">Create</Button>\n                    <Button  id=\"bt\" className=\"bt1\" onClick={Nft} variant=\"contained\" color=\"primary\" type=\"submit\" >NFT</Button>\n                    </Col>\n         \n                </Form.Group>\n                </Form>\n\n            </fieldset>\n                \n            </div>\n            \n        </div>\n    )\n}","/home/juuzou/Documents/hello/Khazana/tickets/src/utils/firebase.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/component/TicketCard.js",["112","113","114","115","116","117","118","119"],"import React from 'react'\nimport { Card, Form } from \"react-bootstrap\";\nimport { Button, Input } from \"@material-ui/core\";\nimport {\n  Client,\n  TransferTransaction,\n  TokenAssociateTransaction,\n  PrivateKey,\n} from \"@hashgraph/sdk\";\n\n\n\nconst SellerAccId = \"0.0.301906\";\nconst SellerPblKey =\n  \"0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\nconst SellerPrKey =\n  \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\n\n\nexport default function TicketCard(props) {\n    return (\n      <div className=\"cardlist\">\n        <Card className=\"gh\" style={{ width: \"18rem\" }}>\n          <Card.Img className=\"pic\" variant=\"top\" src={props.T.poster} />\n          <Card.Body id=\"cb\">\n            <Card.Title className=\"kl\">{props.T.title}</Card.Title>\n            <Card.Text className=\"gg\">\n              <strong>Description: </strong> Stay on top of the changing U.S.\n              and global markets with our market summary page. Dive deeper with\n              our rich data, rate tables and tools.\n            </Card.Text>\n            <Card.Text id=\"gl\">Price : 1000</Card.Text>\n\n            <Input className=\"op\" placeholder=\"Transfer To\"></Input>\n\n            <Button id=\"jj\" variant=\"contained\" color=\"primary\">\n              Transfer\n            </Button>\n            <Button id=\"jk\" variant=\"contained\" color=\"primary\">\n              Sell\n            </Button>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/hooks/useKey.js",["120","121"],"import {useState} from 'react'\n\n\nexport default function useKey(initialValue) {\n    const [C , SetC] = useState(initialValue)\n\n    const a = (Key) => {\n        return [...C,Key]\n    }\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/component/Card.js",["122","123","124","125"],"import React , { useState } from \"react\";\nimport { Card, OverlayTrigger, Tooltip, Image } from \"react-bootstrap\";\nimport { Button } from \"@material-ui/core\";\nimport {\n  Client,\n  TransferTransaction,\n  TokenAssociateTransaction,\n  PrivateKey,\n} from \"@hashgraph/sdk\";\n\n\n    const SellerAccId = \"0.0.301906\";\n    const SellerPblKey =\n      \"0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\n    const SellerPrKey =\n      \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\n\n    const tokenId = \"0.0.303341\";\n\n    const accountId = \"0.0.303460\";\n    const publicKey =\n      \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\";\n    const privateKey =\n      \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\n\n    let a\nexport default function Cardl(props) {\n\n    const [Numb, SetNumb] = useState('');\n\n    \n\n    const numb = async (e) => {\n\n        a = e.target.value\n        console.log(a)\n        SetNumb(e.target.value)\n        console.log(Numb)\n        console.log(props.K.TokenId)\n    };\n\n    const buy = async () => {\n\n        \n      const client = Client.forTestnet();\n      client.setOperator(SellerAccId, SellerPrKey);\n\n      const transaction = await new TokenAssociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([props.K.TokenId])\n        .freezeWith(client);\n\n      //Sign with the private key of the account that is being associated to a token\n      const signTx = await transaction.sign(PrivateKey.fromString(privateKey));\n\n      //Submit the transaction to a Hedera network\n      const txResponse = await signTx.execute(client);\n\n      //Request the receipt of the transaction\n      const receipt = await txResponse.getReceipt(client);\n\n      //Get the transaction consensus status\n      const transactionStatus = receipt.status;\n\n      console.log(\n        \"The transaction consensus status \" + transactionStatus.toString()\n      );\n\n      const tx = await new TransferTransaction()\n        .addTokenTransfer(props.K.TokenId, SellerAccId, -(Numb))\n        .addTokenTransfer(props.K.TokenId, accountId, (Numb))\n        .freezeWith(client);\n\n      //Sign with the sender account private key\n      const sign = await tx.sign(PrivateKey.fromString(SellerPrKey));\n\n      //Sign with the client operator private key and submit to a Hedera network\n      const txResponse1 = await sign.execute(client);\n\n      //Request the receipt of the transaction\n      const receipt1 = await txResponse1.getReceipt(client);\n\n      //Obtain the transaction consensus status\n      const transactionStatus1 = receipt1.status;\n\n      console.log(\n        \"The transaction consensus status \" + transactionStatus1.toString()\n      );\n\n      const txn = await new TransferTransaction()\n        .addHbarTransfer(SellerAccId, 1)\n        .addHbarTransfer(accountId, -1)\n\n        .freezeWith(client);\n\n      //Sign with the sender account private key\n      const sign2 = await txn.sign(PrivateKey.fromString(privateKey));\n\n      //Sign with the client operator private key and submit to a Hedera network\n      const txResponse2 = await sign2.execute(client);\n\n      //Request the receipt of the transaction\n      const receipt2 = await txResponse2.getReceipt(client);\n\n      //Obtain the transaction consensus status\n      const transactionStatus2 = receipt2.status;\n\n      console.log(\n        \"The transaction consensus status \" + transactionStatus1.toString()\n      );\n    };\n\n\n\n  return (\n    <div id=\"mcc\">\n      <Card id=\"cc\">\n        <Card.Img\n          id=\"pic\"\n          variant=\"top\"\n          src={`https://siasky.net/${props.K.Skylink}`}\n        />\n        <Card.Body>\n          <Card.Title id=\"kl\">{props.K.Name}</Card.Title>\n\n          <Card.Text id=\"gg\"> Description: {props.K.Description}</Card.Text>\n          <div id=\"ot\">\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={<Tooltip id=\"button-tooltip-2\">{props.K.Creator}</Tooltip>}\n            >\n              {({ ref, ...triggerHandler }) => (\n                <Button\n                  id=\"bt1\"\n                  variant=\"light\"\n                  {...triggerHandler}\n                  className=\"d-inline-flex align-items-center\"\n                >\n                  <Image\n                    id=\"cim\"\n                    ref={ref}\n                    roundedCircle\n                    src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\"\n                    height=\"20px\"\n                    width=\"20px\"\n                  />\n                  <span className=\"ml-1\">Hover to see Creator</span>\n                </Button>\n              )}\n            </OverlayTrigger>\n            ,\n          </div>\n\n          {/* <Card.Text id=\"gg\">\n                              {props.K.Creator}\n                            </Card.Text> */}\n          <Card.Text id=\"gl\">Amount: {props.K.Amount}</Card.Text>\n          <Card.Text id=\"gl\">Price: {props.K.Price}</Card.Text>\n          <div id=\"jkl\">\n            <input\n              value={Numb}\n              onChange={numb}\n              id=\"in\"\n              type=\"number\"\n              placeholder=\"Number of Ticket\"\n            ></input>\n            <Button onClick={buy} variant=\"contained\" color=\"primary\">\n              Buy\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/NFT.js",["126","127"],"import React, { useState, useEffect } from \"react\";\nimport firebase from \"../utils/firebase\";\nimport NFTCard from \"../component/NFTCard\";\nimport \"./Event.css\";\n\nexport default function NFT() {\n  const [K, SetK] = useState([]);\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"NFT\")\n      .onSnapshot((snapshot) => {\n        SetK(snapshot.docs.map((doc) => doc.data()));\n\n        console.log(K);\n      });\n  }, []);\n\n  return (\n    <div id=\"hh\">\n      {K.map((K, index) => (\n        <>\n          <NFTCard K={K} />\n        </>\n      ))}\n    </div>\n  );\n}\n\n{\n  /* <div className=\"hh\">\n            {event.map((event, index) => \n                    <>\n                      <div className=\"cardlist\">    \n                      <Card className=\"gh\" style={{ width: '18rem' }}>\n                        <Card.Img className =\"pic\" variant=\"top\" src={event.poster} />\n                        <Card.Body>\n                            <Card.Title className=\"kl\">{event.title}</Card.Title>\n                            <Card.Text className=\"gg\">\n                            Some quick example text to build on the card title and make up the bulk of\n                            the card's content.\n                            </Card.Text>\n                            <Card.Text className=\"gl\">{event.amount}</Card.Text>\n                            <Button onClick={buy} id=\"jkl\" variant=\"contained\" color=\"primary\">Buy</Button>\n                        </Card.Body>\n                        </Card>\n                      </div>  \n                    </>\n                )}\n        </div> */\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/component/NFTCard.js",["128","129","130","131","132","133"],"import React, { useState } from \"react\";\nimport { Card, OverlayTrigger, Tooltip, Image } from \"react-bootstrap\";\nimport { Button } from \"@material-ui/core\";\nimport {\n  Client,\n  TransferTransaction,\n  TokenAssociateTransaction,\n  PrivateKey,\n} from \"@hashgraph/sdk\";\n\nconst SellerAccId = \"0.0.301906\";\nconst SellerPblKey =\n  \"0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\nconst SellerPrKey =\n  \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\n\nconst tokenId = \"0.0.303341\";\n\nconst accountId = \"0.0.303460\";\nconst publicKey =\n  \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\";\nconst privateKey =\n  \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\n\nlet a;\nexport default function NFTCard(props) {\n  \n  \n   /*  const [Numb, SetNumb] = useState(\"\"); */\n\n  /* const numb = async (e) => {\n    a = e.target.value;\n    console.log(a);\n    SetNumb(e.target.value);\n    console.log(Numb);\n    console.log(props.K.TokenId);\n  }; */\n\n  const buy = async () => {\n    const client = Client.forTestnet();\n    client.setOperator(SellerAccId, SellerPrKey);\n\n    const transaction = await new TokenAssociateTransaction()\n      .setAccountId(accountId)\n      .setTokenIds([props.K.TokenId])\n      .freezeWith(client);\n\n    //Sign with the private key of the account that is being associated to a token\n    const signTx = await transaction.sign(PrivateKey.fromString(privateKey));\n\n    //Submit the transaction to a Hedera network\n    const txResponse = await signTx.execute(client);\n\n    //Request the receipt of the transaction\n    const receipt = await txResponse.getReceipt(client);\n\n    //Get the transaction consensus status\n    const transactionStatus = receipt.status;\n\n    console.log(\n      \"The transaction consensus status \" + transactionStatus.toString()\n    );\n\n    const tx = await new TransferTransaction()\n      .addTokenTransfer(props.K.TokenId, SellerAccId, -1)\n      .addTokenTransfer(props.K.TokenId, accountId, 1)\n      .freezeWith(client);\n\n    //Sign with the sender account private key\n    const sign = await tx.sign(PrivateKey.fromString(SellerPrKey));\n\n    //Sign with the client operator private key and submit to a Hedera network\n    const txResponse1 = await sign.execute(client);\n\n    //Request the receipt of the transaction\n    const receipt1 = await txResponse1.getReceipt(client);\n\n    //Obtain the transaction consensus status\n    const transactionStatus1 = receipt1.status;\n\n    console.log(\n      \"The transaction consensus status \" + transactionStatus1.toString()\n    );\n\n    const txn = await new TransferTransaction()\n      .addHbarTransfer(SellerAccId, (props.K.Price))\n      .addHbarTransfer(accountId, -(props.K.Price))\n\n      .freezeWith(client);\n\n    //Sign with the sender account private key\n    const sign2 = await txn.sign(PrivateKey.fromString(privateKey));\n\n    //Sign with the client operator private key and submit to a Hedera network\n    const txResponse2 = await sign2.execute(client);\n\n    //Request the receipt of the transaction\n    const receipt2 = await txResponse2.getReceipt(client);\n\n    //Obtain the transaction consensus status\n    const transactionStatus2 = receipt2.status;\n\n    console.log(\n      \"The transaction consensus status \" + transactionStatus1.toString()\n    );\n  };\n\n  return (\n    <div id=\"mcc\">\n      <Card id=\"cc\">\n        <Card.Img\n          id=\"pic\"\n          variant=\"top\"\n          src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.F-IJbSlaGkoaH8X5IqBqZgHaHa%26pid%3DApi&f=1\"\n        />\n\n        <Card.Body>\n          <Card.Title id=\"kl\">{props.K.Name}</Card.Title>\n\n          <Card.Text id=\"gg\"> Description: {props.K.Description}</Card.Text>\n          <div id=\"ot\">\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={\n                <Tooltip id=\"button-tooltip-2\">{props.K.Creator}</Tooltip>\n              }\n            >\n              {({ ref, ...triggerHandler }) => (\n                <Button\n                  id=\"bt1\"\n                  variant=\"light\"\n                  {...triggerHandler}\n                  className=\"d-inline-flex align-items-center\"\n                >\n                  <Image\n                    id=\"cim\"\n                    ref={ref}\n                    roundedCircle\n                    src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\"\n                    height=\"20px\"\n                    width=\"20px\"\n                  />\n                  <span className=\"ml-1\">Hover to see Creator</span>\n                </Button>\n              )}\n            </OverlayTrigger>\n            ,\n          </div>\n\n          {/* <Card.Text id=\"gg\">\n                              {props.K.Creator}\n                            </Card.Text> */}\n          <Card.Text id=\"gl\">Amount: {props.K.Amount}</Card.Text>\n          <Card.Text id=\"gl\">Price: {props.K.Price}</Card.Text>\n          <div id=\"jkl\">\n            \n            <Button onClick={buy} variant=\"contained\" color=\"primary\">\n              Buy\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n",{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":1,"column":24,"nodeType":"140","messageId":"141","endLine":1,"endColumn":34},{"ruleId":"138","severity":1,"message":"142","line":12,"column":8,"nodeType":"140","messageId":"141","endLine":12,"endColumn":18},{"ruleId":"138","severity":1,"message":"143","line":1,"column":18,"nodeType":"140","messageId":"141","endLine":1,"endColumn":26},{"ruleId":"138","severity":1,"message":"144","line":3,"column":10,"nodeType":"140","messageId":"141","endLine":3,"endColumn":20},{"ruleId":"138","severity":1,"message":"145","line":3,"column":23,"nodeType":"140","messageId":"141","endLine":3,"endColumn":31},{"ruleId":"138","severity":1,"message":"146","line":4,"column":65,"nodeType":"140","messageId":"141","endLine":4,"endColumn":74},{"ruleId":"147","severity":1,"message":"148","line":87,"column":51,"nodeType":"149","messageId":"150","endLine":87,"endColumn":52},{"ruleId":"147","severity":1,"message":"148","line":87,"column":89,"nodeType":"149","messageId":"150","endLine":87,"endColumn":90},{"ruleId":"151","severity":1,"message":"152","line":27,"column":6,"nodeType":"153","endLine":27,"endColumn":8,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":43,"column":1,"nodeType":"157","messageId":"158","endLine":62,"endColumn":19},{"ruleId":"138","severity":1,"message":"159","line":2,"column":8,"nodeType":"140","messageId":"141","endLine":2,"endColumn":18},{"ruleId":"138","severity":1,"message":"160","line":4,"column":8,"nodeType":"140","messageId":"141","endLine":4,"endColumn":14},{"ruleId":"138","severity":1,"message":"161","line":19,"column":5,"nodeType":"140","messageId":"141","endLine":19,"endColumn":6},{"ruleId":"138","severity":1,"message":"162","line":20,"column":5,"nodeType":"140","messageId":"141","endLine":20,"endColumn":6},{"ruleId":"138","severity":1,"message":"163","line":24,"column":13,"nodeType":"140","messageId":"141","endLine":24,"endColumn":17},{"ruleId":"138","severity":1,"message":"164","line":25,"column":10,"nodeType":"140","messageId":"141","endLine":25,"endColumn":11},{"ruleId":"138","severity":1,"message":"165","line":25,"column":13,"nodeType":"140","messageId":"141","endLine":25,"endColumn":17},{"ruleId":"151","severity":1,"message":"166","line":30,"column":18,"nodeType":"167","endLine":99,"endColumn":4},{"ruleId":"138","severity":1,"message":"144","line":3,"column":20,"nodeType":"140","messageId":"141","endLine":3,"endColumn":30},{"ruleId":"138","severity":1,"message":"146","line":7,"column":3,"nodeType":"140","messageId":"141","endLine":7,"endColumn":12},{"ruleId":"138","severity":1,"message":"168","line":24,"column":11,"nodeType":"140","messageId":"141","endLine":24,"endColumn":20},{"ruleId":"138","severity":1,"message":"169","line":25,"column":11,"nodeType":"140","messageId":"141","endLine":25,"endColumn":20},{"ruleId":"138","severity":1,"message":"170","line":26,"column":11,"nodeType":"140","messageId":"141","endLine":26,"endColumn":21},{"ruleId":"147","severity":1,"message":"148","line":288,"column":73,"nodeType":"149","messageId":"150","endLine":288,"endColumn":74},{"ruleId":"138","severity":1,"message":"171","line":2,"column":16,"nodeType":"140","messageId":"141","endLine":2,"endColumn":20},{"ruleId":"138","severity":1,"message":"172","line":5,"column":3,"nodeType":"140","messageId":"141","endLine":5,"endColumn":9},{"ruleId":"138","severity":1,"message":"173","line":6,"column":3,"nodeType":"140","messageId":"141","endLine":6,"endColumn":22},{"ruleId":"138","severity":1,"message":"174","line":7,"column":3,"nodeType":"140","messageId":"141","endLine":7,"endColumn":28},{"ruleId":"138","severity":1,"message":"144","line":8,"column":3,"nodeType":"140","messageId":"141","endLine":8,"endColumn":13},{"ruleId":"138","severity":1,"message":"175","line":13,"column":7,"nodeType":"140","messageId":"141","endLine":13,"endColumn":18},{"ruleId":"138","severity":1,"message":"176","line":14,"column":7,"nodeType":"140","messageId":"141","endLine":14,"endColumn":19},{"ruleId":"138","severity":1,"message":"177","line":16,"column":7,"nodeType":"140","messageId":"141","endLine":16,"endColumn":18},{"ruleId":"138","severity":1,"message":"178","line":5,"column":16,"nodeType":"140","messageId":"141","endLine":5,"endColumn":20},{"ruleId":"138","severity":1,"message":"179","line":7,"column":11,"nodeType":"140","messageId":"141","endLine":7,"endColumn":12},{"ruleId":"138","severity":1,"message":"176","line":13,"column":11,"nodeType":"140","messageId":"141","endLine":13,"endColumn":23},{"ruleId":"138","severity":1,"message":"180","line":18,"column":11,"nodeType":"140","messageId":"141","endLine":18,"endColumn":18},{"ruleId":"138","severity":1,"message":"169","line":21,"column":11,"nodeType":"140","messageId":"141","endLine":21,"endColumn":20},{"ruleId":"138","severity":1,"message":"181","line":106,"column":13,"nodeType":"140","messageId":"141","endLine":106,"endColumn":31},{"ruleId":"151","severity":1,"message":"152","line":18,"column":6,"nodeType":"153","endLine":18,"endColumn":8,"suggestions":"182"},{"ruleId":"155","severity":1,"message":"156","line":31,"column":1,"nodeType":"157","messageId":"158","endLine":52,"endColumn":2},{"ruleId":"138","severity":1,"message":"143","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":25},{"ruleId":"138","severity":1,"message":"176","line":12,"column":7,"nodeType":"140","messageId":"141","endLine":12,"endColumn":19},{"ruleId":"138","severity":1,"message":"180","line":17,"column":7,"nodeType":"140","messageId":"141","endLine":17,"endColumn":14},{"ruleId":"138","severity":1,"message":"169","line":20,"column":7,"nodeType":"140","messageId":"141","endLine":20,"endColumn":16},{"ruleId":"138","severity":1,"message":"183","line":25,"column":5,"nodeType":"140","messageId":"141","endLine":25,"endColumn":6},{"ruleId":"138","severity":1,"message":"181","line":101,"column":11,"nodeType":"140","messageId":"141","endLine":101,"endColumn":29},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'TicketList' is defined but never used.","'useState' is defined but never used.","'PrivateKey' is defined but never used.","'Mnemonic' is defined but never used.","'PublicKey' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'K'. Either include it or remove the dependency array.","ArrayExpression",["186"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'TicketCard' is defined but never used.","'useKey' is defined but never used.","'t' is defined but never used.","'v' is defined but never used.","'SetT' is assigned a value but never used.","'V' is assigned a value but never used.","'SetV' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'accountId' is assigned a value but never used.","'publicKey' is assigned a value but never used.","'privateKey' is assigned a value but never used.","'Form' is defined but never used.","'Client' is defined but never used.","'TransferTransaction' is defined but never used.","'TokenAssociateTransaction' is defined but never used.","'SellerAccId' is assigned a value but never used.","'SellerPblKey' is assigned a value but never used.","'SellerPrKey' is assigned a value but never used.","'SetC' is assigned a value but never used.","'a' is assigned a value but never used.","'tokenId' is assigned a value but never used.","'transactionStatus2' is assigned a value but never used.",["187"],"'a' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"188","fix":"190"},"Update the dependencies array to be: [K]",{"range":"191","text":"192"},{"range":"193","text":"192"},[456,458],"[K]",[433,435]]
>>>>>>> b0354a100316c7ada1dc3c2d1b50f5cced2e65cb

[{"D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\index.js":"1","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\reportWebVitals.js":"2","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\App.js":"3","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\Header.js":"4","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\Login.js":"5","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\PrivateKey.js":"6","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\Event.js":"7","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\Mnemonic.js":"8","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\TicketList.js":"9","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\CreateToken.js":"10","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\utils\\firebase.js":"11"},{"size":517,"mtime":1612697383944,"results":"12","hashOfConfig":"13"},{"size":375,"mtime":1612697383944,"results":"14","hashOfConfig":"13"},{"size":1483,"mtime":1612697383942,"results":"15","hashOfConfig":"13"},{"size":2253,"mtime":1612697383943,"results":"16","hashOfConfig":"13"},{"size":3372,"mtime":1612697383947,"results":"17","hashOfConfig":"13"},{"size":1469,"mtime":1612697383949,"results":"18","hashOfConfig":"13"},{"size":7455,"mtime":1612711699890,"results":"19","hashOfConfig":"13"},{"size":1282,"mtime":1612697383948,"results":"20","hashOfConfig":"13"},{"size":3116,"mtime":1612724843841,"results":"21","hashOfConfig":"13"},{"size":9738,"mtime":1612713269338,"results":"22","hashOfConfig":"13"},{"size":503,"mtime":1612697383951,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"4y5tn1",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\index.js",[],["52","53"],"D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\reportWebVitals.js",[],"D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\App.js",[],"D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\Header.js",[],"D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\Login.js",["54","55","56","57"],"import React from 'react';\r\nimport {Box ,Button} from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { PrivateKey , Client , Hbar , AccountCreateTransaction, PublicKey } from '@hashgraph/sdk';\r\nimport firebase from '../utils/firebase';\r\n\r\nimport './Login.css'\r\n\r\n\r\nexport default function Login() {\r\n\r\n\r\n    const myAccountId = ''\r\n    const myPrivateKey = ''\r\n\r\n    const al = async () => {\r\n\r\n        const client = Client.forTestnet();\r\n        client.setOperator(myAccountId, myPrivateKey);\r\n\r\n\r\n        const privateKey = await PrivateKey.generate();\r\n        const publicKey = privateKey.publicKey;\r\n        console.log(\"private = 0x\" + privateKey);\r\n        /* console.log(privateKey.toString()); */\r\n        console.log(\"public = 0x\" + publicKey);\r\n\r\n        const transaction = new AccountCreateTransaction()\r\n                            .setKey(privateKey.publicKey)\r\n                            .setInitialBalance(new Hbar(1000))\r\n                            \r\n\r\n        //Sign the transaction with the client operator private key and submit to a Hedera network\r\n        const txResponse = await transaction.execute(client);\r\n\r\n        //Request the receipt of the transaction\r\n        const receipt = await txResponse.getReceipt(client);\r\n\r\n        //Get the account ID\r\n        const newAccountId = receipt.accountId;\r\n\r\n        /* client.setOperator(newAccountId, privateKey); */\r\n\r\n        console.log(\"The new account ID is \" +newAccountId);\r\n\r\n\r\n\r\n\r\n        /* const TicketsRef = firebase.firestore().collection('User');\r\n\r\n\r\n        \r\n        const Tick = {\r\n                Name:Tkn.Name,\r\n                Symbol:Tkn.Sym,\r\n                Amount:Tkn.Amt,\r\n                Description:Tkn.Desc,\r\n                TokenId:(tokenId.toString()),\r\n                Creator:PblKey,\r\n        }\r\n\r\n\r\n        TicketsRef.push(Tick); */\r\n\r\n        const AccRef = firebase.database().ref(\"Acc\");\r\n        const PbKey = publicKey.toString();\r\n        const Acc = {\r\n                PbKey:(publicKey.toString()),\r\n                PKey:(privateKey.toString()),\r\n                AccId:(newAccountId.toString()),\r\n                AccTickets:[],\r\n                CreatedTickets:[],\r\n            \r\n        }\r\n        AccRef.push(Acc);\r\n        alert(\"PrivateKey = 0x\" + privateKey +'  '+ \"PublicKey = 0x\" + publicKey + '  ' + 'Account Id = ' + newAccountId)\r\n    }\r\n    return (\r\n        <div className=\"screen\">\r\n        <fieldset className=\"df\">\r\n            <Box className =\"box\" component=\"div\" m={1}>\r\n{/*         <Button className =\"f\" variant=\"info\" >Login with Private Key</Button>{' '}\r\n            <Button className =\"f\" variant=\"success\"  >Login with Mnemonic</Button>{' '}\r\n            <Button className =\"f\" variant=\"primary\"  >Make an Account</Button>{' '}  */}  \r\n\r\n            <Link id=\"pl\" to=\"/privatekey\">\r\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Private Key</Button>\r\n            </Link>\r\n\r\n            <Link id=\"pl\" to=\"/mnemonic\">\r\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Mnemonic</Button>\r\n            </Link>    \r\n            \r\n            \r\n            <Button onClick={al} id=\"jl\" variant=\"contained\" color=\"secondary\">Make an Account</Button>\r\n            \r\n            </Box>\r\n\r\n        </fieldset>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\PrivateKey.js",["58"],"import React , { useState } from 'react'\r\nimport {Box , Button } from '@material-ui/core'\r\nimport { PrivateKey , Mnemonic} from '@hashgraph/sdk'\r\n\r\n\r\nimport './PrivateKey.css'\r\n\r\n\r\nexport default function PK() {\r\n\r\n    const [PrKey , SetPrKey ] = useState('');\r\n    \r\n\r\n    const inputEvent = (e) => {\r\n        /* console.log(e.target.value); */\r\n        SetPrKey(e.target.value)\r\n    }\r\n\r\n    /* media milk rally thought afford gas monitor close box slow employ marine quality jacket orbit trigger cancel try above weird save prepare snow slim */\r\n    \r\n    \r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const privateKey = PrivateKey.fromString(PrKey); \r\n        console.log(privateKey.toString());   \r\n        const publicKey = privateKey.publicKey;\r\n        console.log(publicKey.toString());\r\n        SetPrKey('')\r\n        /* const mnemonic = await Mnemonic.generate(); */\r\n        /* var i;\r\n        for(i=0;i<24;i++){\r\n            console.log(mnemonic.words[i])\r\n        } */\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"screen\">\r\n            \r\n                <Box className =\"box\" component=\"div\" m={1}>\r\n                <input type=\"text\" className=\"pkinput\" onChange={inputEvent} value={PrKey}/>\r\n                <Button onClick={onSubmit} type=\"submit\" id =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login with Private Key</Button>\r\n                </Box>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\Event.js",["59","60","61","62","63","64"],"import React, { useState , useEffect } from 'react'\r\nimport { Card,OverlayTrigger,Tooltip,Image} from 'react-bootstrap'\r\nimport { Button } from '@material-ui/core';\r\nimport { Client , TransferTransaction , TokenAssociateTransaction , PrivateKey} from '@hashgraph/sdk';\r\nimport firebase from '../utils/firebase';\r\n\r\n\r\n\r\nimport './Event.css'\r\n\r\n\r\nconst event = [\r\n  {\r\n    title: 'La La Land',\r\n    poster: 'https://i.imgur.com/po7UezG.jpg',\r\n    genre: 'Drama/Romance',\r\n    amount: '5',\r\n    \r\n  },\r\n  \r\n  \r\n]\r\n\r\n    const SellerAccId = '0.0.301906';\r\n    const SellerPblKey = '0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a';\r\n    const SellerPrKey = '0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4';\r\n\r\n    const tokenId = '0.0.303341';\r\n\r\n    const accountId = '0.0.303460'\r\n    const publicKey = \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\"\r\n    const privateKey = \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\"\r\n\r\n\r\n\r\n   \r\n\r\nexport default function Event() {\r\n\r\n\r\n  const [K , SetK] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    firebase.firestore().collection('Tickets').onSnapshot(snapshot => {\r\n\r\n      SetK(snapshot.docs.map(doc => doc.data()));\r\n      console.log(K);\r\n\r\n    })\r\n    \r\n  }, [])\r\n\r\n  const buy = async () => {\r\n\r\n    const client = Client.forTestnet();\r\n    client.setOperator(SellerAccId, SellerPrKey);\r\n\r\n\r\n\r\n    const transaction = await new TokenAssociateTransaction()\r\n        .setAccountId(accountId)\r\n        .setTokenIds([tokenId])\r\n        .freezeWith(client);\r\n\r\n    //Sign with the private key of the account that is being associated to a token \r\n    const signTx = await transaction.sign(PrivateKey.fromString(privateKey));\r\n\r\n    //Submit the transaction to a Hedera network    \r\n    const txResponse = await signTx.execute(client);\r\n\r\n    //Request the receipt of the transaction\r\n    const receipt = await txResponse.getReceipt(client);\r\n        \r\n    //Get the transaction consensus status\r\n    const transactionStatus = receipt.status;\r\n\r\n    console.log(\"The transaction consensus status \" +transactionStatus.toString());\r\n      \r\n    const tx = await new TransferTransaction()\r\n     .addTokenTransfer(tokenId, SellerAccId, -10)\r\n     .addTokenTransfer(tokenId, accountId, 10)\r\n     .freezeWith(client);\r\n\r\n    //Sign with the sender account private key\r\n    const sign = await tx.sign(PrivateKey.fromString(SellerPrKey));\r\n        \r\n    //Sign with the client operator private key and submit to a Hedera network\r\n    const txResponse1 = await sign.execute(client);\r\n        \r\n    //Request the receipt of the transaction\r\n    const receipt1 = await txResponse1.getReceipt(client);\r\n        \r\n    //Obtain the transaction consensus status\r\n    const transactionStatus1 = receipt1.status;\r\n\r\n    console.log(\"The transaction consensus status \" +transactionStatus1.toString());\r\n\r\n\r\n    const txn = await new TransferTransaction()\r\n     .addHbarTransfer(SellerAccId, 10)\r\n     .addHbarTransfer(accountId, -10)\r\n     \r\n     .freezeWith(client);\r\n\r\n    //Sign with the sender account private key\r\n    const sign2 = await txn.sign(PrivateKey.fromString(privateKey));\r\n        \r\n    //Sign with the client operator private key and submit to a Hedera network\r\n    const txResponse2 = await sign2.execute(client);\r\n        \r\n    //Request the receipt of the transaction\r\n    const receipt2 = await txResponse2.getReceipt(client);\r\n        \r\n    //Obtain the transaction consensus status\r\n    const transactionStatus2 = receipt2.status;\r\n\r\n    console.log(\"The transaction consensus status \" +transactionStatus1.toString());\r\n\r\n \r\n  \r\n  }\r\n    return (\r\n        <div id=\"hh\">\r\n            {K.map((K, index) => \r\n                    <>\r\n                      <div id=\"mcc\">    \r\n                      <Card id=\"cc\">\r\n                        <Card.Img id =\"pic\" variant=\"top\" src=\"https://www.svgrepo.com/show/9708/rocket-ship.svg\"  />\r\n                        <Card.Body>\r\n                            <Card.Title id=\"kl\">{K.Name}</Card.Title>\r\n\r\n                            <Card.Text id=\"gg\"> Description: {K.Desc}</Card.Text>\r\n                             <div id=\"ot\">\r\n                             <OverlayTrigger\r\n                                  placement=\"bottom\"\r\n                                  overlay={<Tooltip id=\"button-tooltip-2\">{K.Creator}</Tooltip>}\r\n                                >\r\n                                  {({ ref, ...triggerHandler }) => (\r\n                                    <Button id=\"bt1\"\r\n                                      variant=\"light\"  \r\n                                      {...triggerHandler}\r\n                                      className=\"d-inline-flex align-items-center\"\r\n                                    >\r\n                                      <Image\r\n                                        id=\"cim\"\r\n                                        ref={ref}\r\n                                        roundedCircle\r\n                                        src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\" height=\"20px\" width=\"20px\"\r\n                                      />\r\n                                      <span className=\"ml-1\">Hover to see Creator</span>\r\n                                    </Button>\r\n                                  )}\r\n                                </OverlayTrigger>, \r\n                             </div>\r\n                      \r\n                            {/* <Card.Text id=\"gg\">\r\n                              {K.Creator}\r\n                            </Card.Text> */}\r\n                            <Card.Text id=\"gl\">Amount: {K.Amount}</Card.Text>\r\n                            <Card.Text id=\"gl\">Price: {K.Price}</Card.Text>\r\n                            <div  id=\"jkl\">\r\n                             <input  id=\"in\" type=\"number\" placeholder=\"Number of Ticket\"></input>\r\n                             <Button onClick={buy} variant=\"contained\" color=\"primary\">Buy</Button>\r\n                            </div>\r\n                            \r\n                        </Card.Body>\r\n                        </Card>\r\n                      </div>  \r\n                    </>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n{/* <div className=\"hh\">\r\n            {event.map((event, index) => \r\n                    <>\r\n                      <div className=\"cardlist\">    \r\n                      <Card className=\"gh\" style={{ width: '18rem' }}>\r\n                        <Card.Img className =\"pic\" variant=\"top\" src={event.poster} />\r\n                        <Card.Body>\r\n                            <Card.Title className=\"kl\">{event.title}</Card.Title>\r\n                            <Card.Text className=\"gg\">\r\n                            Some quick example text to build on the card title and make up the bulk of\r\n                            the card's content.\r\n                            </Card.Text>\r\n                            <Card.Text className=\"gl\">{event.amount}</Card.Text>\r\n                            <Button onClick={buy} id=\"jkl\" variant=\"contained\" color=\"primary\">Buy</Button>\r\n                        </Card.Body>\r\n                        </Card>\r\n                      </div>  \r\n                    </>\r\n                )}\r\n        </div> */}","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\Mnemonic.js",["65"],"import React , { useState } from 'react'\r\nimport {Box , Button } from '@material-ui/core'\r\nimport { Mnemonic, PrivateKey } from '@hashgraph/sdk'\r\n\r\n\r\nimport './PrivateKey.css'\r\n\r\n\r\n\r\nexport default function Mne() {\r\n\r\n    const [Mn , SetMn ] = useState('');\r\n    \r\n\r\n    const inputEvent = (e) => {\r\n        console.log(e.target.value);\r\n        SetMn(e.target.value)\r\n    }\r\n\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const mnemonic = await Mnemonic.fromString(Mn);\r\n        console.log(mnemonic)\r\n        /* const privateKey = PrivateKey.fromMnemonic(Mn); */\r\n        const privateKey = await mnemonic.toPrivateKey();\r\n        console.log(privateKey);\r\n        const publicKey = privateKey.publicKey;\r\n        console.log(publicKey.toString());\r\n        SetMn('');\r\n       \r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"screen\">\r\n            <form >\r\n                <Box className =\"box\" component=\"div\" m={1}>\r\n                <input onChange={inputEvent} type=\"text\" className=\"pkinput\" value={Mn}/>\r\n                <Button onClick={onSubmit} type=\"submit\" className =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login with Mnemonic Phrase</Button>\r\n                </Box>\r\n            </form>\r\n        </div>\r\n        \r\n    )\r\n}\r\n","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\TicketList.js",["66"],"D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\screens\\CreateToken.js",["67","68","69","70","71"],"import React, { useState } from 'react'\r\nimport { Form , Col , Row } from 'react-bootstrap'\r\nimport { Button } from '@material-ui/core'\r\nimport { Client , Hbar , TokenCreateTransaction , PublicKey  } from '@hashgraph/sdk';\r\nimport firebase from '../utils/firebase';\r\n\r\n\r\nimport './CreateToken.css'\r\n\r\nexport default function CreateToken() {\r\n\r\n    const AccId = '0.0.301906'\r\n    const PblKey = '302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a';\r\n    const PrKey = '302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4'\r\n\r\n    \r\n    const accountId = '0.0.303460'\r\n    const publicKey = \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\"\r\n    const privateKey = \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\"\r\n\r\n\r\n    const [Tkn , SetTkn] = useState({     \r\n        Name:\"\",\r\n        Sym:\"\",\r\n        Desc:\"\",\r\n        Amt:\"\",\r\n        Price:\"\",\r\n        PbAdd:\"\",\r\n        Skylink:\"\",\r\n        TknId:\"\",  \r\n    });\r\n\r\n\r\n    const inputEvent = (e) => {\r\n        //  console.log(e.target.value); \r\n        //  SetTkn(e.target.value) \r\n\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n\r\n        /* console.log(name) */\r\n        SetTkn((pv) => {\r\n            if( name === 'Name'){\r\n                return{\r\n                    Name:value,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                }\r\n            }\r\n            else if( name === 'Sym'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:value,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                }\r\n            }\r\n            else if( name === 'Desc'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:value,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                }\r\n            }\r\n            else if( name === 'Amt'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:value,\r\n                    Price:pv.Price,\r\n                }\r\n            }\r\n            else if( name === 'Price'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:value,\r\n                }\r\n            }\r\n            \r\n        })\r\n\r\n        console.log(Tkn.Price)\r\n        console.log(Tkn.Amt)\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        console.log(Tkn)\r\n\r\n        const client = Client.forTestnet();\r\n        client.setOperator(AccId, PrKey);\r\n        const transaction = await new TokenCreateTransaction()\r\n                        .setTokenName(Tkn.Name)\r\n                        .setTokenSymbol(Tkn.Sym)\r\n                        .setTreasuryAccountId(AccId)\r\n                        .setInitialSupply(Tkn.Amt)\r\n                        .execute(client);\r\n       \r\n        console.log(transaction)\r\n\r\n        //Sign the transaction with the token adminKey and the token treasury account private key\r\n        /* const signTx = await ( await transaction.sign(PblKey)).sign(PrKey);\r\n\r\n        //Sign the transaction with the client operator private key and submit to a Hedera network\r\n        const txResponse = await signTx.execute(client);  */\r\n            \r\n        //Get the receipt of the transaction\r\n        const receipt = await transaction.getReceipt(client);\r\n\r\n        //Get the token ID from the receipt\r\n        const tokenId = receipt.tokenId;\r\n\r\n\r\n\r\n    \r\n\r\n        console.log(tokenId)\r\n        console.log(\"The new token ID is \" + tokenId);\r\n        SetTkn({\r\n            TknId:(tokenId.toString())\r\n        })\r\n\r\n\r\n        firebase.firestore().collection('Tickets').doc().set({\r\n            \r\n            Name:Tkn.Name,\r\n            Symbol:Tkn.Sym,\r\n            Amount:Tkn.Amt,\r\n            Description:Tkn.Desc,\r\n            Price:Tkn.Price,\r\n            TokenId:(tokenId.toString()),\r\n            Creator:PblKey,\r\n            \r\n        \r\n        })\r\n        .then(() => {\r\n            console.log(\"Document successfully written!\");\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n\r\n        /* const TicketsRef = firebase.database().ref(\"Tick\");\r\n\r\n\r\n        \r\n        const Tick = {\r\n                Name:Tkn.Name,\r\n                Symbol:Tkn.Sym,\r\n                Amount:Tkn.Amt,\r\n                Description:Tkn.Desc,\r\n                TokenId:(tokenId.toString()),\r\n                Creator:PblKey,\r\n        }\r\n\r\n\r\n        TicketsRef.push(Tick); */\r\n        \r\n        SetTkn({\r\n            Name:\"\",\r\n            Sym:\"\",\r\n            Desc:\"\",\r\n            Amt:\"\",\r\n            Price:\"\"\r\n        });\r\n       \r\n    }\r\n\r\n    return (\r\n        <div className=\"bb\">\r\n            <div className=\"kl\">\r\n            <fieldset>\r\n                <Form>\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                    Name of the Event\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Name\" onChange={inputEvent} type=\"text\" value={Tkn.Name} placeholder=\"Name\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                {/* <Form.Group as={Row} controlId=\"formHorizontalPassword\">\r\n                    <Form.Label column sm={2}>\r\n                    Password\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control type=\"password\" placeholder=\"Password\" />\r\n                    </Col>\r\n                </Form.Group> */}\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                    <Form.Label column sm={2}>\r\n                    Symbol\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Sym\" onChange={inputEvent} type=\"text\" value={Tkn.Sym} placeholder=\"Symbol\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                    <Form.Label column sm={2}>\r\n                    Description\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Desc\" onChange={inputEvent} type=\"text\" value={Tkn.Desc} placeholder=\"Description\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                    <Form.Label column sm={2}>\r\n                    Amount\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Amt\" onChange={inputEvent} type=\"text\" value={Tkn.Amt} placeholder=\"Amount\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                    <Form.Label column sm={2}>\r\n                    Price\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Price\" onChange={inputEvent} type=\"text\" value={Tkn.Price} placeholder=\"Price\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                {/* <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                    <Form.Label column sm={2}>\r\n                    Public Address\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control onChange={inputEvent} type=\"text\" value={Tkn.PbAdd} placeholder=\"Public Address\" />\r\n                    </Col>\r\n                </Form.Group> */}\r\n\r\n                \r\n\r\n\r\n                <Form.Group>\r\n                    <Form.File id=\"FormControlFile\" label=\"Insert Image pls\" />\r\n                </Form.Group>\r\n                <>\r\n                    {/* <Form.Group as={Row}>\r\n                    <Form.Label className=\"gf\" as=\"legend\" column sm={2}>\r\n                        Type of Token\r\n                    </Form.Label>\r\n                    <Col id=\"jh\" sm={10}>\r\n                        <Form.Check\r\n                        type=\"radio\"\r\n                        label=\"Normal Token\"\r\n                        name=\"formHorizontalRadios\"\r\n                        id=\"formHorizontalRadios1\"\r\n                        />\r\n                        <Form.Check\r\n                        type=\"radio\"\r\n                        label=\"NFT \"\r\n                        name=\"formHorizontalRadios\"\r\n                        id=\"formHorizontalRadios2\"\r\n                        />\r\n                    </Col>\r\n                    </Form.Group> */}\r\n                </>\r\n                {/* <Form.Group as={Row} controlId=\"formHorizontalCheck\">\r\n                    <Col sm={{ span: 10, offset: 2 }}>\r\n                    <Form.Check label=\"Remember me\" />\r\n                    </Col>\r\n                </Form.Group> */}\r\n\r\n                <Form.Group as={Row}>\r\n                    <Col sm={{ span: 10, offset: 2 }}>\r\n                    <Button onClick={onSubmit} variant=\"contained\" color=\"primary\" type=\"submit\">Create</Button>\r\n                    </Col>\r\n                </Form.Group>\r\n                </Form>\r\n\r\n            </fieldset>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","D:\\Web development\\Khazana hackathon\\Khazana\\tickets\\src\\utils\\firebase.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":4,"column":65,"nodeType":"78","messageId":"79","endLine":4,"endColumn":74},{"ruleId":"76","severity":1,"message":"80","line":66,"column":15,"nodeType":"78","messageId":"79","endLine":66,"endColumn":20},{"ruleId":"81","severity":1,"message":"82","line":76,"column":51,"nodeType":"83","messageId":"84","endLine":76,"endColumn":52},{"ruleId":"81","severity":1,"message":"82","line":76,"column":89,"nodeType":"83","messageId":"84","endLine":76,"endColumn":90},{"ruleId":"76","severity":1,"message":"85","line":3,"column":23,"nodeType":"78","messageId":"79","endLine":3,"endColumn":31},{"ruleId":"76","severity":1,"message":"86","line":12,"column":7,"nodeType":"78","messageId":"79","endLine":12,"endColumn":12},{"ruleId":"76","severity":1,"message":"87","line":25,"column":11,"nodeType":"78","messageId":"79","endLine":25,"endColumn":23},{"ruleId":"76","severity":1,"message":"88","line":31,"column":11,"nodeType":"78","messageId":"79","endLine":31,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":52,"column":6,"nodeType":"91","endLine":52,"endColumn":8,"suggestions":"92"},{"ruleId":"76","severity":1,"message":"93","line":116,"column":11,"nodeType":"78","messageId":"79","endLine":116,"endColumn":29},{"ruleId":"94","severity":1,"message":"95","line":179,"column":1,"nodeType":"96","messageId":"97","endLine":198,"endColumn":19},{"ruleId":"76","severity":1,"message":"98","line":3,"column":20,"nodeType":"78","messageId":"79","endLine":3,"endColumn":30},{"ruleId":"76","severity":1,"message":"99","line":2,"column":15,"nodeType":"78","messageId":"79","endLine":2,"endColumn":19},{"ruleId":"76","severity":1,"message":"100","line":4,"column":19,"nodeType":"78","messageId":"79","endLine":4,"endColumn":23},{"ruleId":"76","severity":1,"message":"77","line":4,"column":51,"nodeType":"78","messageId":"79","endLine":4,"endColumn":60},{"ruleId":"76","severity":1,"message":"101","line":17,"column":11,"nodeType":"78","messageId":"79","endLine":17,"endColumn":20},{"ruleId":"76","severity":1,"message":"88","line":18,"column":11,"nodeType":"78","messageId":"79","endLine":18,"endColumn":20},{"ruleId":"76","severity":1,"message":"102","line":19,"column":11,"nodeType":"78","messageId":"79","endLine":19,"endColumn":21},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'PublicKey' is defined but never used.","Identifier","unusedVar","'PbKey' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Mnemonic' is defined but never used.","'event' is assigned a value but never used.","'SellerPblKey' is assigned a value but never used.","'publicKey' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'K'. Either include it or remove the dependency array.","ArrayExpression",["105"],"'transactionStatus2' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'PrivateKey' is defined but never used.","'Form' is defined but never used.","'Hbar' is defined but never used.","'accountId' is assigned a value but never used.","'privateKey' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [K]",{"range":"108","text":"109"},[1394,1396],"[K]"]
[{"/home/juuzou/Documents/hello/Khazana/tickets/src/index.js":"1","/home/juuzou/Documents/hello/Khazana/tickets/src/reportWebVitals.js":"2","/home/juuzou/Documents/hello/Khazana/tickets/src/App.js":"3","/home/juuzou/Documents/hello/Khazana/tickets/src/Header.js":"4","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Login.js":"5","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/PrivateKey.js":"6","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Mnemonic.js":"7","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Event.js":"8","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/TicketList.js":"9","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/CreateToken.js":"10","/home/juuzou/Documents/hello/Khazana/tickets/src/utils/firebase.js":"11"},{"size":500,"mtime":1612161786297,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1612077971595,"results":"14","hashOfConfig":"13"},{"size":1418,"mtime":1612540086014,"results":"15","hashOfConfig":"13"},{"size":2187,"mtime":1612507285077,"results":"16","hashOfConfig":"13"},{"size":3269,"mtime":1612600711363,"results":"17","hashOfConfig":"13"},{"size":1421,"mtime":1612292991012,"results":"18","hashOfConfig":"13"},{"size":1236,"mtime":1612361623423,"results":"19","hashOfConfig":"13"},{"size":5583,"mtime":1612626452979,"results":"20","hashOfConfig":"13"},{"size":2883,"mtime":1612512386977,"results":"21","hashOfConfig":"13"},{"size":9454,"mtime":1612698316054,"results":"22","hashOfConfig":"13"},{"size":486,"mtime":1612594872659,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1ncuevm",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/juuzou/Documents/hello/Khazana/tickets/src/index.js",[],["51","52"],"/home/juuzou/Documents/hello/Khazana/tickets/src/reportWebVitals.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/App.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/Header.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Login.js",["53","54","55","56"],"import React from 'react';\nimport {Box ,Button} from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { PrivateKey , Client , Hbar , AccountCreateTransaction, PublicKey } from '@hashgraph/sdk';\nimport firebase from '../utils/firebase';\n\nimport './Login.css'\n\n\nexport default function Login() {\n\n\n    const myAccountId = ''\n    const myPrivateKey = ''\n\n    const al = async () => {\n\n        const client = Client.forTestnet();\n        client.setOperator(myAccountId, myPrivateKey);\n\n\n        const privateKey = await PrivateKey.generate();\n        const publicKey = privateKey.publicKey;\n        console.log(\"private = 0x\" + privateKey);\n        /* console.log(privateKey.toString()); */\n        console.log(\"public = 0x\" + publicKey);\n\n        const transaction = new AccountCreateTransaction()\n                            .setKey(privateKey.publicKey)\n                            .setInitialBalance(new Hbar(1000))\n                            \n\n        //Sign the transaction with the client operator private key and submit to a Hedera network\n        const txResponse = await transaction.execute(client);\n\n        //Request the receipt of the transaction\n        const receipt = await txResponse.getReceipt(client);\n\n        //Get the account ID\n        const newAccountId = receipt.accountId;\n\n        /* client.setOperator(newAccountId, privateKey); */\n\n        console.log(\"The new account ID is \" +newAccountId);\n\n\n\n\n        /* const TicketsRef = firebase.firestore().collection('User');\n\n\n        \n        const Tick = {\n                Name:Tkn.Name,\n                Symbol:Tkn.Sym,\n                Amount:Tkn.Amt,\n                Description:Tkn.Desc,\n                TokenId:(tokenId.toString()),\n                Creator:PblKey,\n        }\n\n\n        TicketsRef.push(Tick); */\n\n        const AccRef = firebase.database().ref(\"Acc\");\n        const PbKey = publicKey.toString();\n        const Acc = {\n                PbKey:(publicKey.toString()),\n                PKey:(privateKey.toString()),\n                AccId:(newAccountId.toString()),\n                AccTickets:[],\n                CreatedTickets:[],\n            \n        }\n        AccRef.push(Acc);\n        alert(\"PrivateKey = 0x\" + privateKey +'  '+ \"PublicKey = 0x\" + publicKey + '  ' + 'Account Id = ' + newAccountId)\n    }\n    return (\n        <div className=\"screen\">\n        <fieldset className=\"df\">\n            <Box className =\"box\" component=\"div\" m={1}>\n{/*         <Button className =\"f\" variant=\"info\" >Login with Private Key</Button>{' '}\n            <Button className =\"f\" variant=\"success\"  >Login with Mnemonic</Button>{' '}\n            <Button className =\"f\" variant=\"primary\"  >Make an Account</Button>{' '}  */}  \n\n            <Link id=\"pl\" to=\"/privatekey\">\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Private Key</Button>\n            </Link>\n\n            <Link id=\"pl\" to=\"/mnemonic\">\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Mnemonic</Button>\n            </Link>    \n            \n            \n            <Button onClick={al} id=\"jl\" variant=\"contained\" color=\"secondary\">Make an Account</Button>\n            \n            </Box>\n\n        </fieldset>\n            \n        </div>\n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/PrivateKey.js",["57"],"import React , { useState } from 'react'\nimport {Box , Button } from '@material-ui/core'\nimport { PrivateKey , Mnemonic} from '@hashgraph/sdk'\n\n\nimport './PrivateKey.css'\n\n\nexport default function PK() {\n\n    const [PrKey , SetPrKey ] = useState('');\n    \n\n    const inputEvent = (e) => {\n        /* console.log(e.target.value); */\n        SetPrKey(e.target.value)\n    }\n\n    /* media milk rally thought afford gas monitor close box slow employ marine quality jacket orbit trigger cancel try above weird save prepare snow slim */\n    \n    \n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const privateKey = PrivateKey.fromString(PrKey); \n        console.log(privateKey.toString());   \n        const publicKey = privateKey.publicKey;\n        console.log(publicKey.toString());\n        SetPrKey('')\n        /* const mnemonic = await Mnemonic.generate(); */\n        /* var i;\n        for(i=0;i<24;i++){\n            console.log(mnemonic.words[i])\n        } */\n        \n        \n    }\n\n    return (\n        <div className=\"screen\">\n            \n                <Box className =\"box\" component=\"div\" m={1}>\n                <input type=\"text\" className=\"pkinput\" onChange={inputEvent} value={PrKey}/>\n                <Button onClick={onSubmit} type=\"submit\" id =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login with Private Key</Button>\n                </Box>\n            \n        </div>\n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Mnemonic.js",["58"],"import React , { useState } from 'react'\nimport {Box , Button } from '@material-ui/core'\nimport { Mnemonic, PrivateKey } from '@hashgraph/sdk'\n\n\nimport './PrivateKey.css'\n\n\n\nexport default function Mne() {\n\n    const [Mn , SetMn ] = useState('');\n    \n\n    const inputEvent = (e) => {\n        console.log(e.target.value);\n        SetMn(e.target.value)\n    }\n\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const mnemonic = await Mnemonic.fromString(Mn);\n        console.log(mnemonic)\n        /* const privateKey = PrivateKey.fromMnemonic(Mn); */\n        const privateKey = await mnemonic.toPrivateKey();\n        console.log(privateKey);\n        const publicKey = privateKey.publicKey;\n        console.log(publicKey.toString());\n        SetMn('');\n       \n    }\n\n\n    return (\n        <div className=\"screen\">\n            <form >\n                <Box className =\"box\" component=\"div\" m={1}>\n                <input onChange={inputEvent} type=\"text\" className=\"pkinput\" value={Mn}/>\n                <Button onClick={onSubmit} type=\"submit\" className =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login with Mnemonic Phrase</Button>\n                </Box>\n            </form>\n        </div>\n        \n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Event.js",["59","60","61","62","63","64"],"import React, { useState , useEffect } from 'react'\nimport { Card } from 'react-bootstrap'\nimport { Button } from '@material-ui/core';\nimport { Client , TransferTransaction , TokenAssociateTransaction , PrivateKey} from '@hashgraph/sdk';\nimport firebase from '../utils/firebase';\n\n\n\nimport './Event.css'\n\n\nconst event = [\n  {\n    title: 'La La Land',\n    poster: 'https://i.imgur.com/po7UezG.jpg',\n    genre: 'Drama/Romance',\n    amount: '5',\n    \n  },\n  \n  \n]\n\n    const SellerAccId = '0.0.301906';\n    const SellerPblKey = '0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a';\n    const SellerPrKey = '0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4';\n\n    const tokenId = '0.0.303341';\n\n    const accountId = '0.0.303460'\n    const publicKey = \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\"\n    const privateKey = \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\"\n\n\n\n   \n\nexport default function Event() {\n\n\n  const [K , SetK] = useState([]);\n\n  useEffect(() => {\n\n    firebase.firestore().collection('Tickets').onSnapshot(snapshot => {\n\n      SetK(snapshot.docs.map(doc => doc.data()));\n      console.log(K);\n\n    })\n    \n  }, [])\n\n  const buy = async () => {\n\n    const client = Client.forTestnet();\n    client.setOperator(SellerAccId, SellerPrKey);\n\n\n\n    const transaction = await new TokenAssociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([tokenId])\n        .freezeWith(client);\n\n    //Sign with the private key of the account that is being associated to a token \n    const signTx = await transaction.sign(PrivateKey.fromString(privateKey));\n\n    //Submit the transaction to a Hedera network    \n    const txResponse = await signTx.execute(client);\n\n    //Request the receipt of the transaction\n    const receipt = await txResponse.getReceipt(client);\n        \n    //Get the transaction consensus status\n    const transactionStatus = receipt.status;\n\n    console.log(\"The transaction consensus status \" +transactionStatus.toString());\n      \n    const tx = await new TransferTransaction()\n     .addTokenTransfer(tokenId, SellerAccId, -10)\n     .addTokenTransfer(tokenId, accountId, 10)\n     .freezeWith(client);\n\n    //Sign with the sender account private key\n    const sign = await tx.sign(PrivateKey.fromString(SellerPrKey));\n        \n    //Sign with the client operator private key and submit to a Hedera network\n    const txResponse1 = await sign.execute(client);\n        \n    //Request the receipt of the transaction\n    const receipt1 = await txResponse1.getReceipt(client);\n        \n    //Obtain the transaction consensus status\n    const transactionStatus1 = receipt1.status;\n\n    console.log(\"The transaction consensus status \" +transactionStatus1.toString());\n\n\n    const txn = await new TransferTransaction()\n     .addHbarTransfer(SellerAccId, 10)\n     .addHbarTransfer(accountId, -10)\n     \n     .freezeWith(client);\n\n    //Sign with the sender account private key\n    const sign2 = await txn.sign(PrivateKey.fromString(privateKey));\n        \n    //Sign with the client operator private key and submit to a Hedera network\n    const txResponse2 = await sign2.execute(client);\n        \n    //Request the receipt of the transaction\n    const receipt2 = await txResponse2.getReceipt(client);\n        \n    //Obtain the transaction consensus status\n    const transactionStatus2 = receipt2.status;\n\n    console.log(\"The transaction consensus status \" +transactionStatus1.toString());\n\n \n  \n  }\n    return (\n        <div id=\"hh\">\n            {K.map((K, index) => \n                    <>\n                      <div id=\"cardlist\">    \n                      <Card id=\"gh\" style={{ width: '18rem' }}>\n                        <Card.Img id =\"pic\" variant=\"top\"  />\n                        <Card.Body>\n                            <Card.Title id=\"kl\">{K.Name}</Card.Title>\n\n                            <Card.Text id=\"gg\"> {K.Desc} </Card.Text>\n                            \n                            <Card.Text id=\"gg\">\n                              {K.Creator}\n                            </Card.Text>\n                            <Card.Text id=\"gl\">{K.Amount}</Card.Text>\n                            <Button onClick={buy} id=\"jkl\" variant=\"contained\" color=\"primary\">Buy</Button>\n                        </Card.Body>\n                        </Card>\n                      </div>  \n                    </>\n                )}\n        </div>\n    )\n}\n\n\n\n\n{/* <div className=\"hh\">\n            {event.map((event, index) => \n                    <>\n                      <div className=\"cardlist\">    \n                      <Card className=\"gh\" style={{ width: '18rem' }}>\n                        <Card.Img className =\"pic\" variant=\"top\" src={event.poster} />\n                        <Card.Body>\n                            <Card.Title className=\"kl\">{event.title}</Card.Title>\n                            <Card.Text className=\"gg\">\n                            Some quick example text to build on the card title and make up the bulk of\n                            the card's content.\n                            </Card.Text>\n                            <Card.Text className=\"gl\">{event.amount}</Card.Text>\n                            <Button onClick={buy} id=\"jkl\" variant=\"contained\" color=\"primary\">Buy</Button>\n                        </Card.Body>\n                        </Card>\n                      </div>  \n                    </>\n                )}\n        </div> */}","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/TicketList.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/screens/CreateToken.js",["65","66","67","68","69"],"/home/juuzou/Documents/hello/Khazana/tickets/src/utils/firebase.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":4,"column":65,"nodeType":"76","messageId":"77","endLine":4,"endColumn":74},{"ruleId":"74","severity":1,"message":"78","line":66,"column":15,"nodeType":"76","messageId":"77","endLine":66,"endColumn":20},{"ruleId":"79","severity":1,"message":"80","line":76,"column":51,"nodeType":"81","messageId":"82","endLine":76,"endColumn":52},{"ruleId":"79","severity":1,"message":"80","line":76,"column":89,"nodeType":"81","messageId":"82","endLine":76,"endColumn":90},{"ruleId":"74","severity":1,"message":"83","line":3,"column":23,"nodeType":"76","messageId":"77","endLine":3,"endColumn":31},{"ruleId":"74","severity":1,"message":"84","line":3,"column":20,"nodeType":"76","messageId":"77","endLine":3,"endColumn":30},{"ruleId":"74","severity":1,"message":"85","line":12,"column":7,"nodeType":"76","messageId":"77","endLine":12,"endColumn":12},{"ruleId":"74","severity":1,"message":"86","line":25,"column":11,"nodeType":"76","messageId":"77","endLine":25,"endColumn":23},{"ruleId":"74","severity":1,"message":"87","line":31,"column":11,"nodeType":"76","messageId":"77","endLine":31,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":52,"column":6,"nodeType":"90","endLine":52,"endColumn":8,"suggestions":"91"},{"ruleId":"74","severity":1,"message":"92","line":116,"column":11,"nodeType":"76","messageId":"77","endLine":116,"endColumn":29},{"ruleId":"93","severity":1,"message":"94","line":152,"column":1,"nodeType":"95","messageId":"96","endLine":171,"endColumn":19},{"ruleId":"74","severity":1,"message":"97","line":4,"column":19,"nodeType":"76","messageId":"77","endLine":4,"endColumn":23},{"ruleId":"74","severity":1,"message":"75","line":4,"column":51,"nodeType":"76","messageId":"77","endLine":4,"endColumn":60},{"ruleId":"74","severity":1,"message":"98","line":17,"column":11,"nodeType":"76","messageId":"77","endLine":17,"endColumn":20},{"ruleId":"74","severity":1,"message":"87","line":18,"column":11,"nodeType":"76","messageId":"77","endLine":18,"endColumn":20},{"ruleId":"74","severity":1,"message":"99","line":19,"column":11,"nodeType":"76","messageId":"77","endLine":19,"endColumn":21},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'PublicKey' is defined but never used.","Identifier","unusedVar","'PbKey' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Mnemonic' is defined but never used.","'PrivateKey' is defined but never used.","'event' is assigned a value but never used.","'SellerPblKey' is assigned a value but never used.","'publicKey' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'K'. Either include it or remove the dependency array.","ArrayExpression",["102"],"'transactionStatus2' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Hbar' is defined but never used.","'accountId' is assigned a value but never used.","'privateKey' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},"Update the dependencies array to be: [K]",{"range":"105","text":"106"},[1315,1317],"[K]"]
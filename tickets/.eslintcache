[{"/home/juuzou/Documents/hello/Khazana/tickets/src/index.js":"1","/home/juuzou/Documents/hello/Khazana/tickets/src/reportWebVitals.js":"2","/home/juuzou/Documents/hello/Khazana/tickets/src/App.js":"3","/home/juuzou/Documents/hello/Khazana/tickets/src/Header.js":"4","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Login.js":"5","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/PrivateKey.js":"6","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Mnemonic.js":"7","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Event.js":"8","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/TicketList.js":"9","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/CreateToken.js":"10","/home/juuzou/Documents/hello/Khazana/tickets/src/utils/firebase.js":"11"},{"size":500,"mtime":1612161786297,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1612077971595,"results":"14","hashOfConfig":"13"},{"size":1415,"mtime":1612285346665,"results":"15","hashOfConfig":"13"},{"size":2187,"mtime":1612507285077,"results":"16","hashOfConfig":"13"},{"size":3026,"mtime":1612464968787,"results":"17","hashOfConfig":"13"},{"size":1421,"mtime":1612292991012,"results":"18","hashOfConfig":"13"},{"size":1236,"mtime":1612361623423,"results":"19","hashOfConfig":"13"},{"size":2598,"mtime":1612524538439,"results":"20","hashOfConfig":"13"},{"size":2883,"mtime":1612512386977,"results":"21","hashOfConfig":"13"},{"size":7465,"mtime":1612514585352,"results":"22","hashOfConfig":"13"},{"size":486,"mtime":1612357563443,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1ncuevm",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/juuzou/Documents/hello/Khazana/tickets/src/index.js",[],["51","52"],"/home/juuzou/Documents/hello/Khazana/tickets/src/reportWebVitals.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/App.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/Header.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Login.js",["53","54","55","56"],"import React from 'react';\nimport {Box ,Button} from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { PrivateKey , Client , Hbar , AccountCreateTransaction, PublicKey } from '@hashgraph/sdk';\nimport firebase from '../utils/firebase';\n\nimport './Login.css'\n\n\nexport default function Login() {\n\n\n    const myAccountId = '0.0.255748'\n    const myPrivateKey = '302e020100300506032b6570042204208abde9468b7b2956797e2cf62714a43630be78351989a6c6de2400003199f185'\n\n    const al = async () => {\n\n        const client = Client.forTestnet();\n        client.setOperator(myAccountId, myPrivateKey);\n\n\n        const privateKey = await PrivateKey.generate();\n        const publicKey = privateKey.publicKey;\n        console.log(\"private = 0x\" + privateKey);\n        /* console.log(privateKey.toString()); */\n        console.log(\"public = 0x\" + publicKey);\n\n        const transaction = new AccountCreateTransaction()\n                            .setKey(privateKey.publicKey)\n                            .setInitialBalance(new Hbar(1000))\n                            \n\n        //Sign the transaction with the client operator private key and submit to a Hedera network\n        const txResponse = await transaction.execute(client);\n\n        //Request the receipt of the transaction\n        const receipt = await txResponse.getReceipt(client);\n\n        //Get the account ID\n        const newAccountId = receipt.accountId;\n\n        /* client.setOperator(newAccountId, privateKey); */\n\n        console.log(\"The new account ID is \" +newAccountId);\n\n        const AccRef = firebase.database().ref(\"Acc\");\n        const PbKey = publicKey.toString();\n        const Acc = {\n                PbKey:(publicKey.toString()),\n                PKey:(privateKey.toString()),\n                AccId:(newAccountId.toString()),\n                AccTickets:[],\n                CreatedTickets:[],\n            \n                \n        }\n        AccRef.push(Acc);\n        alert(\"PrivateKey = 0x\" + privateKey +'  '+ \"PublicKey = 0x\" + publicKey + '  ' + 'Account Id = ' + newAccountId)\n    }\n    return (\n        <div className=\"screen\">\n        <fieldset className=\"df\">\n            <Box className =\"box\" component=\"div\" m={1}>\n{/*         <Button className =\"f\" variant=\"info\" >Login with Private Key</Button>{' '}\n            <Button className =\"f\" variant=\"success\"  >Login with Mnemonic</Button>{' '}\n            <Button className =\"f\" variant=\"primary\"  >Make an Account</Button>{' '}  */}  \n\n            <Link id=\"pl\" to=\"/privatekey\">\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Private Key</Button>\n            </Link>\n\n            <Link id=\"pl\" to=\"/mnemonic\">\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Mnemonic</Button>\n            </Link>    \n            \n            \n            <Button onClick={al} id=\"jl\" variant=\"contained\" color=\"secondary\">Make an Account</Button>\n            \n            </Box>\n\n        </fieldset>\n            \n        </div>\n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/PrivateKey.js",["57"],"import React , { useState } from 'react'\nimport {Box , Button } from '@material-ui/core'\nimport { PrivateKey , Mnemonic} from '@hashgraph/sdk'\n\n\nimport './PrivateKey.css'\n\n\nexport default function PK() {\n\n    const [PrKey , SetPrKey ] = useState('');\n    \n\n    const inputEvent = (e) => {\n        /* console.log(e.target.value); */\n        SetPrKey(e.target.value)\n    }\n\n    /* media milk rally thought afford gas monitor close box slow employ marine quality jacket orbit trigger cancel try above weird save prepare snow slim */\n    \n    \n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const privateKey = PrivateKey.fromString(PrKey); \n        console.log(privateKey.toString());   \n        const publicKey = privateKey.publicKey;\n        console.log(publicKey.toString());\n        SetPrKey('')\n        /* const mnemonic = await Mnemonic.generate(); */\n        /* var i;\n        for(i=0;i<24;i++){\n            console.log(mnemonic.words[i])\n        } */\n        \n        \n    }\n\n    return (\n        <div className=\"screen\">\n            \n                <Box className =\"box\" component=\"div\" m={1}>\n                <input type=\"text\" className=\"pkinput\" onChange={inputEvent} value={PrKey}/>\n                <Button onClick={onSubmit} type=\"submit\" id =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login with Private Key</Button>\n                </Box>\n            \n        </div>\n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Mnemonic.js",["58"],"import React , { useState } from 'react'\nimport {Box , Button } from '@material-ui/core'\nimport { Mnemonic, PrivateKey } from '@hashgraph/sdk'\n\n\nimport './PrivateKey.css'\n\n\n\nexport default function Mne() {\n\n    const [Mn , SetMn ] = useState('');\n    \n\n    const inputEvent = (e) => {\n        console.log(e.target.value);\n        SetMn(e.target.value)\n    }\n\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const mnemonic = await Mnemonic.fromString(Mn);\n        console.log(mnemonic)\n        /* const privateKey = PrivateKey.fromMnemonic(Mn); */\n        const privateKey = await mnemonic.toPrivateKey();\n        console.log(privateKey);\n        const publicKey = privateKey.publicKey;\n        console.log(publicKey.toString());\n        SetMn('');\n       \n    }\n\n\n    return (\n        <div className=\"screen\">\n            <form >\n                <Box className =\"box\" component=\"div\" m={1}>\n                <input onChange={inputEvent} type=\"text\" className=\"pkinput\" value={Mn}/>\n                <Button onClick={onSubmit} type=\"submit\" className =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login with Mnemonic Phrase</Button>\n                </Box>\n            </form>\n        </div>\n        \n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Event.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/screens/TicketList.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/screens/CreateToken.js",["59","60"],"import React, { useState } from 'react'\nimport { Form , Col , Row } from 'react-bootstrap'\nimport { Button } from '@material-ui/core'\nimport { Client , Hbar , TokenCreateTransaction } from '@hashgraph/sdk';\n\n\n\nimport './CreateToken.css'\n\nexport default function CreateToken() {\n\n    const AccId = '0.0.301906';\n    const PblKey = '0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a';\n    const PrKey = '0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4';\n\n    \n    const [Tkn , SetTkn] = useState({\n        Name:\"\",\n        Sym:\"\",\n        Desc:\"\",\n        Amt:\"\",\n        PbAdd:\"\",\n        Skylink:\"\",\n    });\n\n\n    const inputEvent = (e) => {\n        console.log(e.target.value);\n        /* SetTkn(e.target.value) */\n\n        const value = e.target.value;\n        const name = e.target.name;\n\n        console.log(name)\n        SetTkn((pv) => {\n            if(name === 'Name'){\n                return{\n                    Name:value,\n                    Sym:pv.Sym,\n                    Desc:pv.Description,\n                    Amt:pv.Amount,\n                }\n            }\n            else if(name === 'Sym'){\n                return{\n                    Name:pv.Name,\n                    Sym:value,\n                    Desc:pv.Description,\n                    Amt:pv.Amount,\n                }\n            }\n            else if(name === 'Description'){\n                return{\n                    Name:pv.Name,\n                    Sym:pv.Sym,\n                    Desc:value,\n                    Amt:pv.Amount,\n                }\n            }\n            else if(name === 'Amount'){\n                return{\n                    Name:pv.Name,\n                    Sym:pv.Sym,\n                    Desc:pv.Description,\n                    Amt:value,\n                }\n            }\n        })\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        \n        console.log(Tkn)\n\n        const client = Client.forTestnet();\n        client.setOperator(AccId, PrKey);\n        const transaction = await new TokenCreateTransaction().setTokenName(Tkn.Name).setTokenSymbol(Tkn.Sym).setTreasuryAccountId(AccId).setInitialSupply(Tkn.Amt).setDecimals(18).execute(client);\n        /* const transaction = await new TokenCreateTransaction()\n            .setTokenName(Tkn.Name)\n            .setTokenSymbol(Tkn.Sym)\n            .setTreasuryAccountId(AccId)\n            .setInitialSupply(Tkn.Amt)\n            .setAdminKey(PblKey)\n            .setDecimals(18).freezeWith(client); //Change the default max transaction fee\n           */  \n        console.log(transaction)\n        //Sign the transaction with the token adminKey and the token treasury account private key\n        /* const signTx =  await transaction.sign(PrKey);\n\n        //Sign the transaction with the client operator private key and submit to a Hedera network\n        const txResponse = await signTx.execute(client); */\n            \n        //Get the receipt of the transaction\n        const receipt = await transaction.getReceipt(client);\n\n        //Get the token ID from the receipt\n        const tokenId = receipt.tokenId;\n\n        console.log(\"The new token ID is \" + tokenId);\n        \n        \n        SetTkn({\n            Name:\"\",\n            Sym:\"\",\n            Desc:\"\",\n            Amt:\"\"\n        });\n       \n    }\n\n    return (\n        <div className=\"bb\">\n            <div className=\"kl\">\n            <fieldset>\n                <Form>\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                    <Form.Label id=\"lo\" column sm={2}>\n                    Name of the Event\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control name=\"Name\" onChange={inputEvent} type=\"text\" value={Tkn.Name} placeholder=\"Name\" />\n                    </Col>\n                </Form.Group>\n\n                {/* <Form.Group as={Row} controlId=\"formHorizontalPassword\">\n                    <Form.Label column sm={2}>\n                    Password\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control type=\"password\" placeholder=\"Password\" />\n                    </Col>\n                </Form.Group> */}\n\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                    <Form.Label column sm={2}>\n                    Symbol\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control name=\"Sym\" onChange={inputEvent} type=\"text\" value={Tkn.Sym} placeholder=\"Symbol\" />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                    <Form.Label column sm={2}>\n                    Description\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control name=\"Description\" onChange={inputEvent} type=\"text\" value={Tkn.Desc} placeholder=\"Description\" />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                    <Form.Label column sm={2}>\n                    Amount\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control name=\"Amount\" onChange={inputEvent} type=\"text\" value={Tkn.Amt} placeholder=\"Amount\" />\n                    </Col>\n                </Form.Group>\n\n                {/* <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                    <Form.Label column sm={2}>\n                    Public Address\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control onChange={inputEvent} type=\"text\" value={Tkn.PbAdd} placeholder=\"Public Address\" />\n                    </Col>\n                </Form.Group> */}\n\n                \n\n\n                <Form.Group>\n                    <Form.File id=\"FormControlFile\" label=\"Insert Image pls\" />\n                </Form.Group>\n                <>\n                    <Form.Group as={Row}>\n                    <Form.Label className=\"gf\" as=\"legend\" column sm={2}>\n                        Type of Token\n                    </Form.Label>\n                    <Col id=\"jh\" sm={10}>\n                        <Form.Check\n                        type=\"radio\"\n                        label=\"Normal Token\"\n                        name=\"formHorizontalRadios\"\n                        id=\"formHorizontalRadios1\"\n                        />\n                        <Form.Check\n                        type=\"radio\"\n                        label=\"NFT \"\n                        name=\"formHorizontalRadios\"\n                        id=\"formHorizontalRadios2\"\n                        />\n                    </Col>\n                    </Form.Group>\n                </>\n                {/* <Form.Group as={Row} controlId=\"formHorizontalCheck\">\n                    <Col sm={{ span: 10, offset: 2 }}>\n                    <Form.Check label=\"Remember me\" />\n                    </Col>\n                </Form.Group> */}\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                    <Button onClick={onSubmit} variant=\"contained\" color=\"primary\" type=\"submit\">Create</Button>\n                    </Col>\n                </Form.Group>\n                </Form>\n\n            </fieldset>\n                \n            </div>\n            \n        </div>\n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/utils/firebase.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":4,"column":65,"nodeType":"67","messageId":"68","endLine":4,"endColumn":74},{"ruleId":"65","severity":1,"message":"69","line":47,"column":15,"nodeType":"67","messageId":"68","endLine":47,"endColumn":20},{"ruleId":"70","severity":1,"message":"71","line":58,"column":51,"nodeType":"72","messageId":"73","endLine":58,"endColumn":52},{"ruleId":"70","severity":1,"message":"71","line":58,"column":89,"nodeType":"72","messageId":"73","endLine":58,"endColumn":90},{"ruleId":"65","severity":1,"message":"74","line":3,"column":23,"nodeType":"67","messageId":"68","endLine":3,"endColumn":31},{"ruleId":"65","severity":1,"message":"75","line":3,"column":20,"nodeType":"67","messageId":"68","endLine":3,"endColumn":30},{"ruleId":"65","severity":1,"message":"76","line":4,"column":19,"nodeType":"67","messageId":"68","endLine":4,"endColumn":23},{"ruleId":"65","severity":1,"message":"77","line":13,"column":11,"nodeType":"67","messageId":"68","endLine":13,"endColumn":17},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'PublicKey' is defined but never used.","Identifier","unusedVar","'PbKey' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Mnemonic' is defined but never used.","'PrivateKey' is defined but never used.","'Hbar' is defined but never used.","'PblKey' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
[{"/home/juuzou/Documents/hello/Khazana/tickets/src/index.js":"1","/home/juuzou/Documents/hello/Khazana/tickets/src/reportWebVitals.js":"2","/home/juuzou/Documents/hello/Khazana/tickets/src/App.js":"3","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/TicketList.js":"4","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Event.js":"5","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/LoginContext.js":"6","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/NFT.js":"7","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Home.js":"8","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Mnemonic.js":"9","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Login.js":"10","/home/juuzou/Documents/hello/Khazana/tickets/src/Header.js":"11","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/PrivateKey.js":"12","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Profile.js":"13","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/CreateToken.js":"14","/home/juuzou/Documents/hello/Khazana/tickets/src/hooks/useKey.js":"15","/home/juuzou/Documents/hello/Khazana/tickets/src/component/TicketCard.js":"16","/home/juuzou/Documents/hello/Khazana/tickets/src/utils/firebase.js":"17","/home/juuzou/Documents/hello/Khazana/tickets/src/component/NFTCard.js":"18","/home/juuzou/Documents/hello/Khazana/tickets/src/component/Card.js":"19","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/DNFT.js":"20","/home/juuzou/Documents/hello/Khazana/tickets/src/component/DNFTCard.js":"21","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Color.js":"22","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/ColorMarket.js":"23"},{"size":500,"mtime":1613109166444,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1612077971595,"results":"26","hashOfConfig":"25"},{"size":2228,"mtime":1613109098495,"results":"27","hashOfConfig":"25"},{"size":3635,"mtime":1613123879520,"results":"28","hashOfConfig":"25"},{"size":1676,"mtime":1612884188480,"results":"29","hashOfConfig":"25"},{"size":84,"mtime":1612865839352,"results":"30","hashOfConfig":"25"},{"size":1598,"mtime":1612967227136,"results":"31","hashOfConfig":"25"},{"size":2059,"mtime":1613043954458,"results":"32","hashOfConfig":"25"},{"size":1258,"mtime":1613023529048,"results":"33","hashOfConfig":"25"},{"size":5096,"mtime":1613023529048,"results":"34","hashOfConfig":"25"},{"size":2692,"mtime":1613107238783,"results":"35","hashOfConfig":"25"},{"size":1762,"mtime":1613109683370,"results":"36","hashOfConfig":"25"},{"size":726,"mtime":1613109418721,"results":"37","hashOfConfig":"25"},{"size":18005,"mtime":1613122351151,"results":"38","hashOfConfig":"25"},{"size":186,"mtime":1612886308927,"results":"39","hashOfConfig":"25"},{"size":1840,"mtime":1613119700932,"results":"40","hashOfConfig":"25"},{"size":486,"mtime":1612594872659,"results":"41","hashOfConfig":"25"},{"size":6398,"mtime":1613043954462,"results":"42","hashOfConfig":"25"},{"size":5591,"mtime":1613054729178,"results":"43","hashOfConfig":"25"},{"size":1603,"mtime":1613046159786,"results":"44","hashOfConfig":"25"},{"size":6537,"mtime":1613051424161,"results":"45","hashOfConfig":"25"},{"size":1919,"mtime":1613107868911,"results":"46","hashOfConfig":"25"},{"size":2257,"mtime":1613107238727,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"m875up",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"50"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"50"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"50"},"/home/juuzou/Documents/hello/Khazana/tickets/src/index.js",[],["113","114"],"/home/juuzou/Documents/hello/Khazana/tickets/src/reportWebVitals.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/App.js",["115"],"import React,{useState,useContext} from 'react';\nimport './App.css';\nimport { BrowserRouter as  Router, Switch , Route } from 'react-router-dom';\nimport Header from './Header'\nimport Login from '../src/screens/Login'\nimport Home from '../src/screens/Home'\nimport PK from '../src/screens/PrivateKey'\nimport Color from '../src/screens/Color'\nimport Mne from '../src/screens/Mnemonic'\nimport Event from '../src/screens/Event'\nimport TicketList from './screens/TicketList';\nimport CreateToken from './screens/CreateToken';\nimport Profile from './screens/Profile';\nimport ColorMarket from './screens/ColorMarket';\nimport {LoginContext} from \"./screens/LoginContext\";\nimport NFT from './screens/NFT';\nimport DNFT from \"./screens/DNFT\";\n\nfunction App() {\n  const [prKey , setPrKey ] = useState('');\n  \n  return (\n    <Router>\n      <div className=\"App\">\n        <LoginContext.Provider value={{ prKey, setPrKey }}>\n          <Switch>\n            <Route path=\"/create\">\n              <Header />\n              <CreateToken />\n            </Route>\n            <Route path=\"/market\">\n              <Header />\n              <Event />\n            </Route>\n            <Route path=\"/nft\">\n              <Header />\n              <NFT />\n            </Route>\n            <Route path=\"/dnft\">\n              <Header />\n              <DNFT />\n            </Route>\n            <Route path=\"/ticket\">\n              <Header />\n              <TicketList />\n            </Route>\n            <Route path=\"/Mnemonic\">\n              <Mne />\n            </Route>\n            <Route path=\"/profile\">\n              <Header />\n              <Profile />\n            </Route>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n            <Route path=\"/privateKey\">\n              <PK />\n            </Route>\n            <Route path=\"/color\">\n              <Header />\n              <Color />\n            </Route>\n            <Route path=\"/colorMarket\">\n              <Header />\n              <ColorMarket />\n            </Route>\n            <Route path=\"/\">\n              <Header />\n              <Home />\n            </Route>\n          </Switch>\n        </LoginContext.Provider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/TicketList.js",["116","117","118"],"/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Event.js",["119","120"],"import React, { useState , useEffect } from 'react'\nimport firebase from '../utils/firebase';\nimport Cardl from \"../component/Card\";\nimport './Event.css'\n\n   \n\nexport default function Event() {\n\n\n  const [K , SetK] = useState([]);\n  \n\n  useEffect(() => {\n\n    firebase.firestore().collection('Tickets').onSnapshot(snapshot => {\n      \n      SetK(snapshot.docs.map(doc => doc.data()))\n      \n      \n      \n      \n      console.log(K);\n    \n    })\n    \n  }, [])\n\n    return (\n        <div id=\"hh\">\n            {K.map((K, index) => \n                    <>\n                      <Cardl K={K}/>\n                    </>\n                )}\n        </div>\n    )\n}\n\n\n\n\n{/* <div className=\"hh\">\n            {event.map((event, index) => \n                    <>\n                      <div className=\"cardlist\">    \n                      <Card className=\"gh\" style={{ width: '18rem' }}>\n                        <Card.Img className =\"pic\" variant=\"top\" src={event.poster} />\n                        <Card.Body>\n                            <Card.Title className=\"kl\">{event.title}</Card.Title>\n                            <Card.Text className=\"gg\">\n                            Some quick example text to build on the card title and make up the bulk of\n                            the card's content.\n                            </Card.Text>\n                            <Card.Text className=\"gl\">{event.amount}</Card.Text>\n                            <Button onClick={buy} id=\"jkl\" variant=\"contained\" color=\"primary\">Buy</Button>\n                        </Card.Body>\n                        </Card>\n                      </div>  \n                    </>\n                )}\n        </div> */}","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/LoginContext.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/screens/NFT.js",["121","122"],"import React, { useState, useEffect } from \"react\";\nimport firebase from \"../utils/firebase\";\nimport NFTCard from \"../component/NFTCard\";\nimport \"./Event.css\";\n\nexport default function NFT() {\n  const [K, SetK] = useState([]);\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"NFT\")\n      .onSnapshot((snapshot) => {\n        SetK(snapshot.docs.map((doc) => doc.data()));\n\n        console.log(K);\n      });\n  }, []);\n\n  return (\n    <div id=\"hh\">\n      {K.map((K, index) => (\n        <>\n          <NFTCard K={K} />\n        </>\n      ))}\n    </div>\n  );\n}\n\n{\n  /* <div className=\"hh\">\n            {event.map((event, index) => \n                    <>\n                      <div className=\"cardlist\">    \n                      <Card className=\"gh\" style={{ width: '18rem' }}>\n                        <Card.Img className =\"pic\" variant=\"top\" src={event.poster} />\n                        <Card.Body>\n                            <Card.Title className=\"kl\">{event.title}</Card.Title>\n                            <Card.Text className=\"gg\">\n                            Some quick example text to build on the card title and make up the bulk of\n                            the card's content.\n                            </Card.Text>\n                            <Card.Text className=\"gl\">{event.amount}</Card.Text>\n                            <Button onClick={buy} id=\"jkl\" variant=\"contained\" color=\"primary\">Buy</Button>\n                        </Card.Body>\n                        </Card>\n                      </div>  \n                    </>\n                )}\n        </div> */\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Home.js",["123","124","125","126"],"import React from 'react'\nimport './Home.css'\nfunction Home() {\n  return (\n     <>\n     <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://cdn.bitpinas.com/wp-content/uploads/2019/09/08095211/hedera-3-800x445.jpg\")`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        {/* title,buttons,description */}\n        {/* <h1 className=\"banner__title\">\n          Its our project\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div> */}\n        {/* <h1 className=\"banner__description\">\n          Make it better\n        </h1> */}\n      </div>\n      <div className=\"banner--fadeBottom\" />\n    </header>\n    <section id=\"sec\">\n     <div id=\"dout\">\n         <div id=\"d1\">\n           <h1>FAST</h1>\n          </div>\n          <div id=\"d2\">\n             <img id=\"pich\" src=\"https://s3.us-east-1.amazonaws.com/hedera-com/homepage-value-prop-1.png\"></img>\n          </div>\n     </div>\n    </section>\n    <section id=\"sec\">\n     <div id=\"dout\">\n          <div id=\"d1\">\n             <img id=\"pich\" src=\"https://s3.us-east-1.amazonaws.com/hedera-com/homepage-value-prop-3.png\"></img>\n          </div>\n         <div id=\"d2\">\n           <h1>SECURE</h1>\n         </div>\n     </div>\n    </section>\n    <section id=\"sec\">\n     <div id=\"dout\">\n         <div id=\"d2\">\n           <h1>FAIR</h1>\n          </div>\n          <div id=\"d1\">\n             <img id=\"pich\" src=\"https://s3.us-east-1.amazonaws.com/hedera-com/homepage-value-prop-2.png\"></img>\n          </div>\n     </div>\n    </section>\n    <section id=\"sec\">\n     <div id=\"dout\">\n          <div id=\"d2\">\n             <img id=\"pich\" src=\"https://s3.us-east-1.amazonaws.com/hedera-com/homepage-value-prop-4.png\"></img>\n          </div>\n         <div id=\"d1\">\n           <h1>STABLE</h1>\n          </div>\n     </div>\n    </section>\n \n     </>\n  )\n}\n\nexport default Home\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Mnemonic.js",["127"],"import React , { useState } from 'react'\nimport {Box , Button } from '@material-ui/core'\nimport { Mnemonic, PrivateKey } from '@hashgraph/sdk'\nimport './PrivateKey.css'\n\n\nexport default function Mne() {\n\n    const [Mn , SetMn ] = useState('');\n    \n\n    const inputEvent = (e) => {\n        console.log(e.target.value);\n        SetMn(e.target.value)\n    }\n\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const mnemonic = await Mnemonic.fromString(Mn);\n        console.log(mnemonic)\n        /* const privateKey = PrivateKey.fromMnemonic(Mn); */\n        const privateKey = await mnemonic.toPrivateKey();\n        console.log(privateKey);\n        const publicKey = privateKey.publicKey;\n        console.log(publicKey.toString());\n        SetMn('');\n       \n    }\n\n\n    return (\n        <div className=\"screen1\">\n            <form >\n                <Box className =\"box\" component=\"div\" m={1}>\n                <input onChange={inputEvent} id=\"inn\" type=\"text\" placeholder=\"Enter Mnemonic Phrase\" className=\"pkinput\" value={Mn}/>\n                <Button onClick={onSubmit} type=\"submit\" className =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login</Button>\n                </Box>\n            </form>\n        </div>\n        \n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Login.js",["128","129","130","131","132"],"import React from 'react';\nimport {Box ,Button} from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { PrivateKey , Client , Hbar , AccountCreateTransaction, PublicKey } from '@hashgraph/sdk';\nimport { Card,Image } from \"react-bootstrap\";\nimport firebase from '../utils/firebase';\n\n\nimport './Login.css'\n\n\nexport default function Login() {\n\n\n    const myAccountId = \"0.0.303460\";\n    const myPrivateKey =\n      \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\n\n    const al = async () => {\n\n        const client = Client.forTestnet();\n        client.setOperator(myAccountId, myPrivateKey);\n\n\n        const privateKey = await PrivateKey.generate();\n        const publicKey = privateKey.publicKey;\n        console.log(\"private = 0x\" + privateKey);\n        /* console.log(privateKey.toString()); */\n        console.log(\"public = 0x\" + publicKey);\n\n        const transaction = new AccountCreateTransaction()\n                            .setKey(privateKey.publicKey)\n                            .setInitialBalance(new Hbar(10))\n                            \n\n        //Sign the transaction with the client operator private key and submit to a Hedera network\n        const txResponse = await transaction.execute(client);\n\n        //Request the receipt of the transaction\n        const receipt = await txResponse.getReceipt(client);\n\n        //Get the account ID\n        const newAccountId = receipt.accountId;\n\n        /* client.setOperator(newAccountId, privateKey); */\n\n        console.log(\"The new account ID is \" +newAccountId);\n\n\n\n\n        /* const TicketsRef = firebase.firestore().collection('User');\n\n\n        \n        const Tick = {\n                Name:Tkn.Name,\n                Symbol:Tkn.Sym,\n                Amount:Tkn.Amt,\n                Description:Tkn.Desc,\n                TokenId:(tokenId.toString()),\n                Creator:PblKey,\n        }\n\n\n        TicketsRef.push(Tick); */\n\n        \n\n\n        firebase.firestore().collection('User').doc((publicKey.toString())).set({\n            \n                PbKey:(publicKey.toString()),\n                PKey:(privateKey.toString()),\n                AccId:(newAccountId.toString()),\n                AccTickets:[],\n                CreatedTickets:[],\n            \n        \n        })\n        .then(() => {\n            console.log(\"Document successfully written!\");\n        })\n        .catch((error) => {\n            console.error(\"Error writing document: \", error);\n        });\n\n\n        alert(\"PrivateKey = 0x\" + privateKey +'  '+ \"PublicKey = 0x\" + publicKey + '  ' + 'Account Id = ' + newAccountId)\n    }\n    return (\n      \n      <div id=\"te\"> <h1>LOGIN</h1> \n        <div className=\"screen\">\n              \n            \n{/*         <Button className =\"f\" variant=\"info\" >Login with Private Key</Button>{' '}\n            <Button className =\"f\" variant=\"success\"  >Login with Mnemonic</Button>{' '}\n            <Button className =\"f\" variant=\"primary\"  >Make an Account</Button>{' '}  */}  \n\n            <Card id=\"ll\">\n                <Card.Img variant=\"top\" id=\"pi\" src={\"https://dtkp6g0samjql.cloudfront.net/uploads/photo/file/18285029/9c309160-e144-41d0-b6ae-2fc92328df64.png\" }/>\n                    <Card.Body>\n                    <Card.Title id=\"ti\">Login With:</Card.Title>\n                    <Link id=\"pl\" to=\"/privatekey\">\n                     <Button id=\"jl\" variant=\"contained\" color=\"primary\">Private Key</Button>\n                    </Link>\n                    </Card.Body>\n            </Card>\n            <Card  id=\"ll\">\n                <Card.Img variant=\"top\" id=\"pi\" src=\"https://dtkp6g0samjql.cloudfront.net/uploads/photo/file/18285029/9c309160-e144-41d0-b6ae-2fc92328df64.png\" />\n                    <Card.Body>\n                    <Card.Title id=\"ti\">Login With:</Card.Title>\n    \n                    <Link id=\"pl\" to=\"/mnemonic\">\n                      <Button id=\"jl\" variant=\"contained\" color=\"primary\">Mnemonic</Button>\n                    </Link>\n                     \n                    </Card.Body>\n            </Card>\n            <Card  id=\"ll\" >\n                <Card.Img variant=\"top\" id=\"pi\" src=\"https://dtkp6g0samjql.cloudfront.net/uploads/photo/file/18285029/9c309160-e144-41d0-b6ae-2fc92328df64.png\" />\n                    <Card.Body>\n                    <Card.Title id=\"ti\" >Login With:</Card.Title>\n\n                     <Button onClick={al} id=\"jl\" variant=\"contained\"color=\"primary\">Make an Account</Button>\n                    </Card.Body>\n            </Card>\n\n            {/* <Link id=\"pl\" to=\"/privatekey\">\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Private Key</Button>\n            </Link>\n\n            <Link id=\"pl\" to=\"/mnemonic\">\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Mnemonic</Button>\n            </Link>    \n            \n            \n            <Button onClick={al} id=\"jl\" variant=\"contained\" color=\"secondary\">Make an Account</Button> */}\n            \n            \n\n       \n            \n        </div>\n        </div>\n        \n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/Header.js",["133"],"import React,{useContext} from 'react';\nimport './Header.css';\nimport { Link } from 'react-router-dom';\nimport SearchIcon from '@material-ui/icons/Search';\n\n\nexport default function Header() {\n    \n    return (\n      <nav className=\"header\">\n        <Link to=\"/\">\n          <img\n            className=\"header_logo\"\n            src=\"https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fglobaltassels.org%2Ffiles%2F2016%2F03%2Fgt-product-logo-ticket.gif&f=1&nofb=1\"\n            alt=\"logo\"\n          />\n        </Link>\n        <div className=\"header_searchbar\">\n          <input type=\"text\" className=\"header_search\" />\n          <SearchIcon className=\"header_search_icon\" />\n        </div>\n\n        <div className=\"header_navigation\">\n          <Link to=\"/ticket\" className=\"header_link\">\n            <div className=\"header_options\">\n              <span className=\"h\">My Tickets</span>\n            </div>\n          </Link>\n          <Link to=\"/create\" className=\"header_link\">\n            <div className=\"header_options\">\n              <span className=\"h\">Create</span>\n            </div>\n          </Link>\n          {/* <Link to='/login' className='header_link'>\n                <div className=\"header_options\">\n                    <span className=\"h\">Sell</span>\n                    \n                </div>\n                \n            </Link> */}\n          <Link to=\"/market\" className=\"header_link\">\n            <div className=\"header_options\">\n              <span className=\"h\">Market</span>\n            </div>\n          </Link>\n          <Link to=\"/nft\" className=\"header_link\">\n            <div className=\"header_options\">\n              <span className=\"h\">NFT Market</span>\n            </div>\n          </Link>\n          <Link to=\"/dnft\" className=\"header_link\">\n            <div className=\"header_options\">\n              <span className=\"h\">DNFT Market</span>\n            </div>\n          </Link>\n          <Link to=\"/login\" className=\"header_link\">\n            <div className=\"header_options\">\n              <span className=\"h\">LogOut</span>\n            </div>\n          </Link>\n          <Link to=\"/color\" className=\"header_link\">\n            <div className=\"header_options\">\n              <span className=\"h\">Color</span>\n            </div>\n          </Link>\n          <Link to=\"/profile\" className=\"header_link\">\n            <div className=\"header_options\">\n              <span className=\"h\">Profile</span>\n            </div>\n          </Link>\n        </div>\n      </nav>\n    );\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/PrivateKey.js",["134","135","136"],"import React , { useState,useContext } from 'react'\nimport {useHistory } from \"react-router-dom\";\nimport {Box , Button } from '@material-ui/core'\nimport { PrivateKey , Mnemonic} from '@hashgraph/sdk'\nimport {LoginContext} from \"./LoginContext\";\n\nimport './PrivateKey.css'\n\n\nexport default function PK() {\n    \n    const {setPrKey,prKey} = useContext(LoginContext);\n    // const [PrKey , SetPrKey ] = useState('');\n    const history = useHistory();\n    \n    const inputEvent = (e) => {\n        /* console.log(e.target.value); */\n        setPrKey(e.target.value)\n    \n    }\n    \n    /* media milk rally thought afford gas monitor close box slow employ marine quality jacket orbit trigger cancel try above weird save prepare snow slim */\n    \n    \n    const onSubmit = async (e) => {\n        \n        history.push(\"/profile\")\n         /* e.preventDefault(); */\n        // const privateKey = PrivateKey.fromString(PrKey); \n        // console.log(privateKey.toString());   \n        // const publicKey = privateKey.publicKey;\n        // console.log(publicKey.toString());\n        // SetPrKey('')\n        /* const mnemonic = await Mnemonic.generate(); */\n        /* var i;\n        for(i=0;i<24;i++){\n            console.log(mnemonic.words[i])\n        } */\n        \n        \n    }\n\n    return (\n        \n     \n        <div className=\"screen1\">\n          \n             <form>\n                <Box className =\"box\" component=\"div\" m={1}>\n               \n                <input type=\"text\" id=\"inn\" onChange={inputEvent} value={prKey} placeholder=\"Enter Your PivateKey\"/>\n                <Button onClick={onSubmit} type=\"submit\" id =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login</Button>\n                </Box>\n            </form>\n        </div>\n       \n    )\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Profile.js",["137","138","139","140","141","142","143"],"import React , {useContext , useState} from 'react'\nimport {LoginContext} from \"./LoginContext\";\nimport {\n  Client,\n  TokenCreateTransaction,\n  PublicKey,\n  PrivateKey,\n  TopicCreateTransaction,\n  TopicMessageSubmitTransaction,\n} from \"@hashgraph/sdk\";\n\n\nfunction Profile() {\n  const {prKey} = useContext(LoginContext);\n  \n  /* window.localStorage.setItem(\"Pr\",prKey);\n  var pr = localStorage.getItem(\"Pr\"); */\n\n  if (!localStorage.getItem(\"Pr\")) {\n    var pr = window.localStorage.setItem(\"Pr\", prKey);\n  }\n\n  /* const [P,SetP] = useState('') */\n  /* SetP(prKey);\n  console.log(P) */\n\n  return (\n    <>\n      <h1>Profile</h1>\n      <h2>Private key : {pr}</h2>\n      <h3>{pr}</h3>\n      \n\n    </>\n  )\n}\n\nexport default Profile","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/CreateToken.js",["144","145"],"import React, { useContext,useState } from \"react\";\nimport { Form , Col , Row } from 'react-bootstrap'\nimport { Button } from '@material-ui/core'\nimport {\n  Client,\n  TokenCreateTransaction,\n  PublicKey,\n  PrivateKey,\n  TopicCreateTransaction,\n  TopicMessageSubmitTransaction,\n} from \"@hashgraph/sdk\";\nimport firebase from '../utils/firebase';\nimport { SkynetClient } from 'skynet-js'\nimport { LoginContext } from \"./LoginContext\";\n\n\n\nimport './CreateToken.css'\n\nexport default function CreateToken() {\n\n  const [H, setH] = useState('')\n  const { prKey } = useContext(LoginContext);\n  console.log(prKey)\n  const NPrKey = PrivateKey.fromString(prKey);\n  \n  const NPblKey = NPrKey.publicKey;\n  console.log(NPblKey.toString());\n\n\n\n\n    firebase\n      .firestore()\n      .collection(\"User\")\n      .doc(NPblKey.toString())\n      .get()\n      .then((doc) =>\n          {\n          console.log(doc.data());\n          const NAccId = doc.data().AccId; \n          console.log(NAccId)\n          setH(NAccId)\n        }\n      )\n    \n  \n/* \n    const AccId = '0.0.301906'\n    const PblKey = '302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a';\n    const PrKey = '302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4'\n\n    \n    const accountId = '0.0.303460'\n    const publicKey = \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\"\n    const privateKey = \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\" */\n\n\n    const [Tkn , SetTkn] = useState({   \n\n        Name:\"\",\n        Sym:\"\",\n        Desc:\"\",\n        Amt:\"\",\n        Price:\"\",\n        PbAdd:\"\",\n        TknId:\"\",\n        /* File:\"\", */ \n\n    });\n\n    const [File , SetFile] = useState('');\n\n\n    const inputEvent = (e) => {\n        /* console.log(e.target.value); */\n        /* SetTkn(e.target.value) */\n\n        const value = e.target.value;\n        const name = e.target.name;\n        const files = e.target.files;\n        \n        \n        /* console.log(files[0]) */\n        \n\n        /* console.log(name) */\n        SetTkn((pv) => {\n            if( name === 'Name'){\n                return{\n                    Name:value,\n                    Sym:pv.Sym,\n                    Desc:pv.Desc,\n                    Amt:pv.Amt,\n                    Price:pv.Price,\n                    File:pv.File\n                }\n            }\n            else if( name === 'Sym'){\n                return{\n                    Name:pv.Name,\n                    Sym:value,\n                    Desc:pv.Desc,\n                    Amt:pv.Amt,\n                    Price:pv.Price,\n                    File:pv.File\n                }\n            }\n            else if( name === 'Desc'){\n                return{\n                    Name:pv.Name,\n                    Sym:pv.Sym,\n                    Desc:value,\n                    Amt:pv.Amt,\n                    Price:pv.Price,\n                    File:pv.File\n                }\n            }\n            else if( name === 'Amt'){\n                return{\n                    Name:pv.Name,\n                    Sym:pv.Sym,\n                    Desc:pv.Desc,\n                    Amt:value,\n                    Price:pv.Price,\n                    File:pv.File\n                }\n            }\n            else if( name === 'Price'){\n                return{\n                    Name:pv.Name,\n                    Sym:pv.Sym,\n                    Desc:pv.Desc,\n                    Amt:pv.Amt,\n                    Price:value,\n                    File:pv.File\n                }\n            }\n            else if( name === 'File'){\n                return{\n                    Name:pv.Name,\n                    Sym:pv.Sym,\n                    Desc:pv.Desc,\n                    Amt:pv.Amt,\n                    Price:pv.Price,\n                    File:files[0],\n                }\n            }\n            \n        })\n\n\n        /* SetTkn({\n            File:(files)\n        }) */\n        /* console.log(e.target.files)\n        console.log(Tkn.File) */\n        console.log(Tkn)\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        \n        console.log(Tkn)\n\n\n        \n        const client = Client.forTestnet();\n        client.setOperator(H, NPrKey);\n\n\n        const transaction = await new TokenCreateTransaction()\n                        .setTokenName(Tkn.Name)\n                        .setTokenSymbol(Tkn.Sym)\n                        .setTreasuryAccountId(H)\n                        .setInitialSupply(Tkn.Amt)\n                        .execute(client);\n       \n        console.log(transaction)\n\n            \n        //Get the receipt of the transaction\n        const receipt = await transaction.getReceipt(client);\n\n        //Get the token ID from the receipt\n        const tokenId = receipt.tokenId;\n\n\n\n        console.log(tokenId)\n\n\n        console.log(\"The new token ID is \" + tokenId);\n        SetTkn({\n            TknId:(tokenId.toString())\n        })\n       \n\n        firebase\n          .firestore()\n          .collection(\"Tickets\")\n          .doc(tokenId.toString())\n          .set({\n            Name: Tkn.Name,\n            Symbol: Tkn.Sym,\n            Amount: Tkn.Amt,\n            Description: Tkn.Desc,\n            Price: Tkn.Price,\n            TokenId: tokenId.toString(),\n            Creator: NPblKey.toString(),\n            Skylink: File,\n            PRK: NPrKey.toString(),\n          })\n          .then(() => {\n            console.log(\"Document successfully written!\");\n          })\n          .catch((error) => {\n            console.error(\"Error writing document: \", error);\n          });\n\n        /* firebase\n          .firestore()\n          .collection(\"User\")\n          .doc(publicKey)\n          .set({\n            CreateTickets: tokenId.toString(),\n          })\n          .then(() => {\n            console.log(\"Document successfully written!\");\n          })\n          .catch((error) => {\n            console.error(\"Error writing document: \", error);\n          });\n        firebase\n          .firestore()\n          .collection(\"User\")\n          .doc(publicKey)\n          .update({\n            CreateTickets: firebase.firestore.FieldValue.arrayUnion(tokenId.toString()),\n          })\n          .then(() => {\n            console.log(\"Document successfully written!\");\n          })\n          .catch((error) => {\n            console.error(\"Error writing document: \", error);\n          });\n */\n        /* const TicketsRef = firebase.database().ref(\"Tick\");\n        firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\n        const Tick = {\n                Name:Tkn.Name,\n                Symbol:Tkn.Sym,\n                Amount:Tkn.Amt,\n                Description:Tkn.Desc,\n                TokenId:(tokenId.toString()),\n                Creator:PblKey,\n        }\n        TicketsRef.push(Tick); */\n\n        \n        \n        SetTkn({\n            Name:\"\",\n            Sym:\"\",\n            Desc:\"\",\n            Amt:\"\",\n            Price:\"\",\n            \n        });\n\n        SetFile(\"\");\n       \n    }\n\n    const Nft = async (e) => {\n        e.preventDefault();\n\n        console.log(Tkn)\n\n        const client = Client.forTestnet();\n        client.setOperator(H, NPrKey);\n        \n\n        const transaction = await new TokenCreateTransaction()\n              .setTokenName(Tkn.Name)\n              .setTokenSymbol(File)\n              .setTreasuryAccountId(H)\n              .setInitialSupply(1)\n              .freezeWith(client);\n\n           /*  console.log(\n              transaction.transactionId.validStart.seconds.toString()\n            ); */\n            \n            //Get the receipt of the transaction\n\n            const txn = await transaction.sign(NPrKey);\n            \n\n            const signtxn = await txn.execute(client);\n            console.log(txn)\n\n            const receipt = await signtxn.getReceipt(client);\n            \n            //Get the token ID from the receipt\n            const tokenId = receipt.tokenId;\n\n            console.log(tokenId.toString()); \n\n\n\n            firebase\n              .firestore()\n              .collection(\"NFT\")\n              .doc(tokenId.toString())\n              .set({\n                Name: Tkn.Name,\n                Symbol: File,\n                Amount: 1,\n                Description:\n                  Tkn.Desc +\n                  \" link to doc is as follows - \" +\n                  `https://siasky.net/${File}`,\n                Price: Tkn.Price,\n                TokenId: tokenId.toString(),\n                Creator: NPblKey.toString(),\n                Skylink: File,\n                PRK: NPrKey.toString(),\n              })\n              .then(() => {\n                console.log(\"Document successfully written!\");\n              })\n              .catch((error) => {\n                console.error(\"Error writing document: \", error);\n              });\n\n\n\n\n\n            SetTkn({\n              Name: \"\",\n              Sym: \"\",\n              Desc: \"\",\n              Amt: \"\",\n              Price: \"\",\n            });\n\n    }\n\n    const Dnft = async (e) => {\n        e.preventDefault();\n\n        console.log(Tkn)\n\n\n        const client = Client.forTestnet();\n        client.setOperator(H, NPrKey);\n\n        const transaction = new TopicCreateTransaction().setSubmitKey(NPrKey);\n\n        //Sign with the client operator private key and submit the transaction to a Hedera network\n        const txResponse = await transaction.execute(client);\n\n        //Request the receipt of the transaction\n        const receipt = await txResponse.getReceipt(client);\n\n        //Get the topic ID\n        const newTopicId = receipt.topicId;\n\n        console.log(newTopicId.toString())\n\n        const l = await new TopicMessageSubmitTransaction({\n          topicId: newTopicId,\n          message: `https://siasky.net/${File}`,\n        }).execute(client);\n\n\n\n\n        const loltxn = await new TokenCreateTransaction()\n          .setTokenName(Tkn.Name)\n          .setTokenSymbol(newTopicId.toString())\n          .setTreasuryAccountId(H)\n          .setInitialSupply(Tkn.Amt)\n          .freezeWith(client);\n\n        \n\n        //Get the receipt of the transaction\n\n        const txn = await loltxn.sign(PrivateKey.fromString(NPrKey));\n\n        const signtxn = await txn.execute(client);\n        console.log(txn);\n\n        const lolreceipt = await signtxn.getReceipt(client);\n\n        //Get the token ID from the receipt\n        const tokenId = lolreceipt.tokenId;\n\n        console.log(tokenId.toString());\n\n        firebase\n          .firestore()\n          .collection(\"DNFT\")\n          .doc(tokenId.toString())\n          .set({\n            Name: Tkn.Name,\n            Symbol: newTopicId.toString(),\n            Amount: Tkn.Amt,\n            Description:\n              Tkn.Desc +\n              \" link to doc is as follows - \" +\n              `https://siasky.net/${File}`,\n            Price: Tkn.Price,\n            TokenId: tokenId.toString(),\n            Creator: NPblKey.toString(),\n            Skylink: File,\n            PRK: NPrKey.toString(),\n          })\n          .then(() => {\n            console.log(\"Document successfully written!\");\n          })\n          .catch((error) => {\n            console.error(\"Error writing document: \", error);\n          });\n\n        SetTkn({\n          Name: \"\",\n          Sym: \"\",\n          Desc: \"\",\n          Amt: \"\",\n          Price: \"\",\n        });\n\n        SetFile(\"\");\n\n\n    }\n\n\n    const file = async (e) => {\n\n\n        /* SetFile(e.target.files[0]); */\n        const cl = new SkynetClient(\"https://siasky.net/\");\n        console.log(File)\n        console.log(cl)\n        \n        \n        const sl = await cl.uploadFile(e.target.files[0]);\n        console.log(sl)\n        console.log('https://siasky.net/' + sl.skylink.substring(4))\n        alert('File uploaded')\n        \n\n        SetFile(sl.skylink.substring(4))\n        console.log(File)\n        \n    }\n\n    return (\n      <div className=\"bb\">\n        <div className=\"kl\">\n          <fieldset>\n          {/* <h2>{prKey}</h2> */}\n            <Form>\n              <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\n                <Form.Label id=\"lo\" column sm={2}>\n                  Name of the Token\n                </Form.Label>\n                <Col sm={10}>\n                  <Form.Control\n                    name=\"Name\"\n                    id=\"fc\"\n                    onChange={inputEvent}\n                    type=\"text\"\n                    value={Tkn.Name}\n                    placeholder=\"Name\"\n                  />\n                </Col>\n              </Form.Group>\n\n              {/* <Form.Group as={Row} controlId=\"formHorizontalPassword\">\n                    <Form.Label column sm={2}>\n                    Password\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control type=\"password\" placeholder=\"Password\" />\n                    </Col>\n                </Form.Group> */}\n\n              <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\n                <Form.Label id=\"lo\" column sm={2}>\n                  Symbol\n                </Form.Label>\n                <Col sm={10}>\n                  <Form.Control\n                    name=\"Sym\"\n                    id=\"fc\"\n                    onChange={inputEvent}\n                    type=\"text\"\n                    value={Tkn.Sym}\n                    placeholder=\"Symbol (Not for NFT)\"\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\n                <Form.Label id=\"lo\" column sm={2}>\n                  Description\n                </Form.Label>\n                <Col sm={10}>\n                  <Form.Control\n                    name=\"Desc\"\n                    id=\"fc\"\n                    onChange={inputEvent}\n                    type=\"text\"\n                    value={Tkn.Desc}\n                    placeholder=\"Description\"\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\n                <Form.Label id=\"lo\" column sm={2}>\n                  Amount\n                </Form.Label>\n                <Col sm={10}>\n                  <Form.Control\n                    name=\"Amt\"\n                    id=\"fc\"\n                    onChange={inputEvent}\n                    type=\"text\"\n                    value={Tkn.Amt}\n                    placeholder=\"Amount (Not for NFT)\"\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\n                <Form.Label id=\"lo\" column sm={2}>\n                  Price\n                </Form.Label>\n                <Col sm={10}>\n                  <Form.Control\n                    name=\"Price\"\n                    id=\"fc\"\n                    onChange={inputEvent}\n                    type=\"text\"\n                    value={Tkn.Price}\n                    placeholder=\"Price\"\n                  />\n                </Col>\n              </Form.Group>\n\n              {/* <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                    <Form.Label column sm={2}>\n                    Public Address\n                    </Form.Label>\n                    <Col sm={10}>\n                    <Form.Control onChange={inputEvent} type=\"text\" value={Tkn.PbAdd} placeholder=\"Public Address\" />\n                    </Col>\n                </Form.Group> */}\n\n              <Form.Group>\n                <Form.Label id=\"lo\" column sm={2}>\n                  Insert_File\n                </Form.Label>\n                <Form.File name=\"File\" onChange={file} id=\"FormControlFile\" />\n              </Form.Group>\n              <>\n                {/* <Form.Group as={Row}>\n                    <Form.Label className=\"gf\" as=\"legend\" column sm={2}>\n                        Type of Token\n                    </Form.Label>\n                    <Col id=\"jh\" s<Button  id=\"bt\" className=\"bt1\" onClick={Nft} variant=\"contained\" color=\"primary\" type=\"submit\" >NFT</Button>m={10}>\n                        <Form.Check\n                        type=\"radio\"\n                        label=\"Normal Token\"\n                        name=\"formHorizontalRadios\"\n                        id=\"formHorizontalRadios1\"\n                        />\n                        <Form.Check\n                        type=\"radio\"\n                        label=\"NFT \"\n                        name=\"formHorizontalRadios\"\n                        id=\"formHorizontalRadios2\"\n                        />\n                    </Col>\n                    </Form.Group> */}\n              </>\n              {/* <Form.Group as={Row} controlId=\"formHorizontalCheck\">\n                    <Col sm={{ span: 10, offset: 2 }}>\n                    <Form.Check label=\"Remember me\" />\n                    </Col>\n                </Form.Group> */}\n\n              <Form.Group as={Row}>\n                <Col sm={{ span: 10, offset: 2 }}>\n                  <Button\n                    id=\"bt\"\n                    onClick={onSubmit}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"submit\"\n                  >\n                    Create\n                  </Button>\n                  <Button\n                    id=\"bt\"\n                    className=\"bt1\"\n                    onClick={Nft}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"submit\"\n                  >\n                    NFT\n                  </Button>\n                  <Button\n                    id=\"bt\"\n                    className=\"bt1\"\n                    onClick={Dnft}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    type=\"submit\"\n                  >\n                    DNFT\n                  </Button>\n                </Col>\n              </Form.Group>\n            </Form>\n          </fieldset>\n        </div>\n      </div>\n    );\n}","/home/juuzou/Documents/hello/Khazana/tickets/src/hooks/useKey.js",["146","147"],"import {useState} from 'react'\n\n\nexport default function useKey(initialValue) {\n    const [C , SetC] = useState(initialValue)\n\n    const a = (Key) => {\n        return [...C,Key]\n    }\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/component/TicketCard.js",["148","149","150","151","152","153","154","155"],"import React , {useEffect} from 'react'\nimport { Card, Form, ResponsiveEmbed } from \"react-bootstrap\";\nimport { Button, Input } from \"@material-ui/core\";\nimport {\n  Client,\n  TransferTransaction,\n  TokenAssociateTransaction,\n  PrivateKey,\n} from \"@hashgraph/sdk\";\nimport { QRCode } from \"react-qr-svg\";\nimport seedrandom from 'seedrandom';\n\n/* const SellerAccId = \"0.0.301906\";\nconst SellerPblKey =\n  \"0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\nconst SellerPrKey =\n  \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\"; */\n\n\n  \n\n  \n\n  \n\n  export default function TicketCard(props) {\n\n    \n      // const now = new Date();\n      // console.log(now.getMinutes()); \n\n    var a = props.T.slice(0,10);\n    var b = props.T.slice(11);\n    return (\n      <div className=\"cardlist\">\n        <Card className=\"gh\" style={{ width: \"18rem\" }}>\n          {/* <Card.Img className=\"pic\" variant=\"top\" src={props.T.poster} /> */}\n          <QRCode\n            \n            bgColor=\"#FFFFFF\"\n            fgColor=\"#000000\"\n            level=\"Q\"\n            style={{ width: 256, justify: \"center\", margin: 16 }}\n            value={a}\n          />\n          <Card.Body id=\"cb\">\n            <Card.Title className=\"kl\">{props.T.title}</Card.Title>\n            <Card.Text className=\"gg\">\n              <strong>Description: </strong> {a}\n            </Card.Text>\n            <Card.Text id=\"gl\">Price : {b}</Card.Text>\n\n            <Input className=\"op\" placeholder=\"Transfer To\"></Input>\n\n            <Button id=\"jj\" variant=\"contained\" color=\"primary\">\n              Transfer\n            </Button>\n            <Button id=\"jk\" variant=\"contained\" color=\"primary\">\n              Sell\n            </Button>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/utils/firebase.js",[],"/home/juuzou/Documents/hello/Khazana/tickets/src/component/NFTCard.js",["156","157","158","159","160","161"],"import React, { useState } from \"react\";\nimport { Card, OverlayTrigger, Tooltip, Image } from \"react-bootstrap\";\nimport { Button } from \"@material-ui/core\";\nimport {\n  Client,\n  TransferTransaction,\n  TokenAssociateTransaction,\n  PrivateKey,\n} from \"@hashgraph/sdk\";\n\nconst SellerAccId = \"0.0.301906\";\nconst SellerPblKey =\n  \"0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\nconst SellerPrKey =\n  \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\n\nconst tokenId = \"0.0.303341\";\n\nconst accountId = \"0.0.303460\";\nconst publicKey =\n  \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\";\nconst privateKey =\n  \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\n\nlet a;\nexport default function NFTCard(props) {\n  \n  \n   /*  const [Numb, SetNumb] = useState(\"\"); */\n\n  /* const numb = async (e) => {\n    a = e.target.value;\n    console.log(a);\n    SetNumb(e.target.value);\n    console.log(Numb);\n    console.log(props.K.TokenId);\n  }; */\n\n  const buy = async () => {\n    const client = Client.forTestnet();\n    client.setOperator(SellerAccId, SellerPrKey);\n\n    const transaction = await new TokenAssociateTransaction()\n      .setAccountId(accountId)\n      .setTokenIds([props.K.TokenId])\n      .freezeWith(client);\n\n    //Sign with the private key of the account that is being associated to a token\n    const signTx = await transaction.sign(PrivateKey.fromString(privateKey));\n\n    //Submit the transaction to a Hedera network\n    const txResponse = await signTx.execute(client);\n\n    //Request the receipt of the transaction\n    const receipt = await txResponse.getReceipt(client);\n\n    //Get the transaction consensus status\n    const transactionStatus = receipt.status;\n\n    console.log(\n      \"The transaction consensus status \" + transactionStatus.toString()\n    );\n\n    const tx = await new TransferTransaction()\n      .addTokenTransfer(props.K.TokenId, SellerAccId, -1)\n      .addTokenTransfer(props.K.TokenId, accountId, 1)\n      .freezeWith(client);\n\n    //Sign with the sender account private key\n    const sign = await tx.sign(PrivateKey.fromString(SellerPrKey));\n\n    //Sign with the client operator private key and submit to a Hedera network\n    const txResponse1 = await sign.execute(client);\n\n    //Request the receipt of the transaction\n    const receipt1 = await txResponse1.getReceipt(client);\n\n    //Obtain the transaction consensus status\n    const transactionStatus1 = receipt1.status;\n\n    console.log(\n      \"The transaction consensus status \" + transactionStatus1.toString()\n    );\n\n    const txn = await new TransferTransaction()\n      .addHbarTransfer(SellerAccId, (props.K.Price))\n      .addHbarTransfer(accountId, -(props.K.Price))\n\n      .freezeWith(client);\n\n    //Sign with the sender account private key\n    const sign2 = await txn.sign(PrivateKey.fromString(privateKey));\n\n    //Sign with the client operator private key and submit to a Hedera network\n    const txResponse2 = await sign2.execute(client);\n\n    //Request the receipt of the transaction\n    const receipt2 = await txResponse2.getReceipt(client);\n\n    //Obtain the transaction consensus status\n    const transactionStatus2 = receipt2.status;\n\n    console.log(\n      \"The transaction consensus status \" + transactionStatus1.toString()\n    );\n  };\n\n  return (\n    <div id=\"mcc\">\n      <Card id=\"cc\">\n        <Card.Img\n          id=\"pic\"\n          variant=\"top\"\n          src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.F-IJbSlaGkoaH8X5IqBqZgHaHa%26pid%3DApi&f=1\"\n        />\n\n        <Card.Body>\n          <Card.Title id=\"kl\">{props.K.Name}</Card.Title>\n\n          <Card.Text id=\"gg\"> Description: {props.K.Description}</Card.Text>\n          <div id=\"ot\">\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={\n                <Tooltip id=\"button-tooltip-2\">{props.K.Creator}</Tooltip>\n              }\n            >\n              {({ ref, ...triggerHandler }) => (\n                <Button\n                  id=\"bt1\"\n                  variant=\"light\"\n                  {...triggerHandler}\n                  className=\"d-inline-flex align-items-center\"\n                >\n                  <Image\n                    id=\"cim\"\n                    ref={ref}\n                    roundedCircle\n                    src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\"\n                    height=\"20px\"\n                    width=\"20px\"\n                  />\n                  <span className=\"ml-1\">Hover to see Creator</span>\n                </Button>\n              )}\n            </OverlayTrigger>\n            ,\n          </div>\n\n          {/* <Card.Text id=\"gg\">\n                              {props.K.Creator}\n                            </Card.Text> */}\n          <Card.Text id=\"gl\">Amount: {props.K.Amount}</Card.Text>\n          <div id=\"ot\">\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={\n                <Tooltip id=\"button-tooltip-2\">{props.K.Symbol}</Tooltip>\n              }\n            >\n              {({ ref, ...triggerHandler }) => (\n                <Button\n                  id=\"bt1\"\n                  variant=\"light\"\n                  {...triggerHandler}\n                  className=\"d-inline-flex align-items-center\"\n                >\n                  <Image\n                    id=\"cim\"\n                    ref={ref}\n                    roundedCircle\n                    src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\"\n                    height=\"20px\"\n                    width=\"20px\"\n                  />\n                  <span className=\"ml-1\">Hover to see Symbol</span>\n                </Button>\n              )}\n            </OverlayTrigger>\n            ,\n          </div>\n          {/* <Card.Text id=\"gl\">Symbol: {props.K.Symbol }</Card.Text> */}\n          <Card.Text id=\"gl\">Price: {props.K.Price}</Card.Text>\n\n          <div id=\"jkl\">\n            \n            <Button onClick={buy} variant=\"contained\" color=\"primary\">\n              Buy\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/component/Card.js",["162","163","164","165"],"import React , { useState } from \"react\";\nimport { Card, OverlayTrigger, Tooltip, Image } from \"react-bootstrap\";\nimport { Button } from \"@material-ui/core\";\nimport {\n  Client,\n  TransferTransaction,\n  TokenAssociateTransaction,\n  PrivateKey,\n} from \"@hashgraph/sdk\";\n\n\n    const SellerAccId = \"0.0.301906\";\n    const SellerPblKey =\n      \"0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\n    const SellerPrKey =\n      \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\n\n    const tokenId = \"0.0.303341\";\n\n    const accountId = \"0.0.303460\";\n    const publicKey =\n      \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\";\n    const privateKey =\n      \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\n\n    let a\nexport default function Cardl(props) {\n\n    const [Numb, SetNumb] = useState('');\n\n    \n\n    const numb = async (e) => {\n\n        a = e.target.value\n        console.log(a)\n        SetNumb(e.target.value)\n        console.log(Numb)\n        console.log(props.K.TokenId)\n    };\n\n    const buy = async () => {\n\n        \n      const client = Client.forTestnet();\n      client.setOperator(SellerAccId, SellerPrKey);\n\n      const transaction = await new TokenAssociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([props.K.TokenId])\n        .freezeWith(client);\n\n      //Sign with the private key of the account that is being associated to a token\n      const signTx = await transaction.sign(PrivateKey.fromString(privateKey));\n\n      //Submit the transaction to a Hedera network\n      const txResponse = await signTx.execute(client);\n\n      //Request the receipt of the transaction\n      const receipt = await txResponse.getReceipt(client);\n\n      //Get the transaction consensus status\n      const transactionStatus = receipt.status;\n\n      console.log(\n        \"The transaction consensus status \" + transactionStatus.toString()\n      );\n\n      const tx = await new TransferTransaction()\n        .addTokenTransfer(props.K.TokenId, SellerAccId, -(Numb))\n        .addTokenTransfer(props.K.TokenId, accountId, (Numb))\n        .freezeWith(client);\n\n      //Sign with the sender account private key\n      const sign = await tx.sign(PrivateKey.fromString(SellerPrKey));\n\n      //Sign with the client operator private key and submit to a Hedera network\n      const txResponse1 = await sign.execute(client);\n\n      //Request the receipt of the transaction\n      const receipt1 = await txResponse1.getReceipt(client);\n\n      //Obtain the transaction consensus status\n      const transactionStatus1 = receipt1.status;\n\n      console.log(\n        \"The transaction consensus status \" + transactionStatus1.toString()\n      );\n\n      const txn = await new TransferTransaction()\n        .addHbarTransfer(SellerAccId, (Numb)*(props.K.Price))\n        .addHbarTransfer(accountId, -((props.K.Price)*(Numb)))\n\n        .freezeWith(client);\n\n      //Sign with the sender account private key\n      const sign2 = await txn.sign(PrivateKey.fromString(privateKey));\n\n      //Sign with the client operator private key and submit to a Hedera network\n      const txResponse2 = await sign2.execute(client);\n\n      //Request the receipt of the transaction\n      const receipt2 = await txResponse2.getReceipt(client);\n\n      //Obtain the transaction consensus status\n      const transactionStatus2 = receipt2.status;\n\n      console.log(\n        \"The transaction consensus status \" + transactionStatus1.toString()\n      );\n\n\n      SetNumb('');\n    };\n\n\n\n  return (\n    <div id=\"mcc\">\n      <Card id=\"cc\">\n        <Card.Img\n          id=\"pic\"\n          variant=\"top\"\n          src={`https://siasky.net/${props.K.Skylink}`}\n        />\n        <Card.Body>\n          <Card.Title id=\"kl\">{props.K.Name}</Card.Title>\n\n          <Card.Text id=\"gg\"> Description: {props.K.Description}</Card.Text>\n          <div id=\"ot\">\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={<Tooltip id=\"button-tooltip-2\">{props.K.Creator}</Tooltip>}\n            >\n              {({ ref, ...triggerHandler }) => (\n                <Button\n                  id=\"bt1\"\n                  variant=\"light\"\n                  {...triggerHandler}\n                  className=\"d-inline-flex align-items-center\"\n                >\n                  <Image\n                    id=\"cim\"\n                    ref={ref}\n                    roundedCircle\n                    src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\"\n                    height=\"20px\"\n                    width=\"20px\"\n                  />\n                  <span className=\"ml-1\">Hover to see Creator</span>\n                </Button>\n              )}\n            </OverlayTrigger>\n            ,\n          </div>\n\n          {/* <Card.Text id=\"gg\">\n                              {props.K.Creator}\n                            </Card.Text> */}\n          <Card.Text id=\"gl\">Amount: {props.K.Amount}</Card.Text>\n          <Card.Text id=\"gl\">Price: {props.K.Price}</Card.Text>\n          <div id=\"jkl\">\n            <input\n              value={Numb}\n              onChange={numb}\n              id=\"in\"\n              type=\"number\"\n              placeholder=\"Number of Ticket\"\n            ></input>\n            <Button onClick={buy} variant=\"contained\" color=\"primary\">\n              Buy\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/DNFT.js",["166","167"],"import React, { useState, useEffect } from \"react\";\nimport firebase from \"../utils/firebase\";\nimport DNFTCard from \"../component/DNFTCard\";\nimport \"./Event.css\";\n\nexport default function DNFT() {\n  const [K, SetK] = useState([]);\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"DNFT\")\n      .onSnapshot((snapshot) => {\n        SetK(snapshot.docs.map((doc) => doc.data()));\n\n        console.log(K);\n      });\n  }, []);\n\n  return (\n    <div id=\"hh\">\n      {K.map((K, index) => (\n        <>\n          <DNFTCard K={K} />\n        </>\n      ))}\n    </div>\n  );\n}\n\n{\n  /* <div className=\"hh\">\n            {event.map((event, index) => \n                    <>\n                      <div className=\"cardlist\">    \n                      <Card className=\"gh\" style={{ width: '18rem' }}>\n                        <Card.Img className =\"pic\" variant=\"top\" src={event.poster} />\n                        <Card.Body>\n                            <Card.Title className=\"kl\">{event.title}</Card.Title>\n                            <Card.Text className=\"gg\">\n                            Some quick example text to build on the card title and make up the bulk of\n                            the card's content.\n                            </Card.Text>\n                            <Card.Text className=\"gl\">{event.amount}</Card.Text>\n                            <Button onClick={buy} id=\"jkl\" variant=\"contained\" color=\"primary\">Buy</Button>\n                        </Card.Body>\n                        </Card>\n                      </div>  \n                    </>\n                )}\n        </div> */\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/component/DNFTCard.js",["168","169","170","171"],"import React, { useState } from \"react\";\nimport { Card, OverlayTrigger, Tooltip, Image } from \"react-bootstrap\";\nimport { Button } from \"@material-ui/core\";\nimport {\n  Client,\n  TransferTransaction,\n  TokenAssociateTransaction,\n  PrivateKey,\n} from \"@hashgraph/sdk\";\n\nconst SellerAccId = \"0.0.301906\";\nconst SellerPblKey =\n  \"0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\nconst SellerPrKey =\n  \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\n\nconst tokenId = \"0.0.303341\";\n\nconst accountId = \"0.0.303460\";\nconst publicKey =\n  \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\";\nconst privateKey =\n  \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\n\nlet a;\nexport default function DNFTCard(props) {\n   const [Numb, SetNumb] = useState(\"\");\n\n  const numb = async (e) => {\n    a = e.target.value;\n    console.log(a);\n    SetNumb(e.target.value);\n    console.log(Numb);\n    \n  };\n\n  const buy = async () => {\n    const client = Client.forTestnet();\n    client.setOperator(SellerAccId, SellerPrKey);\n\n    const transaction = await new TokenAssociateTransaction()\n      .setAccountId(accountId)\n      .setTokenIds([props.K.TokenId])\n      .freezeWith(client);\n\n    //Sign with the private key of the account that is being associated to a token\n    const signTx = await transaction.sign(PrivateKey.fromString(privateKey));\n\n    //Submit the transaction to a Hedera network\n    const txResponse = await signTx.execute(client);\n\n    //Request the receipt of the transaction\n    const receipt = await txResponse.getReceipt(client);\n\n    //Get the transaction consensus status\n    const transactionStatus = receipt.status;\n\n    console.log(\n      \"The transaction consensus status \" + transactionStatus.toString()\n    );\n\n    const tx = await new TransferTransaction()\n      .addTokenTransfer(props.K.TokenId, SellerAccId, -(Numb))\n      .addTokenTransfer(props.K.TokenId, accountId, (Numb))\n      .freezeWith(client);\n\n    //Sign with the sender account private key\n    const sign = await tx.sign(PrivateKey.fromString(SellerPrKey));\n\n    //Sign with the client operator private key and submit to a Hedera network\n    const txResponse1 = await sign.execute(client);\n\n    //Request the receipt of the transaction\n    const receipt1 = await txResponse1.getReceipt(client);\n\n    //Obtain the transaction consensus status\n    const transactionStatus1 = receipt1.status;\n\n    console.log(\n      \"The transaction consensus status \" + transactionStatus1.toString()\n    );\n\n    const txn = await new TransferTransaction()\n      .addHbarTransfer(SellerAccId, props.K.Price)\n      .addHbarTransfer(accountId, -props.K.Price)\n\n      .freezeWith(client);\n\n    //Sign with the sender account private key\n    const sign2 = await txn.sign(PrivateKey.fromString(privateKey));\n\n    //Sign with the client operator private key and submit to a Hedera network\n    const txResponse2 = await sign2.execute(client);\n\n    //Request the receipt of the transaction\n    const receipt2 = await txResponse2.getReceipt(client);\n\n    //Obtain the transaction consensus status\n    const transactionStatus2 = receipt2.status;\n\n    console.log(\n      \"The transaction consensus status \" + transactionStatus1.toString()\n    );\n  };\n\n  return (\n    <div id=\"mcc\">\n      <Card id=\"cc\">\n        <Card.Img\n          id=\"pic\"\n          variant=\"top\"\n          src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.F-IJbSlaGkoaH8X5IqBqZgHaHa%26pid%3DApi&f=1\"\n        />\n\n        <Card.Body>\n          <Card.Title id=\"kl\">{props.K.Name}</Card.Title>\n\n          <Card.Text id=\"gg\"> Description: {props.K.Description}</Card.Text>\n          <div id=\"ot\">\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={\n                <Tooltip id=\"button-tooltip-2\">{props.K.Creator}</Tooltip>\n              }\n            >\n              {({ ref, ...triggerHandler }) => (\n                <Button\n                  id=\"bt1\"\n                  variant=\"light\"\n                  {...triggerHandler}\n                  className=\"d-inline-flex align-items-center\"\n                >\n                  <Image\n                    id=\"cim\"\n                    ref={ref}\n                    roundedCircle\n                    src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\"\n                    height=\"20px\"\n                    width=\"20px\"\n                  />\n                  <span className=\"ml-1\">Hover to see Creator</span>\n                </Button>\n              )}\n            </OverlayTrigger>\n            ,\n          </div>\n\n          {/* <Card.Text id=\"gg\">\n                              {props.K.Creator}\n                            </Card.Text> */}\n          <Card.Text id=\"gl\">Amount: {props.K.Amount}</Card.Text>\n          <div id=\"ot\">\n            <OverlayTrigger\n              placement=\"bottom\"\n              overlay={\n                <Tooltip id=\"button-tooltip-2\">{props.K.Symbol}</Tooltip>\n              }\n            >\n              {({ ref, ...triggerHandler }) => (\n                <Button\n                  id=\"bt1\"\n                  variant=\"light\"\n                  {...triggerHandler}\n                  className=\"d-inline-flex align-items-center\"\n                >\n                  <Image\n                    id=\"cim\"\n                    ref={ref}\n                    roundedCircle\n                    src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\"\n                    height=\"20px\"\n                    width=\"20px\"\n                  />\n                  <span className=\"ml-1\">Hover to see Symbol</span>\n                </Button>\n              )}\n            </OverlayTrigger>\n            ,\n          </div>\n          {/* <Card.Text id=\"gl\">Symbol: {props.K.Symbol }</Card.Text> */}\n          <Card.Text id=\"gl\">Price: {props.K.Price}</Card.Text>\n\n          <div id=\"jkl\">\n            <input\n              value={Numb}\n              onChange={numb}\n              id=\"in\"\n              type=\"number\"\n              placeholder=\"Number of Ticket\"\n            ></input>\n            <Button onClick={buy} variant=\"contained\" color=\"primary\">\n              Buy\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/Color.js",["172","173","174"],"import React,{useState} from 'react';\nimport './color.css';\nimport { Button } from '@material-ui/core';\nfunction Color() {\n\n  const [r , setR] = useState('00');\n  const [g , setG] = useState('00');\n  const [b , setB] = useState('00');\n  const inputEventR = (e) => {\n    // console.log(e.target.value); \n    setR(e.target.value);\n}\n  const inputEventG = (e) => {\n    // console.log(e.target.value);\n    setG(e.target.value);\n}\n  const inputEventB = (e) => {\n    // console.log(e.target.value); \n    setB(e.target.value);\n}\n \nlocalStorage.setItem(\"r\",r);\nvar r1 = localStorage.getItem(\"r\");\nlocalStorage.setItem(\"g\",g);\nvar g1 = localStorage.getItem(\"g\");\nlocalStorage.setItem(\"b\",b);\nvar b1 = localStorage.getItem(\"b\");\n// console.log(r1);\n\n  /* var red = document.getElementById('red').value;\n   console.log(red);\n  var green = document.getElementById('green').value;\n  var blue = document.getElementById('blue').value; */\n  var color = 'rgb('+r+','+g+','+b+')';\n  console.log(color);\n  /* document.body.style.backgroundColor = color;\n  document.getElementById('oo').style.backgroundColor=color; */\n\n\n  const styleObj = {\n    backgroundColor:color\n  }\n\n// document.getElementById('red').addEventListener('input',myColor);\n// document.getElementById('green').addEventListener('input',myColor);\n// document.getElementById('blue').addEventListener('input',myColor);\n  return (\n    <div id=\"oo\" style={styleObj}>\n      <div className=\"main\">\n        Choose your RGB<h1 id=\"box\">{r},{g},{b}</h1>\n        Red:<input type=\"range\" id=\"red\" onChange={inputEventR} value={r}  min=\"0\" max=\"255\"/>\n        Green:<input type=\"range\" id=\"green\" onChange={inputEventG} value={g}  min=\"0\" max=\"255\"/>\n        Blue:<input type=\"range\" id=\"blue\" onChange={inputEventB} value={b} min=\"0\" max=\"255\"/>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">Make Token</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default Color\n","/home/juuzou/Documents/hello/Khazana/tickets/src/screens/ColorMarket.js",["175","176","177"],"import React , { useState } from \"react\";\nimport { Card, OverlayTrigger, Tooltip, Image } from \"react-bootstrap\";\nimport { Button } from \"@material-ui/core\";\nimport {Color} from \"./Color\"\nimport './ColorMarket.css'\nfunction ColorMarket() {\n  var r1 = localStorage.getItem(\"r1\");\n  var g1 = localStorage.getItem(\"g1\");\n  var b1 = localStorage.getItem(\"b1\");\n  var color = 'rgb('+r1+','+g1+','+b1+')';\n  console.log(g1);\n  return (\n  <div id=\"mcc\">\n    <Card id=\"cc\">\n      <Card.Img\n        id=\"pic3\"\n        variant=\"top\"\n        src=\"https://tse3.mm.bing.net/th?id=OIP.c2Bw7aR6-xwnUu18iftEVwHaF7&pid=Api&P=0&w=201&h=161\"\n      />\n      <Card.Body>\n        <Card.Title id=\"kl\">hello</Card.Title>\n\n        <Card.Text id=\"gg\"> Description: </Card.Text>\n        <div id=\"ot\">\n          <OverlayTrigger\n            placement=\"bottom\"\n            overlay={<Tooltip id=\"button-tooltip-2\">Create</Tooltip>}\n          >\n            {({ ref, ...triggerHandler }) => (\n              <Button\n                id=\"bt1\"\n                variant=\"light\"\n                {...triggerHandler}\n                className=\"d-inline-flex align-items-center\"\n              >\n                <Image\n                  id=\"cim\"\n                  ref={ref}\n                  roundedCircle\n                  src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\"\n                  height=\"20px\"\n                  width=\"20px\"\n                />\n                <span className=\"ml-1\">Hover to see Creator</span>\n              </Button>\n            )}\n          </OverlayTrigger>\n          ,\n        </div>\n\n        {/* <Card.Text id=\"gg\">\n                            {props.K.Creator}\n                          </Card.Text> */}\n        <Card.Text id=\"gl\">Amount: </Card.Text>\n        <Card.Text id=\"gl\">Price:</Card.Text>\n        <div id=\"jkl\">\n          <input\n            // value={Numb}\n            // onChange={numb}\n            id=\"in\"\n            type=\"number\"\n            placeholder=\"Number of Ticket\"\n          ></input>\n          <Button variant=\"contained\" color=\"primary\">\n            Buy\n          </Button>\n        </div>\n      </Card.Body>\n    </Card>\n  </div>\n  )\n}\n\nexport default ColorMarket\n",{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":24,"nodeType":"184","messageId":"185","endLine":1,"endColumn":34},{"ruleId":"182","severity":1,"message":"186","line":4,"column":8,"nodeType":"184","messageId":"185","endLine":4,"endColumn":14},{"ruleId":"187","severity":1,"message":"188","line":56,"column":15,"nodeType":"189","endLine":128,"endColumn":6},{"ruleId":"187","severity":1,"message":"190","line":128,"column":8,"nodeType":"191","endLine":128,"endColumn":10,"suggestions":"192"},{"ruleId":"187","severity":1,"message":"193","line":27,"column":6,"nodeType":"191","endLine":27,"endColumn":8,"suggestions":"194"},{"ruleId":"195","severity":1,"message":"196","line":43,"column":1,"nodeType":"197","messageId":"198","endLine":62,"endColumn":19},{"ruleId":"187","severity":1,"message":"193","line":18,"column":6,"nodeType":"191","endLine":18,"endColumn":8,"suggestions":"199"},{"ruleId":"195","severity":1,"message":"196","line":31,"column":1,"nodeType":"197","messageId":"198","endLine":52,"endColumn":2},{"ruleId":"200","severity":1,"message":"201","line":35,"column":14,"nodeType":"202","endLine":35,"endColumn":107},{"ruleId":"200","severity":1,"message":"201","line":42,"column":14,"nodeType":"202","endLine":42,"endColumn":107},{"ruleId":"200","severity":1,"message":"201","line":55,"column":14,"nodeType":"202","endLine":55,"endColumn":107},{"ruleId":"200","severity":1,"message":"201","line":62,"column":14,"nodeType":"202","endLine":62,"endColumn":107},{"ruleId":"182","severity":1,"message":"203","line":3,"column":20,"nodeType":"184","messageId":"185","endLine":3,"endColumn":30},{"ruleId":"182","severity":1,"message":"204","line":2,"column":9,"nodeType":"184","messageId":"185","endLine":2,"endColumn":12},{"ruleId":"182","severity":1,"message":"205","line":4,"column":65,"nodeType":"184","messageId":"185","endLine":4,"endColumn":74},{"ruleId":"182","severity":1,"message":"206","line":5,"column":15,"nodeType":"184","messageId":"185","endLine":5,"endColumn":20},{"ruleId":"207","severity":1,"message":"208","line":89,"column":51,"nodeType":"209","messageId":"210","endLine":89,"endColumn":52},{"ruleId":"207","severity":1,"message":"208","line":89,"column":89,"nodeType":"209","messageId":"210","endLine":89,"endColumn":90},{"ruleId":"182","severity":1,"message":"183","line":1,"column":15,"nodeType":"184","messageId":"185","endLine":1,"endColumn":25},{"ruleId":"182","severity":1,"message":"211","line":1,"column":18,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"182","severity":1,"message":"203","line":4,"column":10,"nodeType":"184","messageId":"185","endLine":4,"endColumn":20},{"ruleId":"182","severity":1,"message":"212","line":4,"column":23,"nodeType":"184","messageId":"185","endLine":4,"endColumn":31},{"ruleId":"182","severity":1,"message":"211","line":1,"column":30,"nodeType":"184","messageId":"185","endLine":1,"endColumn":38},{"ruleId":"182","severity":1,"message":"213","line":4,"column":3,"nodeType":"184","messageId":"185","endLine":4,"endColumn":9},{"ruleId":"182","severity":1,"message":"214","line":5,"column":3,"nodeType":"184","messageId":"185","endLine":5,"endColumn":25},{"ruleId":"182","severity":1,"message":"205","line":6,"column":3,"nodeType":"184","messageId":"185","endLine":6,"endColumn":12},{"ruleId":"182","severity":1,"message":"203","line":7,"column":3,"nodeType":"184","messageId":"185","endLine":7,"endColumn":13},{"ruleId":"182","severity":1,"message":"215","line":8,"column":3,"nodeType":"184","messageId":"185","endLine":8,"endColumn":25},{"ruleId":"182","severity":1,"message":"216","line":9,"column":3,"nodeType":"184","messageId":"185","endLine":9,"endColumn":32},{"ruleId":"182","severity":1,"message":"205","line":7,"column":3,"nodeType":"184","messageId":"185","endLine":7,"endColumn":12},{"ruleId":"182","severity":1,"message":"217","line":373,"column":15,"nodeType":"184","messageId":"185","endLine":373,"endColumn":16},{"ruleId":"182","severity":1,"message":"218","line":5,"column":16,"nodeType":"184","messageId":"185","endLine":5,"endColumn":20},{"ruleId":"182","severity":1,"message":"219","line":7,"column":11,"nodeType":"184","messageId":"185","endLine":7,"endColumn":12},{"ruleId":"182","severity":1,"message":"220","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"182","severity":1,"message":"221","line":2,"column":16,"nodeType":"184","messageId":"185","endLine":2,"endColumn":20},{"ruleId":"182","severity":1,"message":"222","line":2,"column":22,"nodeType":"184","messageId":"185","endLine":2,"endColumn":37},{"ruleId":"182","severity":1,"message":"213","line":5,"column":3,"nodeType":"184","messageId":"185","endLine":5,"endColumn":9},{"ruleId":"182","severity":1,"message":"223","line":6,"column":3,"nodeType":"184","messageId":"185","endLine":6,"endColumn":22},{"ruleId":"182","severity":1,"message":"224","line":7,"column":3,"nodeType":"184","messageId":"185","endLine":7,"endColumn":28},{"ruleId":"182","severity":1,"message":"203","line":8,"column":3,"nodeType":"184","messageId":"185","endLine":8,"endColumn":13},{"ruleId":"182","severity":1,"message":"225","line":11,"column":8,"nodeType":"184","messageId":"185","endLine":11,"endColumn":18},{"ruleId":"182","severity":1,"message":"211","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":25},{"ruleId":"182","severity":1,"message":"226","line":12,"column":7,"nodeType":"184","messageId":"185","endLine":12,"endColumn":19},{"ruleId":"182","severity":1,"message":"227","line":17,"column":7,"nodeType":"184","messageId":"185","endLine":17,"endColumn":14},{"ruleId":"182","severity":1,"message":"228","line":20,"column":7,"nodeType":"184","messageId":"185","endLine":20,"endColumn":16},{"ruleId":"182","severity":1,"message":"229","line":25,"column":5,"nodeType":"184","messageId":"185","endLine":25,"endColumn":6},{"ruleId":"182","severity":1,"message":"230","line":101,"column":11,"nodeType":"184","messageId":"185","endLine":101,"endColumn":29},{"ruleId":"182","severity":1,"message":"226","line":13,"column":11,"nodeType":"184","messageId":"185","endLine":13,"endColumn":23},{"ruleId":"182","severity":1,"message":"227","line":18,"column":11,"nodeType":"184","messageId":"185","endLine":18,"endColumn":18},{"ruleId":"182","severity":1,"message":"228","line":21,"column":11,"nodeType":"184","messageId":"185","endLine":21,"endColumn":20},{"ruleId":"182","severity":1,"message":"230","line":106,"column":13,"nodeType":"184","messageId":"185","endLine":106,"endColumn":31},{"ruleId":"187","severity":1,"message":"193","line":18,"column":6,"nodeType":"191","endLine":18,"endColumn":8,"suggestions":"231"},{"ruleId":"195","severity":1,"message":"196","line":31,"column":1,"nodeType":"197","messageId":"198","endLine":52,"endColumn":2},{"ruleId":"182","severity":1,"message":"226","line":12,"column":7,"nodeType":"184","messageId":"185","endLine":12,"endColumn":19},{"ruleId":"182","severity":1,"message":"227","line":17,"column":7,"nodeType":"184","messageId":"185","endLine":17,"endColumn":14},{"ruleId":"182","severity":1,"message":"228","line":20,"column":7,"nodeType":"184","messageId":"185","endLine":20,"endColumn":16},{"ruleId":"182","severity":1,"message":"230","line":99,"column":11,"nodeType":"184","messageId":"185","endLine":99,"endColumn":29},{"ruleId":"182","severity":1,"message":"232","line":23,"column":5,"nodeType":"184","messageId":"185","endLine":23,"endColumn":7},{"ruleId":"182","severity":1,"message":"233","line":25,"column":5,"nodeType":"184","messageId":"185","endLine":25,"endColumn":7},{"ruleId":"182","severity":1,"message":"234","line":27,"column":5,"nodeType":"184","messageId":"185","endLine":27,"endColumn":7},{"ruleId":"182","severity":1,"message":"211","line":1,"column":18,"nodeType":"184","messageId":"185","endLine":1,"endColumn":26},{"ruleId":"182","severity":1,"message":"235","line":4,"column":9,"nodeType":"184","messageId":"185","endLine":4,"endColumn":14},{"ruleId":"182","severity":1,"message":"236","line":10,"column":7,"nodeType":"184","messageId":"185","endLine":10,"endColumn":12},"no-native-reassign",["237"],"no-negated-in-lhs",["238"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useKey' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'NPblKey' and 'prKey'. Either include them or remove the dependency array.","ArrayExpression",["239"],"React Hook useEffect has a missing dependency: 'K'. Either include it or remove the dependency array.",["240"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",["241"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'PrivateKey' is defined but never used.","'Box' is defined but never used.","'PublicKey' is defined but never used.","'Image' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'useState' is defined but never used.","'Mnemonic' is defined but never used.","'Client' is defined but never used.","'TokenCreateTransaction' is defined but never used.","'TopicCreateTransaction' is defined but never used.","'TopicMessageSubmitTransaction' is defined but never used.","'l' is assigned a value but never used.","'SetC' is assigned a value but never used.","'a' is assigned a value but never used.","'useEffect' is defined but never used.","'Form' is defined but never used.","'ResponsiveEmbed' is defined but never used.","'TransferTransaction' is defined but never used.","'TokenAssociateTransaction' is defined but never used.","'seedrandom' is defined but never used.","'SellerPblKey' is assigned a value but never used.","'tokenId' is assigned a value but never used.","'publicKey' is assigned a value but never used.","'a' is defined but never used.","'transactionStatus2' is assigned a value but never used.",["242"],"'r1' is assigned a value but never used.","'g1' is assigned a value but never used.","'b1' is assigned a value but never used.","'Color' is defined but never used.","'color' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"245","fix":"247"},{"desc":"245","fix":"248"},"Update the dependencies array to be: [NPblKey, prKey]",{"range":"249","text":"250"},"Update the dependencies array to be: [K]",{"range":"251","text":"252"},{"range":"253","text":"252"},{"range":"254","text":"252"},[3260,3262],"[NPblKey, prKey]",[456,458],"[K]",[433,435],[437,439]]
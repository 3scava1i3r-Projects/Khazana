[{"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\index.js":"1","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\reportWebVitals.js":"2","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\App.js":"3","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Profile.js":"4","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Login.js":"5","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\Header.js":"6","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\LoginContext.js":"7","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Mnemonic.js":"8","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\PrivateKey.js":"9","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Event.js":"10","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\TicketList.js":"11","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\CreateToken.js":"12","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\component\\Card.js":"13","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\utils\\firebase.js":"14","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\component\\TicketCard.js":"15","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\hooks\\useKey.js":"16"},{"size":517,"mtime":1612781184145,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1612781184145,"results":"19","hashOfConfig":"18"},{"size":2126,"mtime":1612873220353,"results":"20","hashOfConfig":"18"},{"size":280,"mtime":1612800495801,"results":"21","hashOfConfig":"18"},{"size":5280,"mtime":1612889166964,"results":"22","hashOfConfig":"18"},{"size":2214,"mtime":1612873834894,"results":"23","hashOfConfig":"18"},{"size":86,"mtime":1612800462881,"results":"24","hashOfConfig":"18"},{"size":1282,"mtime":1612781184151,"results":"25","hashOfConfig":"18"},{"size":1651,"mtime":1612801381897,"results":"26","hashOfConfig":"18"},{"size":1737,"mtime":1612895057613,"results":"27","hashOfConfig":"18"},{"size":3003,"mtime":1612900248387,"results":"28","hashOfConfig":"18"},{"size":12605,"mtime":1612902964993,"results":"29","hashOfConfig":"18"},{"size":5701,"mtime":1612880645839,"results":"30","hashOfConfig":"18"},{"size":503,"mtime":1612781184155,"results":"31","hashOfConfig":"18"},{"size":1460,"mtime":1612961433154,"results":"32","hashOfConfig":"18"},{"size":196,"mtime":1612870467792,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1nvfma0",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"36"},"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\index.js",[],["76","77"],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\reportWebVitals.js",[],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\App.js",["78"],"import React,{useState,useContext} from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as  Router, Switch , Route } from 'react-router-dom';\r\n\r\n\r\n\r\nimport Header from './Header'\r\nimport Login from '../src/screens/Login'\r\nimport PK from '../src/screens/PrivateKey'\r\nimport Mne from '../src/screens/Mnemonic'\r\nimport Event from '../src/screens/Event'\r\nimport TicketList from './screens/TicketList';\r\nimport CreateToken from './screens/CreateToken';\r\nimport Profile from './screens/Profile';\r\nimport {LoginContext} from \"./screens/LoginContext\";\r\n\r\nfunction App() {\r\n  const [showProfile , setshowProfile ] = useState(false);\r\n  const [prKey , setPrKey ] = useState('');\r\n  return (\r\n\r\n    <Router>\r\n      <div className=\"App\">\r\n      <LoginContext.Provider value={{prKey,setPrKey,setshowProfile}}>\r\n      <Switch>\r\n        \r\n        <Route path=\"/create\">\r\n          <Header />\r\n          <CreateToken />\r\n        </Route>\r\n        <Route path=\"/market\">\r\n            <Header />\r\n            <Event />\r\n            \r\n          </Route>\r\n          \r\n        <Route path=\"/ticket\">\r\n          <Header />\r\n          <TicketList />\r\n            \r\n        </Route>\r\n\r\n   \r\n          <Route path=\"/Mnemonic\">\r\n            <Mne />\r\n          </Route>\r\n\r\n          <Route path=\"/checkout\">\r\n            <Header />\r\n            <h1>hhhhhhhhhhhhhhh</h1>\r\n          </Route>\r\n          <Route path=\"/profile\">\r\n            \r\n             <Header/>\r\n             <Profile/>\r\n            \r\n            \r\n          </Route>\r\n          <Route path=\"/login\">\r\n            \r\n            \r\n             <Login/>\r\n            \r\n            \r\n          </Route>\r\n          <Route path=\"/privateKey\">\r\n            \r\n             <Header/>\r\n             \r\n             {showProfile ? <Profile />:<PK />}\r\n             \r\n            \r\n          </Route>\r\n          \r\n          <Route path=\"/sell\"></Route>\r\n\r\n          <Route path=\"/\">\r\n            <Header />\r\n            <h1>home page</h1>\r\n          </Route>\r\n          \r\n        </Switch>\r\n       </LoginContext.Provider>\r\n      </div>\r\n    </Router>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Profile.js",[],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Login.js",["79","80","81","82","83"],"import React from 'react';\r\nimport {Box ,Button} from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { PrivateKey , Client , Hbar , AccountCreateTransaction, PublicKey } from '@hashgraph/sdk';\r\nimport { Card,Image } from \"react-bootstrap\";\r\nimport firebase from '../utils/firebase';\r\n\r\nimport './Login.css'\r\n\r\n\r\nexport default function Login() {\r\n\r\n\r\n    const myAccountId = \"0.0.303460\";\r\n    const myPrivateKey =\r\n      \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\r\n\r\n    const al = async () => {\r\n\r\n        const client = Client.forTestnet();\r\n        client.setOperator(myAccountId, myPrivateKey);\r\n\r\n\r\n        const privateKey = await PrivateKey.generate();\r\n        const publicKey = privateKey.publicKey;\r\n        console.log(\"private = 0x\" + privateKey);\r\n        /* console.log(privateKey.toString()); */\r\n        console.log(\"public = 0x\" + publicKey);\r\n\r\n        const transaction = new AccountCreateTransaction()\r\n                            .setKey(privateKey.publicKey)\r\n                            .setInitialBalance(new Hbar(10))\r\n                            \r\n\r\n        //Sign the transaction with the client operator private key and submit to a Hedera network\r\n        const txResponse = await transaction.execute(client);\r\n\r\n        //Request the receipt of the transaction\r\n        const receipt = await txResponse.getReceipt(client);\r\n\r\n        //Get the account ID\r\n        const newAccountId = receipt.accountId;\r\n\r\n        /* client.setOperator(newAccountId, privateKey); */\r\n\r\n        console.log(\"The new account ID is \" +newAccountId);\r\n\r\n\r\n\r\n\r\n        /* const TicketsRef = firebase.firestore().collection('User');\r\n\r\n\r\n        \r\n        const Tick = {\r\n                Name:Tkn.Name,\r\n                Symbol:Tkn.Sym,\r\n                Amount:Tkn.Amt,\r\n                Description:Tkn.Desc,\r\n                TokenId:(tokenId.toString()),\r\n                Creator:PblKey,\r\n        }\r\n\r\n\r\n        TicketsRef.push(Tick); */\r\n\r\n        \r\n\r\n\r\n        firebase.firestore().collection('User').doc((publicKey.toString())).set({\r\n            \r\n                PbKey:(publicKey.toString()),\r\n                PKey:(privateKey.toString()),\r\n                AccId:(newAccountId.toString()),\r\n                AccTickets:[],\r\n                CreatedTickets:[],\r\n            \r\n        \r\n        })\r\n        .then(() => {\r\n            console.log(\"Document successfully written!\");\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n\r\n\r\n        alert(\"PrivateKey = 0x\" + privateKey +'  '+ \"PublicKey = 0x\" + publicKey + '  ' + 'Account Id = ' + newAccountId)\r\n    }\r\n    return (\r\n      \r\n      <div id=\"te\"> <h1>LOGIN</h1> \r\n        <div className=\"screen\">\r\n              \r\n            \r\n{/*         <Button className =\"f\" variant=\"info\" >Login with Private Key</Button>{' '}\r\n            <Button className =\"f\" variant=\"success\"  >Login with Mnemonic</Button>{' '}\r\n            <Button className =\"f\" variant=\"primary\"  >Make an Account</Button>{' '}  */}  \r\n\r\n            <Card id=\"ll\">\r\n                <Card.Img variant=\"top\" id=\"pi\" src=\"https://dtkp6g0samjql.cloudfront.net/uploads/photo/file/18285029/9c309160-e144-41d0-b6ae-2fc92328df64.png\" />\r\n                    <Card.Body>\r\n                    <Card.Title>Login With:</Card.Title>\r\n                    <Link id=\"pl\" to=\"/privatekey\">\r\n                     <Button id=\"jl\" variant=\"contained\" color=\"primary\">Private Key</Button>\r\n                    </Link>\r\n                    </Card.Body>\r\n            </Card>\r\n            <Card  id=\"ll\">\r\n                <Card.Img variant=\"top\" id=\"pi\" src=\"https://dtkp6g0samjql.cloudfront.net/uploads/photo/file/18285029/9c309160-e144-41d0-b6ae-2fc92328df64.png\" />\r\n                    <Card.Body>\r\n                    <Card.Title style={{color:\"white\",fontSize:\"small\",fontFamily:\"monospace\"}}>Login With:</Card.Title>\r\n    \r\n                    <Link id=\"pl\" to=\"/mnemonic\">\r\n                      <Button id=\"jl\" variant=\"contained\" color=\"primary\">Mnemonic</Button>\r\n                    </Link>\r\n                     \r\n                    </Card.Body>\r\n            </Card>\r\n            <Card  id=\"ll\" >\r\n                <Card.Img variant=\"top\" id=\"pi\" src=\"https://dtkp6g0samjql.cloudfront.net/uploads/photo/file/18285029/9c309160-e144-41d0-b6ae-2fc92328df64.png\" />\r\n                    <Card.Body>\r\n                    <Card.Title>Login With:</Card.Title>\r\n\r\n                     <Button onClick={al} id=\"jl\" variant=\"contained\"color=\"primary\">Make an Account</Button>\r\n                    </Card.Body>\r\n            </Card>\r\n\r\n            {/* <Link id=\"pl\" to=\"/privatekey\">\r\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Private Key</Button>\r\n            </Link>\r\n\r\n            <Link id=\"pl\" to=\"/mnemonic\">\r\n                <Button id=\"jl\" variant=\"contained\" color=\"secondary\">Login with Mnemonic</Button>\r\n            </Link>    \r\n            \r\n            \r\n            <Button onClick={al} id=\"jl\" variant=\"contained\" color=\"secondary\">Make an Account</Button> */}\r\n            \r\n            \r\n\r\n       \r\n            \r\n        </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\Header.js",[],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\LoginContext.js",[],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Mnemonic.js",["84"],"import React , { useState } from 'react'\r\nimport {Box , Button } from '@material-ui/core'\r\nimport { Mnemonic, PrivateKey } from '@hashgraph/sdk'\r\n\r\n\r\nimport './PrivateKey.css'\r\n\r\n\r\n\r\nexport default function Mne() {\r\n\r\n    const [Mn , SetMn ] = useState('');\r\n    \r\n\r\n    const inputEvent = (e) => {\r\n        console.log(e.target.value);\r\n        SetMn(e.target.value)\r\n    }\r\n\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const mnemonic = await Mnemonic.fromString(Mn);\r\n        console.log(mnemonic)\r\n        /* const privateKey = PrivateKey.fromMnemonic(Mn); */\r\n        const privateKey = await mnemonic.toPrivateKey();\r\n        console.log(privateKey);\r\n        const publicKey = privateKey.publicKey;\r\n        console.log(publicKey.toString());\r\n        SetMn('');\r\n       \r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"screen\">\r\n            <form >\r\n                <Box className =\"box\" component=\"div\" m={1}>\r\n                <input onChange={inputEvent} type=\"text\" className=\"pkinput\" value={Mn}/>\r\n                <Button onClick={onSubmit} type=\"submit\" className =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login with Mnemonic Phrase</Button>\r\n                </Box>\r\n            </form>\r\n        </div>\r\n        \r\n    )\r\n}\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\PrivateKey.js",["85","86","87"],"import React , { useState,useContext } from 'react'\r\nimport {Box , Button } from '@material-ui/core'\r\nimport { PrivateKey , Mnemonic} from '@hashgraph/sdk'\r\nimport {LoginContext} from \"./LoginContext\";\r\n\r\nimport './PrivateKey.css'\r\n\r\n\r\nexport default function PK() {\r\n    \r\n    const {setPrKey,prKey,setshowProfile} = useContext(LoginContext);\r\n    // const [PrKey , SetPrKey ] = useState('');\r\n    \r\n\r\n    const inputEvent = (e) => {\r\n        /* console.log(e.target.value); */\r\n        setPrKey(e.target.value)\r\n    }\r\n\r\n    /* media milk rally thought afford gas monitor close box slow employ marine quality jacket orbit trigger cancel try above weird save prepare snow slim */\r\n    \r\n    \r\n    const onSubmit = async (e) => {\r\n        setshowProfile(true);\r\n        // e.preventDefault();\r\n        // const privateKey = PrivateKey.fromString(PrKey); \r\n        // console.log(privateKey.toString());   \r\n        // const publicKey = privateKey.publicKey;\r\n        // console.log(publicKey.toString());\r\n        // SetPrKey('')\r\n        /* const mnemonic = await Mnemonic.generate(); */\r\n        /* var i;\r\n        for(i=0;i<24;i++){\r\n            console.log(mnemonic.words[i])\r\n        } */\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"screen\">\r\n            \r\n                <Box className =\"box\" component=\"div\" m={1}>\r\n                <input type=\"text\" className=\"pkinput\" onChange={inputEvent} value={prKey}/>\r\n                <Button onClick={onSubmit} type=\"submit\" id =\"l\" variant=\"contained\" color=\"primary\" title=\"hh\">Login with Private Key</Button>\r\n                </Box>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\Event.js",["88","89"],"import React, { useState , useEffect } from 'react'\r\nimport firebase from '../utils/firebase';\r\nimport Cardl from \"../component/Card\";\r\nimport './Event.css'\r\n\r\n   \r\n\r\nexport default function Event() {\r\n\r\n\r\n  const [K , SetK] = useState([]);\r\n  \r\n\r\n  useEffect(() => {\r\n\r\n    firebase.firestore().collection('Tickets').onSnapshot(snapshot => {\r\n      \r\n      SetK(snapshot.docs.map(doc => doc.data()))\r\n      \r\n      \r\n      \r\n      \r\n      console.log(K);\r\n    \r\n    })\r\n    \r\n  }, [])\r\n\r\n    return (\r\n        <div id=\"hh\">\r\n            {K.map((K, index) => \r\n                    <>\r\n                      <Cardl K={K}/>\r\n                    </>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n{/* <div className=\"hh\">\r\n            {event.map((event, index) => \r\n                    <>\r\n                      <div className=\"cardlist\">    \r\n                      <Card className=\"gh\" style={{ width: '18rem' }}>\r\n                        <Card.Img className =\"pic\" variant=\"top\" src={event.poster} />\r\n                        <Card.Body>\r\n                            <Card.Title className=\"kl\">{event.title}</Card.Title>\r\n                            <Card.Text className=\"gg\">\r\n                            Some quick example text to build on the card title and make up the bulk of\r\n                            the card's content.\r\n                            </Card.Text>\r\n                            <Card.Text className=\"gl\">{event.amount}</Card.Text>\r\n                            <Button onClick={buy} id=\"jkl\" variant=\"contained\" color=\"primary\">Buy</Button>\r\n                        </Card.Body>\r\n                        </Card>\r\n                      </div>  \r\n                    </>\r\n                )}\r\n        </div> */}","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\TicketList.js",["90","91","92","93","94"],"import React , {useState , useEffect} from 'react'\r\nimport TicketCard from '../component/TicketCard'\r\nimport firebase from \"../utils/firebase\";\r\nimport useKey from \"../hooks/useKey\"\r\nimport {\r\n  Client,\r\n  AccountBalanceQuery,\r\n} from \"@hashgraph/sdk\";\r\n\r\nimport './TicketList.css'\r\n\r\n\r\nconst SellerAccId = \"0.0.301906\";\r\nconst SellerPblKey =\r\n  \"302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\r\nconst SellerPrKey =\r\n  \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\r\n\r\nlet t;\r\nlet v;\r\n\r\nexport default function TicketList() {\r\n\r\n  const [T, SetT] = useState([]);\r\n  // const [V, SetV] = useState(''); \r\n\r\n  // const [Key, SetKey] = useKey(\"\");\r\n\r\n  \r\n      useEffect( async () => {\r\n          const client = Client.forTestnet();\r\n\r\n          client.setOperator(SellerAccId, SellerPrKey);\r\n\r\n          const query = await new AccountBalanceQuery()\r\n            .setAccountId(SellerAccId)\r\n            .execute(client);\r\n\r\n          const a = query.tokens;\r\n\r\n          for (const [key, value] of a) {\r\n\r\n\r\n            /* console.log(key.toString(), value.toString()); */\r\n\r\n            firebase\r\n              .firestore()\r\n              .collection(\"User\")\r\n              .doc(SellerPblKey)\r\n              .update({\r\n                AccTickets: firebase.firestore.FieldValue.arrayUnion(\r\n                  key.toString() + \":\" + value.toString() + \" \"\r\n                ),\r\n              })\r\n              .then(() => {\r\n                console.log(\"Document successfully written!\");\r\n              })\r\n              .catch((error) => {\r\n                console.error(\"Error writing document: \", error);\r\n              });\r\n\r\n              \r\n            /* SetT(key.toString())\r\n            SetV(value.toString()) */\r\n            /* t = key.toString();\r\n            v = value.toString();\r\n\r\n            \r\n            console.log(t) */\r\n            \r\n          }\r\n\r\n          // firebase\r\n          //   .firestore()\r\n          //   .collection(\"User\")\r\n          //   .doc(SellerPblKey)\r\n          //   .get().then((doc) => {\r\n          //     console.log(doc.data())\r\n          //   })\r\n\r\n\r\n            firebase.firestore().collection('User').doc(SellerPblKey)\r\n            .onSnapshot((doc) => {\r\n\r\n              SetT(doc.data().AccTickets)\r\n              console.log(T)\r\n              console.log(doc.data())\r\n              \r\n              \r\n              doc.data().AccTickets.forEach(function (f) {\r\n                  console.log(f);\r\n                  \r\n              })\r\n              \r\n            }) \r\n    \r\n  }, [])\r\n     \r\n      \r\n      \r\n\r\n  \r\n  return (\r\n           <div className=\"hh\">\r\n            {T.map((T,index) => \r\n                    <>\r\n                        <TicketCard T={T} />  \r\n                        \r\n                    </>\r\n                )}\r\n        </div> \r\n\r\n          // <>\r\n          //   <div><TicketCard T={T} /></div>\r\n          // </> \r\n        );\r\n  \r\n    \r\n}\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\screens\\CreateToken.js",["95","96","97","98"],"import React, { useState } from 'react'\r\nimport { Form , Col , Row } from 'react-bootstrap'\r\nimport { Button } from '@material-ui/core'\r\nimport { Client  , TokenCreateTransaction , PublicKey  } from '@hashgraph/sdk';\r\nimport firebase from '../utils/firebase';\r\nimport { SkynetClient } from 'skynet-js'\r\n/* import IPFS from 'ipfs-core' */\r\n\r\n\r\nimport './CreateToken.css'\r\n\r\nexport default function CreateToken() {\r\n\r\n    const AccId = '0.0.301906'\r\n    const PblKey = '302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a';\r\n    const PrKey = '302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4'\r\n\r\n    \r\n    const accountId = '0.0.303460'\r\n    const publicKey = \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\"\r\n    const privateKey = \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\"\r\n\r\n\r\n    const [Tkn , SetTkn] = useState({   \r\n\r\n        Name:\"\",\r\n        Sym:\"\",\r\n        Desc:\"\",\r\n        Amt:\"\",\r\n        Price:\"\",\r\n        PbAdd:\"\",\r\n        TknId:\"\",\r\n        /* File:\"\", */ \r\n\r\n    });\r\n\r\n    const [File , SetFile] = useState('');\r\n\r\n\r\n    const inputEvent = (e) => {\r\n        /* console.log(e.target.value); */\r\n        /* SetTkn(e.target.value) */\r\n\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n        const files = e.target.files;\r\n        \r\n        \r\n        /* console.log(files[0]) */\r\n        \r\n\r\n        /* console.log(name) */\r\n        SetTkn((pv) => {\r\n            if( name === 'Name'){\r\n                return{\r\n                    Name:value,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                    File:pv.File\r\n                }\r\n            }\r\n            else if( name === 'Sym'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:value,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                    File:pv.File\r\n                }\r\n            }\r\n            else if( name === 'Desc'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:value,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                    File:pv.File\r\n                }\r\n            }\r\n            else if( name === 'Amt'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:value,\r\n                    Price:pv.Price,\r\n                    File:pv.File\r\n                }\r\n            }\r\n            else if( name === 'Price'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:value,\r\n                    File:pv.File\r\n                }\r\n            }\r\n            else if( name === 'File'){\r\n                return{\r\n                    Name:pv.Name,\r\n                    Sym:pv.Sym,\r\n                    Desc:pv.Desc,\r\n                    Amt:pv.Amt,\r\n                    Price:pv.Price,\r\n                    File:files[0],\r\n                }\r\n            }\r\n            \r\n        })\r\n\r\n\r\n        /* SetTkn({\r\n            File:(files)\r\n        }) */\r\n        /* console.log(e.target.files)\r\n        console.log(Tkn.File) */\r\n        console.log(Tkn)\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        console.log(Tkn)\r\n\r\n\r\n        \r\n        const client = Client.forTestnet();\r\n        client.setOperator(AccId, PrKey);\r\n\r\n\r\n        const transaction = await new TokenCreateTransaction()\r\n                        .setTokenName(Tkn.Name)\r\n                        .setTokenSymbol(Tkn.Sym)\r\n                        .setTreasuryAccountId(AccId)\r\n                        .setInitialSupply(Tkn.Amt)\r\n                        .execute(client);\r\n       \r\n        console.log(transaction)\r\n\r\n            \r\n        //Get the receipt of the transaction\r\n        const receipt = await transaction.getReceipt(client);\r\n\r\n        //Get the token ID from the receipt\r\n        const tokenId = receipt.tokenId;\r\n\r\n\r\n\r\n        console.log(tokenId)\r\n\r\n\r\n        console.log(\"The new token ID is \" + tokenId);\r\n        SetTkn({\r\n            TknId:(tokenId.toString())\r\n        })\r\n       \r\n\r\n        \r\n        /* const ipfs = new IPFS({host: 'ipfs.infura.io', port: 5001, protocol: 'https'});\r\n        const data = \"Writing a test message on the network\";\r\n        ipfs.add(Tkn.File, (err, hash) => {\r\n            if(err){\r\n                return console.log(err);\r\n            }\r\n            console.log('https://ipfs.infura.io/ipfs/'+hash);\r\n        }) */\r\n\r\n        \r\n\r\n        /* const ipfs = await IPFS.create()\r\n        const { cid } = await ipfs.add(Tkn.File)\r\n        console.info(cid) */\r\n        \r\n\r\n\r\n        firebase.firestore().collection('Tickets').doc(tokenId.toString()).set({\r\n            \r\n            Name:Tkn.Name,\r\n            Symbol:Tkn.Sym,\r\n            Amount:Tkn.Amt,\r\n            Description:Tkn.Desc,\r\n            Price:Tkn.Price,\r\n            TokenId:(tokenId.toString()),\r\n            Creator:PblKey,\r\n            Skylink:File\r\n            \r\n        \r\n        })\r\n        .then(() => {\r\n            console.log(\"Document successfully written!\");\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n\r\n        /* firebase\r\n          .firestore()\r\n          .collection(\"User\")\r\n          .doc(publicKey)\r\n          .set({\r\n            CreateTickets: tokenId.toString(),\r\n          })\r\n          .then(() => {\r\n            console.log(\"Document successfully written!\");\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n          });\r\n        firebase\r\n          .firestore()\r\n          .collection(\"User\")\r\n          .doc(publicKey)\r\n          .update({\r\n            CreateTickets: firebase.firestore.FieldValue.arrayUnion(tokenId.toString()),\r\n          })\r\n          .then(() => {\r\n            console.log(\"Document successfully written!\");\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error writing document: \", error);\r\n          });\r\n */\r\n        /* const TicketsRef = firebase.database().ref(\"Tick\");\r\n        firebase.firestore.FieldValue.arrayUnion(\"greater_virginia\")\r\n        const Tick = {\r\n                Name:Tkn.Name,\r\n                Symbol:Tkn.Sym,\r\n                Amount:Tkn.Amt,\r\n                Description:Tkn.Desc,\r\n                TokenId:(tokenId.toString()),\r\n                Creator:PblKey,\r\n        }\r\n        TicketsRef.push(Tick); */\r\n\r\n        \r\n        \r\n        SetTkn({\r\n            Name:\"\",\r\n            Sym:\"\",\r\n            Desc:\"\",\r\n            Amt:\"\",\r\n            Price:\"\",\r\n            File:\"\"\r\n        });\r\n       \r\n    }\r\n\r\n\r\n    const file = async (e) => {\r\n\r\n\r\n        /* SetFile(e.target.files[0]); */\r\n        const cl = new SkynetClient(\"https://siasky.net/\");\r\n        console.log(File)\r\n        console.log(cl)\r\n        \r\n        \r\n        const sl = await cl.uploadFile(e.target.files[0]);\r\n        console.log(sl)\r\n        console.log('https://siasky.net/' + sl.skylink.substring(4))\r\n        alert('File uploaded')\r\n        \r\n\r\n        SetFile(sl.skylink.substring(4))\r\n        console.log(File)\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"bb\">\r\n            <div className=\"kl\">\r\n            <fieldset>\r\n                <Form>\r\n                 <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                      Name of the Event\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Name\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Name} placeholder=\"Name\" />\r\n                    </Col>\r\n                 </Form.Group>\r\n\r\n                {/* <Form.Group as={Row} controlId=\"formHorizontalPassword\">\r\n                    <Form.Label column sm={2}>\r\n                    Password\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control type=\"password\" placeholder=\"Password\" />\r\n                    </Col>\r\n                </Form.Group> */}\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                    Symbol\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Sym\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Sym} placeholder=\"Symbol\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                    Description\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Desc\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Desc} placeholder=\"Description\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                    Amount\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Amt\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Amt} placeholder=\"Amount\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formHorizontalEmail\" id=\"fo\">\r\n                    <Form.Label id=\"lo\" column sm={2}>\r\n                    Price\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control name=\"Price\" id=\"fc\" onChange={inputEvent} type=\"text\" value={Tkn.Price} placeholder=\"Price\" />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                {/* <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                    <Form.Label column sm={2}>\r\n                    Public Address\r\n                    </Form.Label>\r\n                    <Col sm={10}>\r\n                    <Form.Control onChange={inputEvent} type=\"text\" value={Tkn.PbAdd} placeholder=\"Public Address\" />\r\n                    </Col>\r\n                </Form.Group> */}\r\n\r\n                \r\n\r\n\r\n                <Form.Group>\r\n                   <Form.Label id=\"lo\" column sm={2}>\r\n                     Insert_Image\r\n                    </Form.Label>\r\n                    <Form.File name=\"File\"  onChange={file} id=\"FormControlFile\"/>\r\n                </Form.Group>\r\n                <>\r\n                    {/* <Form.Group as={Row}>\r\n                    <Form.Label className=\"gf\" as=\"legend\" column sm={2}>\r\n                        Type of Token\r\n                    </Form.Label>\r\n                    <Col id=\"jh\" sm={10}>\r\n                        <Form.Check\r\n                        type=\"radio\"\r\n                        label=\"Normal Token\"\r\n                        name=\"formHorizontalRadios\"\r\n                        id=\"formHorizontalRadios1\"\r\n                        />\r\n                        <Form.Check\r\n                        type=\"radio\"\r\n                        label=\"NFT \"\r\n                        name=\"formHorizontalRadios\"\r\n                        id=\"formHorizontalRadios2\"\r\n                        />\r\n                    </Col>\r\n                    </Form.Group> */}\r\n                </>\r\n                {/* <Form.Group as={Row} controlId=\"formHorizontalCheck\">\r\n                    <Col sm={{ span: 10, offset: 2 }}>\r\n                    <Form.Check label=\"Remember me\" />\r\n                    </Col>\r\n                </Form.Group> */}\r\n\r\n                <Form.Group as={Row}>\r\n                    <Col  sm={{ span: 10, offset: 2 }}>\r\n                    <Button  id=\"bt\" onClick={onSubmit} variant=\"contained\" color=\"primary\" type=\"submit\">Create</Button>\r\n                    <Button  id=\"bt\" className=\"bt1\" onClick={onSubmit} variant=\"contained\" color=\"primary\" type=\"submit\" >NFT</Button>\r\n                    </Col>\r\n         \r\n                </Form.Group>\r\n                </Form>\r\n\r\n            </fieldset>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\component\\Card.js",["99","100","101","102"],"import React , { useState } from \"react\";\r\nimport { Card, OverlayTrigger, Tooltip, Image } from \"react-bootstrap\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport {\r\n  Client,\r\n  TransferTransaction,\r\n  TokenAssociateTransaction,\r\n  PrivateKey,\r\n} from \"@hashgraph/sdk\";\r\n\r\n\r\n    const SellerAccId = \"0.0.301906\";\r\n    const SellerPblKey =\r\n      \"0x302a300506032b657003210044c714812aec04be8c2c2704d4f0432f49b2f2b3350aa69fdc9b9715de9a8d9a\";\r\n    const SellerPrKey =\r\n      \"0x302e020100300506032b65700422042092d0f20b0324b71b55bf397a85c214bbb66e98c8869911fb30dd7b6a0d60b7a4\";\r\n\r\n    const tokenId = \"0.0.303341\";\r\n\r\n    const accountId = \"0.0.303460\";\r\n    const publicKey =\r\n      \"302a300506032b65700321002ee57aad815e3597b7815728315e51bf42fbd867e32b9deb40d1f483cfc9ea6e\";\r\n    const privateKey =\r\n      \"302e020100300506032b6570042204201026b742d1ee8cb5a0141652191e0b63ec92719c53ab8ed59d98e6fc8f21ce45\";\r\n\r\n    let a\r\nexport default function Cardl(props) {\r\n\r\n    const [Numb, SetNumb] = useState('');\r\n\r\n    \r\n\r\n    const numb = async (e) => {\r\n\r\n        a = e.target.value\r\n        console.log(a)\r\n        SetNumb(e.target.value)\r\n        console.log(Numb)\r\n        console.log(props.K.TokenId)\r\n    };\r\n\r\n    const buy = async () => {\r\n\r\n        \r\n      const client = Client.forTestnet();\r\n      client.setOperator(SellerAccId, SellerPrKey);\r\n\r\n      const transaction = await new TokenAssociateTransaction()\r\n        .setAccountId(accountId)\r\n        .setTokenIds([props.K.TokenId])\r\n        .freezeWith(client);\r\n\r\n      //Sign with the private key of the account that is being associated to a token\r\n      const signTx = await transaction.sign(PrivateKey.fromString(privateKey));\r\n\r\n      //Submit the transaction to a Hedera network\r\n      const txResponse = await signTx.execute(client);\r\n\r\n      //Request the receipt of the transaction\r\n      const receipt = await txResponse.getReceipt(client);\r\n\r\n      //Get the transaction consensus status\r\n      const transactionStatus = receipt.status;\r\n\r\n      console.log(\r\n        \"The transaction consensus status \" + transactionStatus.toString()\r\n      );\r\n\r\n      const tx = await new TransferTransaction()\r\n        .addTokenTransfer(props.K.TokenId, SellerAccId, -(Numb))\r\n        .addTokenTransfer(props.K.TokenId, accountId, (Numb))\r\n        .freezeWith(client);\r\n\r\n      //Sign with the sender account private key\r\n      const sign = await tx.sign(PrivateKey.fromString(SellerPrKey));\r\n\r\n      //Sign with the client operator private key and submit to a Hedera network\r\n      const txResponse1 = await sign.execute(client);\r\n\r\n      //Request the receipt of the transaction\r\n      const receipt1 = await txResponse1.getReceipt(client);\r\n\r\n      //Obtain the transaction consensus status\r\n      const transactionStatus1 = receipt1.status;\r\n\r\n      console.log(\r\n        \"The transaction consensus status \" + transactionStatus1.toString()\r\n      );\r\n\r\n      const txn = await new TransferTransaction()\r\n        .addHbarTransfer(SellerAccId, 1)\r\n        .addHbarTransfer(accountId, -1)\r\n\r\n        .freezeWith(client);\r\n\r\n      //Sign with the sender account private key\r\n      const sign2 = await txn.sign(PrivateKey.fromString(privateKey));\r\n\r\n      //Sign with the client operator private key and submit to a Hedera network\r\n      const txResponse2 = await sign2.execute(client);\r\n\r\n      //Request the receipt of the transaction\r\n      const receipt2 = await txResponse2.getReceipt(client);\r\n\r\n      //Obtain the transaction consensus status\r\n      const transactionStatus2 = receipt2.status;\r\n\r\n      console.log(\r\n        \"The transaction consensus status \" + transactionStatus1.toString()\r\n      );\r\n    };\r\n\r\n\r\n\r\n  return (\r\n    <div id=\"mcc\">\r\n      <Card id=\"cc\">\r\n        <Card.Img\r\n          id=\"pic\"\r\n          variant=\"top\"\r\n          src={`https://siasky.net/${props.K.Skylink}`}\r\n        />\r\n        <Card.Body>\r\n          <Card.Title id=\"kl\">{props.K.Name}</Card.Title>\r\n\r\n          <Card.Text id=\"gg\"> Description: {props.K.Description}</Card.Text>\r\n          <div id=\"ot\">\r\n            <OverlayTrigger\r\n              placement=\"bottom\"\r\n              overlay={<Tooltip id=\"button-tooltip-2\">{props.K.Creator}</Tooltip>}\r\n            >\r\n              {({ ref, ...triggerHandler }) => (\r\n                <Button\r\n                  id=\"bt1\"\r\n                  variant=\"light\"\r\n                  {...triggerHandler}\r\n                  className=\"d-inline-flex align-items-center\"\r\n                >\r\n                  <Image\r\n                    id=\"cim\"\r\n                    ref={ref}\r\n                    roundedCircle\r\n                    src=\"https://www.microsoft.com/en-us/research/wp-content/themes/microsoft-research-theme/assets/images/svg/icon-people-circle.svg\"\r\n                    height=\"20px\"\r\n                    width=\"20px\"\r\n                  />\r\n                  <span className=\"ml-1\">Hover to see Creator</span>\r\n                </Button>\r\n              )}\r\n            </OverlayTrigger>\r\n            ,\r\n          </div>\r\n\r\n          {/* <Card.Text id=\"gg\">\r\n                              {props.K.Creator}\r\n                            </Card.Text> */}\r\n          <Card.Text id=\"gl\">Amount: {props.K.Amount}</Card.Text>\r\n          <Card.Text id=\"gl\">Price: {props.K.Price}</Card.Text>\r\n          <div id=\"jkl\">\r\n            <input\r\n              value={Numb}\r\n              onChange={numb}\r\n              id=\"in\"\r\n              type=\"number\"\r\n              placeholder=\"Number of Ticket\"\r\n            ></input>\r\n            <Button onClick={buy} variant=\"contained\" color=\"primary\">\r\n              Buy\r\n            </Button>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\utils\\firebase.js",[],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\component\\TicketCard.js",["103","104","105","106","107","108","109","110"],"D:\\Web development\\Khazana2 ha\\Khazana\\tickets\\src\\hooks\\useKey.js",["111","112"],"import {useState} from 'react'\r\n\r\n\r\nexport default function useKey(initialValue) {\r\n    const [C , SetC] = useState(initialValue)\r\n\r\n    const a = (Key) => {\r\n        return [...C,Key]\r\n    }\r\n}\r\n",{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":1,"column":24,"nodeType":"119","messageId":"120","endLine":1,"endColumn":34},{"ruleId":"117","severity":1,"message":"121","line":2,"column":9,"nodeType":"119","messageId":"120","endLine":2,"endColumn":12},{"ruleId":"117","severity":1,"message":"122","line":4,"column":65,"nodeType":"119","messageId":"120","endLine":4,"endColumn":74},{"ruleId":"117","severity":1,"message":"123","line":5,"column":15,"nodeType":"119","messageId":"120","endLine":5,"endColumn":20},{"ruleId":"124","severity":1,"message":"125","line":88,"column":51,"nodeType":"126","messageId":"127","endLine":88,"endColumn":52},{"ruleId":"124","severity":1,"message":"125","line":88,"column":89,"nodeType":"126","messageId":"127","endLine":88,"endColumn":90},{"ruleId":"117","severity":1,"message":"128","line":3,"column":20,"nodeType":"119","messageId":"120","endLine":3,"endColumn":30},{"ruleId":"117","severity":1,"message":"129","line":1,"column":18,"nodeType":"119","messageId":"120","endLine":1,"endColumn":26},{"ruleId":"117","severity":1,"message":"128","line":3,"column":10,"nodeType":"119","messageId":"120","endLine":3,"endColumn":20},{"ruleId":"117","severity":1,"message":"130","line":3,"column":23,"nodeType":"119","messageId":"120","endLine":3,"endColumn":31},{"ruleId":"131","severity":1,"message":"132","line":27,"column":6,"nodeType":"133","endLine":27,"endColumn":8,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":43,"column":1,"nodeType":"137","messageId":"138","endLine":62,"endColumn":19},{"ruleId":"117","severity":1,"message":"139","line":4,"column":8,"nodeType":"119","messageId":"120","endLine":4,"endColumn":14},{"ruleId":"117","severity":1,"message":"140","line":19,"column":5,"nodeType":"119","messageId":"120","endLine":19,"endColumn":6},{"ruleId":"117","severity":1,"message":"141","line":20,"column":5,"nodeType":"119","messageId":"120","endLine":20,"endColumn":6},{"ruleId":"131","severity":1,"message":"142","line":30,"column":18,"nodeType":"143","endLine":97,"endColumn":4},{"ruleId":"131","severity":1,"message":"144","line":97,"column":6,"nodeType":"133","endLine":97,"endColumn":8,"suggestions":"145"},{"ruleId":"117","severity":1,"message":"122","line":4,"column":45,"nodeType":"119","messageId":"120","endLine":4,"endColumn":54},{"ruleId":"117","severity":1,"message":"146","line":19,"column":11,"nodeType":"119","messageId":"120","endLine":19,"endColumn":20},{"ruleId":"117","severity":1,"message":"147","line":20,"column":11,"nodeType":"119","messageId":"120","endLine":20,"endColumn":20},{"ruleId":"117","severity":1,"message":"148","line":21,"column":11,"nodeType":"119","messageId":"120","endLine":21,"endColumn":21},{"ruleId":"117","severity":1,"message":"149","line":13,"column":11,"nodeType":"119","messageId":"120","endLine":13,"endColumn":23},{"ruleId":"117","severity":1,"message":"150","line":18,"column":11,"nodeType":"119","messageId":"120","endLine":18,"endColumn":18},{"ruleId":"117","severity":1,"message":"147","line":21,"column":11,"nodeType":"119","messageId":"120","endLine":21,"endColumn":20},{"ruleId":"117","severity":1,"message":"151","line":106,"column":13,"nodeType":"119","messageId":"120","endLine":106,"endColumn":31},{"ruleId":"117","severity":1,"message":"152","line":2,"column":16,"nodeType":"119","messageId":"120","endLine":2,"endColumn":20},{"ruleId":"117","severity":1,"message":"153","line":5,"column":3,"nodeType":"119","messageId":"120","endLine":5,"endColumn":9},{"ruleId":"117","severity":1,"message":"154","line":6,"column":3,"nodeType":"119","messageId":"120","endLine":6,"endColumn":22},{"ruleId":"117","severity":1,"message":"155","line":7,"column":3,"nodeType":"119","messageId":"120","endLine":7,"endColumn":28},{"ruleId":"117","severity":1,"message":"128","line":8,"column":3,"nodeType":"119","messageId":"120","endLine":8,"endColumn":13},{"ruleId":"117","severity":1,"message":"156","line":13,"column":7,"nodeType":"119","messageId":"120","endLine":13,"endColumn":18},{"ruleId":"117","severity":1,"message":"149","line":14,"column":7,"nodeType":"119","messageId":"120","endLine":14,"endColumn":19},{"ruleId":"117","severity":1,"message":"157","line":16,"column":7,"nodeType":"119","messageId":"120","endLine":16,"endColumn":18},{"ruleId":"117","severity":1,"message":"158","line":5,"column":16,"nodeType":"119","messageId":"120","endLine":5,"endColumn":20},{"ruleId":"117","severity":1,"message":"159","line":7,"column":11,"nodeType":"119","messageId":"120","endLine":7,"endColumn":12},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'PublicKey' is defined but never used.","'Image' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'PrivateKey' is defined but never used.","'useState' is defined but never used.","'Mnemonic' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'K'. Either include it or remove the dependency array.","ArrayExpression",["162"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'useKey' is defined but never used.","'t' is defined but never used.","'v' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'T'. Either include it or remove the dependency array.",["163"],"'accountId' is assigned a value but never used.","'publicKey' is assigned a value but never used.","'privateKey' is assigned a value but never used.","'SellerPblKey' is assigned a value but never used.","'tokenId' is assigned a value but never used.","'transactionStatus2' is assigned a value but never used.","'Form' is defined but never used.","'Client' is defined but never used.","'TransferTransaction' is defined but never used.","'TokenAssociateTransaction' is defined but never used.","'SellerAccId' is assigned a value but never used.","'SellerPrKey' is assigned a value but never used.","'SetC' is assigned a value but never used.","'a' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},"Update the dependencies array to be: [K]",{"range":"168","text":"169"},"Update the dependencies array to be: [T]",{"range":"170","text":"171"},[482,484],"[K]",[2619,2621],"[T]"]